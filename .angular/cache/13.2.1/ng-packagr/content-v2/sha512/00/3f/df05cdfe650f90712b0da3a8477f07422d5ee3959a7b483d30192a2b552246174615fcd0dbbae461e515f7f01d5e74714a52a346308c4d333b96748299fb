{"hash":"b22bd74dd4c70de636031c04776a76faf0141a19","fesm2020":{"code":"import PouchDB$1 from 'pouchdb-browser';\nimport PouchDBFind from 'pouchdb-find';\nimport PouchDBQuickSearch from 'pouchdb-quick-search';\nimport PouchDBWorker from 'worker-pouch';\nimport * as rxjs0 from 'rxjs';\nimport { Observable, Subject, timer, throwError } from 'rxjs';\nimport { debounce, retry, timeout, filter, tap } from 'rxjs/operators';\nimport * as rxjs1 from 'rxjs/observable/fromPromise';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\nclass C8oLogLevel {\r\n    constructor(name, priority) {\r\n        this.name = name;\r\n        this.priority = priority;\r\n    }\r\n    static getC8oLogLevel(name) {\r\n        for (let i = 0; i <= C8oLogLevel.C8O_LOG_LEVELS.length; i++) {\r\n            if (C8oLogLevel.C8O_LOG_LEVELS[i].name === name) {\r\n                return C8oLogLevel.C8O_LOG_LEVELS[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n// private static JSON_KEY_REMOTE_LOG_LEVEL: string = \"remoteLogLevel\";\r\nC8oLogLevel.NULL = new C8oLogLevel(\"\", 0);\r\nC8oLogLevel.NONE = new C8oLogLevel(\"none\", 1);\r\nC8oLogLevel.TRACE = new C8oLogLevel(\"trace\", 2);\r\nC8oLogLevel.DEBUG = new C8oLogLevel(\"debug\", 3);\r\nC8oLogLevel.INFO = new C8oLogLevel(\"info\", 4);\r\nC8oLogLevel.WARN = new C8oLogLevel(\"warn\", 5);\r\nC8oLogLevel.ERROR = new C8oLogLevel(\"error\", 6);\r\nC8oLogLevel.FATAL = new C8oLogLevel(\"fatal\", 7);\r\nC8oLogLevel.C8O_LOG_LEVELS = [C8oLogLevel.NULL, C8oLogLevel.NONE, C8oLogLevel.TRACE, C8oLogLevel.DEBUG, C8oLogLevel.INFO, C8oLogLevel.WARN, C8oLogLevel.ERROR, C8oLogLevel.FATAL];\n\nclass C8oBase {\r\n    constructor() {\r\n        this._timeout = 3600000;\r\n        // protected _trustAllCertificates: boolean = false;\r\n        this._cookies = {};\r\n        /*Log*/\r\n        this._logRemote = true;\r\n        this._initialLogRemote = true;\r\n        this._logLevelLocal = C8oLogLevel.NONE;\r\n        this._logC8o = false;\r\n        /* FullSync */\r\n        this._defaultDatabaseName = null;\r\n        this._authenticationCookieValue = null;\r\n        this._fullSyncLocalSuffix = null;\r\n        this._fullSyncServerUrl = \"http://localhost:5984\";\r\n        /* Encryption */\r\n        this._useEncryption = false;\r\n        this._disableSSL = false;\r\n        //Dates\r\n        this._useworker = false;\r\n        this._keepSessionAlive = true;\r\n        this._errorConvertigoIntoFail = false;\r\n        this._resetBase = true;\r\n        this._prefixBase = false;\r\n        this._headers = {};\r\n    }\r\n    /** Getters **/\r\n    /**\r\n     * Gets if normalize parameters.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The timeout.\r\n     */\r\n    get usewroker() {\r\n        return this._useworker;\r\n    }\r\n    /**\r\n     * Gets if normalize parameters.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The timeout.\r\n     */\r\n    get normalizeParameters() {\r\n        return this._normalizeParameters;\r\n    }\r\n    /**\r\n     * Gets if session has to be keep alive.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The KeepSessionAlive status.\r\n     */\r\n    get keepSessionAlive() {\r\n        return this._keepSessionAlive;\r\n    }\r\n    /**\r\n     * Gets if error convertigo are thrown into fail.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The errorConvertigoIntoFail status.\r\n     */\r\n    get errorConvertigoIntoFail() {\r\n        return this._errorConvertigoIntoFail;\r\n    }\r\n    /**\r\n     * Gets if reset database is disabled.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The disable reset base status.\r\n     */\r\n    get resetBase() {\r\n        return this._resetBase;\r\n    }\r\n    /**\r\n     * Gets if we have to prefix databases with user name.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The prefix base status.\r\n     */\r\n    get prefixBase() {\r\n        return this._prefixBase;\r\n    }\r\n    /**\r\n     * Gets the connection timeout to Convertigo in milliseconds. A value of zero means the timeout is not used.<br/>\r\n     * Default is <b>0</b>.\r\n     * @returns The timeout.\r\n     */\r\n    get timeout() {\r\n        return this._timeout;\r\n    }\r\n    /**\r\n     * Gets a value indicating whether https calls trust all certificates or not.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns <b>true</b> if https calls trust all certificates; otherwise, <b>false</b>.\r\n     */\r\n    /*public get trustAllCertificates(): boolean {\r\n        return this._trustAllCertificates;\r\n    }*/\r\n    /**\r\n     * Gets initial cookies to send to the Convertigo server.<br/>\r\n     * Default is <b>null</b>.\r\n     * @returns List of cookies.\r\n     */\r\n    get cookies() {\r\n        return this._cookies;\r\n    }\r\n    /**\r\n     * Gets a value indicating if logs are sent to the Convertigo server.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns <b>true</b> if logs are sent to the Convertigo server; otherwise, <b>false</b>.\r\n     */\r\n    get logRemote() {\r\n        return this._logRemote;\r\n    }\r\n    /**\r\n     * Gets a value indicating logs level local\r\n     *\r\n     * @returns C8oLogLevel object\r\n     */\r\n    get logLevelLocal() {\r\n        return this._logLevelLocal;\r\n    }\r\n    get logC8o() {\r\n        return this._logC8o;\r\n    }\r\n    get defaultDatabaseName() {\r\n        return this._defaultDatabaseName;\r\n    }\r\n    get authenticationCookieValue() {\r\n        return this._authenticationCookieValue;\r\n    }\r\n    get fullSyncLocalSuffix() {\r\n        return this._fullSyncLocalSuffix;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get fullSyncServerUrl() {\r\n        return this._fullSyncServerUrl;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get fullSyncUsername() {\r\n        return this._fullSyncUsername;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get fullSyncPassword() {\r\n        return this._fullSyncPassword;\r\n    }\r\n    get logOnFail() {\r\n        return this._logOnFail;\r\n    }\r\n    /**\r\n     * Gets the endpoint define in C8oSettings<br/>\r\n     * @returns The current <b>endpoint</b>, if defined by c8oSettings.\r\n     */\r\n    get endpoint() {\r\n        return this._endpointSettings;\r\n    }\r\n    get headers() {\r\n        return this._headers;\r\n    }\r\n    copy(c8oBase) {\r\n        if (c8oBase !== undefined) {\r\n            /** HTTP **/\r\n            this._timeout = c8oBase._timeout;\r\n            // this._trustAllCertificates = c8oBase._trustAllCertificates;\r\n            if (this.cookies == null) {\r\n                this._cookies = {};\r\n            }\r\n            if (c8oBase.cookies !== null) {\r\n                this._cookies = c8oBase._cookies;\r\n            }\r\n            /** Log **/\r\n            this._logRemote = c8oBase.logRemote;\r\n            this._initialLogRemote = c8oBase.logRemote;\r\n            this._logLevelLocal = c8oBase.logLevelLocal;\r\n            this._logC8o = c8oBase.logC8o;\r\n            this._logOnFail = c8oBase.logOnFail;\r\n            /** FullSync **/\r\n            this._defaultDatabaseName = c8oBase.defaultDatabaseName;\r\n            this._authenticationCookieValue = c8oBase.authenticationCookieValue;\r\n            this._fullSyncLocalSuffix = c8oBase.fullSyncLocalSuffix;\r\n            this._fullSyncServerUrl = c8oBase.fullSyncServerUrl;\r\n            this._fullSyncUsername = c8oBase.fullSyncUsername;\r\n            this._fullSyncPassword = c8oBase.fullSyncPassword;\r\n            this._headers = c8oBase._headers;\r\n            /** Date **/\r\n            this._normalizeParameters = c8oBase._normalizeParameters;\r\n            /**Keep ALive */\r\n            this._keepSessionAlive = c8oBase._keepSessionAlive;\r\n            /** Reset base */\r\n            this._resetBase = c8oBase._resetBase;\r\n            /** Reset base */\r\n            this._prefixBase = c8oBase._prefixBase;\r\n            this._errorConvertigoIntoFail = c8oBase._errorConvertigoIntoFail;\r\n            this._useworker = c8oBase.usewroker;\r\n        }\r\n    }\r\n}\n\n// @dynamic\r\nclass C8oUtilsCore {\r\n    constructor() {\r\n    }\r\n    /**\r\n     * Returns the class name of the object as a String, if the object is null then returns the String \"null\".\r\n     *\r\n     * @param object\r\n     * @returns string\r\n     */\r\n    static getObjectClassName(object) {\r\n        return typeof object;\r\n    }\r\n    static isValidUrl(url) {\r\n        return /^(http|https):\\/\\/[^ \"]+$/.test(url.toString());\r\n    }\r\n    /**\r\n     * returns 128 bits hash using MD5 algo\r\n     * @param str any string\r\n     */\r\n    static MD5(str) {\r\n        const MD5 = (d) => { var r = M(V(Y(X(d), 8 * d.length))); return r.toLowerCase(); };\r\n        function M(d) { for (var _, m = \"0123456789ABCDEF\", f = \"\", r = 0; r < d.length; r++)\r\n            _ = d.charCodeAt(r), f += m.charAt(_ >>> 4 & 15) + m.charAt(15 & _); return f; }\r\n        function X(d) { for (var _ = Array(d.length >> 2), m = 0; m < _.length; m++)\r\n            _[m] = 0; for (m = 0; m < 8 * d.length; m += 8)\r\n            _[m >> 5] |= (255 & d.charCodeAt(m / 8)) << m % 32; return _; }\r\n        function V(d) { for (var _ = \"\", m = 0; m < 32 * d.length; m += 8)\r\n            _ += String.fromCharCode(d[m >> 5] >>> m % 32 & 255); return _; }\r\n        function Y(d, _) { d[_ >> 5] |= 128 << _ % 32, d[14 + (_ + 64 >>> 9 << 4)] = _; for (var m = 1732584193, f = -271733879, r = -1732584194, i = 271733878, n = 0; n < d.length; n += 16) {\r\n            var h = m, t = f, g = r, e = i;\r\n            f = md5_ii(f = md5_ii(f = md5_ii(f = md5_ii(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_ff(f = md5_ff(f = md5_ff(f = md5_ff(f, r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 0], 7, -680876936), f, r, d[n + 1], 12, -389564586), m, f, d[n + 2], 17, 606105819), i, m, d[n + 3], 22, -1044525330), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 4], 7, -176418897), f, r, d[n + 5], 12, 1200080426), m, f, d[n + 6], 17, -1473231341), i, m, d[n + 7], 22, -45705983), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 8], 7, 1770035416), f, r, d[n + 9], 12, -1958414417), m, f, d[n + 10], 17, -42063), i, m, d[n + 11], 22, -1990404162), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 12], 7, 1804603682), f, r, d[n + 13], 12, -40341101), m, f, d[n + 14], 17, -1502002290), i, m, d[n + 15], 22, 1236535329), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 1], 5, -165796510), f, r, d[n + 6], 9, -1069501632), m, f, d[n + 11], 14, 643717713), i, m, d[n + 0], 20, -373897302), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 5], 5, -701558691), f, r, d[n + 10], 9, 38016083), m, f, d[n + 15], 14, -660478335), i, m, d[n + 4], 20, -405537848), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 9], 5, 568446438), f, r, d[n + 14], 9, -1019803690), m, f, d[n + 3], 14, -187363961), i, m, d[n + 8], 20, 1163531501), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 13], 5, -1444681467), f, r, d[n + 2], 9, -51403784), m, f, d[n + 7], 14, 1735328473), i, m, d[n + 12], 20, -1926607734), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 5], 4, -378558), f, r, d[n + 8], 11, -2022574463), m, f, d[n + 11], 16, 1839030562), i, m, d[n + 14], 23, -35309556), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 1], 4, -1530992060), f, r, d[n + 4], 11, 1272893353), m, f, d[n + 7], 16, -155497632), i, m, d[n + 10], 23, -1094730640), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 13], 4, 681279174), f, r, d[n + 0], 11, -358537222), m, f, d[n + 3], 16, -722521979), i, m, d[n + 6], 23, 76029189), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 9], 4, -640364487), f, r, d[n + 12], 11, -421815835), m, f, d[n + 15], 16, 530742520), i, m, d[n + 2], 23, -995338651), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 0], 6, -198630844), f, r, d[n + 7], 10, 1126891415), m, f, d[n + 14], 15, -1416354905), i, m, d[n + 5], 21, -57434055), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 12], 6, 1700485571), f, r, d[n + 3], 10, -1894986606), m, f, d[n + 10], 15, -1051523), i, m, d[n + 1], 21, -2054922799), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 8], 6, 1873313359), f, r, d[n + 15], 10, -30611744), m, f, d[n + 6], 15, -1560198380), i, m, d[n + 13], 21, 1309151649), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 4], 6, -145523070), f, r, d[n + 11], 10, -1120210379), m, f, d[n + 2], 15, 718787259), i, m, d[n + 9], 21, -343485551), m = safe_add(m, h), f = safe_add(f, t), r = safe_add(r, g), i = safe_add(i, e);\r\n        } return Array(m, f, r, i); }\r\n        function md5_cmn(d, _, m, f, r, i) { return safe_add(bit_rol(safe_add(safe_add(_, d), safe_add(f, i)), r), m); }\r\n        function md5_ff(d, _, m, f, r, i, n) { return md5_cmn(_ & m | ~_ & f, d, _, r, i, n); }\r\n        function md5_gg(d, _, m, f, r, i, n) { return md5_cmn(_ & f | m & ~f, d, _, r, i, n); }\r\n        function md5_hh(d, _, m, f, r, i, n) { return md5_cmn(_ ^ m ^ f, d, _, r, i, n); }\r\n        function md5_ii(d, _, m, f, r, i, n) { return md5_cmn(m ^ (_ | ~f), d, _, r, i, n); }\r\n        function safe_add(d, _) { var m = (65535 & d) + (65535 & _); return (d >> 16) + (_ >> 16) + (m >> 16) << 16 | 65535 & m; }\r\n        function bit_rol(d, _) { return d << _ | d >>> 32 - _; }\r\n        return MD5(str);\r\n    }\r\n    /**\r\n     *\r\n     * @param str any string\r\n     */\r\n    static MD5ArrayBuffer(str) {\r\n        const MD5str = C8oUtilsCore.MD5(str);\r\n        return Buffer.from(MD5str, 'utf-8').slice(0, 16);\r\n    }\r\n    static getNewGUIDString() {\r\n        if (window[\"device\"] != undefined) {\r\n            let platform = window[\"device\"][\"platform\"];\r\n            platform = platform.substring(0, 3);\r\n            let uuid = platform + \"-\" + window[\"device\"][\"uuid\"];\r\n            return uuid;\r\n        }\r\n        else {\r\n            let uuidStored = localStorage.getItem(\"__c8o_uuid\");\r\n            if (uuidStored != undefined && uuidStored != \"\") {\r\n                return uuidStored;\r\n            }\r\n            else {\r\n                let platform = \"web-\";\r\n                let d = new Date().getTime();\r\n                let uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\r\n                    const r = (d + Math.random() * 16) % 16 | 0;\r\n                    d = Math.floor(d / 16);\r\n                    return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\r\n                });\r\n                uuid = platform + uuid;\r\n                localStorage.setItem(\"__c8o_uuid\", uuid);\r\n                return uuid;\r\n            }\r\n        }\r\n    }\r\n    /** TAG Parameter **/\r\n    static getParameter(parameters, name, useName) {\r\n        for (let _i = 0; _i < Object.keys(parameters).length; _i++) {\r\n            const parameterName = Object.keys(parameters)[_i];\r\n            if ((name === parameterName) || (useName && name === this.USE_PARAMETER_IDENTIFIER + parameterName)) {\r\n                const obj = {};\r\n                obj[Object.keys(parameters)[_i]] = parameters[Object.keys(parameters)[_i]];\r\n                return obj;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Searches in the list the parameter with this specific name (or the same name with the prefix '_use_') and returns it.<br/>\r\n     * Returns null if the parameter is not found.\r\n     *\r\n     * @param parameters\r\n     * @param name\r\n     * @param useName\r\n     * @returns string\r\n     */\r\n    static getParameterStringValue(parameters, name, useName) {\r\n        const parameter = C8oUtilsCore.getParameter(parameters, name, useName);\r\n        if (parameter != null) {\r\n            return \"\" + parameter[name];\r\n        }\r\n        return null;\r\n    }\r\n    static getParameterObjectValue(parameters, name, useName = false) {\r\n        //noinspection UnnecessaryLocalVariableJS\r\n        const parameters2 = parameters;\r\n        const parameter = C8oUtilsCore.getParameter(parameters2, name, useName);\r\n        if (parameter != null) {\r\n            return parameter[name];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    static peekParameterStringValue(parameters, name, exceptionIfMissing) {\r\n        //noinspection UnnecessaryLocalVariableJS\r\n        const parameters2 = parameters;\r\n        const value = this.getParameterStringValue(parameters2, name, false);\r\n        if (value == null) {\r\n            if (exceptionIfMissing) {\r\n                throw new Error(\"The parameter '\" + name + \"' is missing\");\r\n            }\r\n        }\r\n        else {\r\n            delete parameters[name];\r\n        }\r\n        return value;\r\n    }\r\n    static peekParameterObjectValue(parameters, name, exceptionIfMissing) {\r\n        const parameters2 = parameters;\r\n        const value = this.getParameterObjectValue(parameters2, name, false);\r\n        if (value == null) {\r\n            if (exceptionIfMissing) {\r\n                throw new Error(\"The parameter '\" + name + \"' is missing\");\r\n            }\r\n        }\r\n        else {\r\n            delete parameters2[name];\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * Serializes a c8o call request thanks to its parameters and response type.\r\n     *\r\n     * @param parameters\r\n     * @param responseType\r\n     * @returns string\r\n     * @throws C8oException\r\n     */\r\n    static identifyC8oCallRequest(parameters, responseType) {\r\n        return responseType + JSON.stringify(parameters);\r\n    }\r\n    static checkHeaderArgument(response, argument) {\r\n        return response.headers.get(argument);\r\n    }\r\n}\r\n/** FullSync parameters prefix. **/\r\nC8oUtilsCore.USE_PARAMETER_IDENTIFIER = \"_use_\";\r\nclass Queue {\r\n    constructor() {\r\n        this._store = [];\r\n    }\r\n    push(val) {\r\n        this._store.push(val);\r\n    }\r\n    pop() {\r\n        return this._store.shift();\r\n    }\r\n    count() {\r\n        return this._store.length;\r\n    }\r\n}\r\nclass Semaphore {\r\n    constructor(max) {\r\n        this.counter = 0;\r\n        this.waiting = [];\r\n        this.max = max;\r\n    }\r\n    take() {\r\n        if (this.waiting.length > 0 && this.counter < this.max) {\r\n            this.counter++;\r\n            let promise = this.waiting.shift();\r\n            promise.resolve();\r\n        }\r\n    }\r\n    acquire() {\r\n        if (this.counter < this.max) {\r\n            this.counter++;\r\n            return new Promise(resolve => {\r\n                resolve();\r\n            });\r\n        }\r\n        else {\r\n            return new Promise((resolve, err) => {\r\n                this.waiting.push({ resolve: resolve, err: err });\r\n            });\r\n        }\r\n    }\r\n    release(arg = null) {\r\n        this.counter--;\r\n        this.take();\r\n    }\r\n    purge() {\r\n        let unresolved = this.waiting.length;\r\n        for (let i = 0; i < unresolved; i++) {\r\n            this.waiting[i].err('Task has been purged.');\r\n        }\r\n        this.counter = 0;\r\n        this.waiting = [];\r\n        return unresolved;\r\n    }\r\n}\n\n/**\r\n * Thrown specific exceptions to Convertigo.\r\n */\r\nclass C8oException extends Error {\r\n    //noinspection JSUnusedLocalSymbols\r\n    constructor(message, cause = null, all = false) {\r\n        if (cause == null) {\r\n            super(message);\r\n            this.message = message;\r\n            // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n            Object.setPrototypeOf(this, C8oException.prototype);\r\n        }\r\n        else {\r\n            super(message);\r\n            this.message = message;\r\n            this._cause = cause;\r\n            // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n            Object.setPrototypeOf(this, C8oException.prototype);\r\n        }\r\n    }\r\n    get cause() {\r\n        return this._cause;\r\n    }\r\n    toJSON() {\r\n        var alt = {};\r\n        Object.getOwnPropertyNames(this).forEach(function (key) {\r\n            alt[key] = this[key];\r\n        }, this);\r\n        return alt;\r\n    }\r\n    toString() {\r\n        var alt = {};\r\n        Object.getOwnPropertyNames(this).forEach(function (key) {\r\n            alt[key] = this[key];\r\n        }, this);\r\n        return alt;\r\n    }\r\n}\n\n/**\r\n * Contains static Functions returning the exception messages\r\n * in order to make simpler their modification and avoid duplication.\r\n */\r\nclass C8oExceptionMessage {\r\n    /** TAG Illegal argument **/\r\n    static notImplementedFullSyncInterface() {\r\n        return \"You are using the default FullSyncInterface which is not implemented\";\r\n    }\r\n    static invalidParameterValue(parameterName, details = null) {\r\n        let errorMessage = \"The parameter '\" + parameterName + \"' is invalid\";\r\n        if (details != null) {\r\n            errorMessage += \", \" + details;\r\n        }\r\n        return errorMessage;\r\n    }\r\n    static illegalArgumentInvalidEndpoint(endpoint) {\r\n        return \"'\" + endpoint + \"' is not a valid Convertigo endpoint\";\r\n    }\r\n    static wrongListener(c8oListener) {\r\n        return \"The C8oListener class \" + C8oUtilsCore.getObjectClassName(c8oListener) + \" is not handled\";\r\n    }\r\n    static illegalArgumentNullParameter(parameterName) {\r\n        return parameterName + \" must be not null\";\r\n    }\r\n    static missingValue(valueName) {\r\n        return \"The \" + valueName + \" is missing\";\r\n    }\r\n    static unknownValue(valueName, value) {\r\n        return \"The \" + valueName + \" value \" + value + \" is unknown\";\r\n    }\r\n    static unknownType(variableName, variable) {\r\n        return \"The \" + variableName + \" type \" + C8oUtilsCore.getObjectClassName(variable) + \"is unknown\";\r\n    }\r\n    static ressourceNotFound(ressourceName) {\r\n        return \"The \" + ressourceName + \" was not found\";\r\n    }\r\n    /** TAG Illegal argument */\r\n    static illegalArgumentInvalidFullSyncDatabaseUrl(fullSyncDatabaseUrlStr) {\r\n        return \"The fullSync database url '\" + fullSyncDatabaseUrlStr + \"' is not a valid url\";\r\n    }\r\n    static FullSyncDatabaseInitFailed(databaseName) {\r\n        return \"Failed to initialize the FullSync database '\" + databaseName + \"'\";\r\n    }\r\n    static MissParameter(parameterName) {\r\n        return \"The parameter '\" + parameterName + \"' is missing\";\r\n    }\r\n    /* private static  illegalArgumentInvalidParameterValue(parameterName: string, parameterValue: string): string {\r\n     return \"'\" + parameterValue + \"' is not a valid value for the parameter '\" + parameterName + \"'\"\r\n     } */\r\n    static illegalArgumentInvalidURL(urlStr) {\r\n        return \"'\" + urlStr + \"' is not a valid URL\";\r\n    }\r\n    static InvalidArgumentInvalidURL(urlStr) {\r\n        return \"'\" + urlStr + \"' is not a valid URL\";\r\n    }\r\n    static UnknownFullSyncPolicy(policy) {\r\n        return \"Unknown the FullSync policy '\" + policy + \"'\";\r\n    }\r\n    static InvalidArgumentInvalidEndpoint(endpoint) {\r\n        return \"'\" + endpoint + \"' is not a valid Convertigo endpoint\";\r\n    }\r\n    static InvalidRequestable(requestable) {\r\n        return \"'\" + requestable + \"' is not a valid requestable.\";\r\n    }\r\n    static InvalidParameterType(parameterName, wantedParameterType, actualParameterType) {\r\n        return \"The parameter '\" + parameterName + \"' must be of type '\" + wantedParameterType + \"' and not '\" + actualParameterType + \"'\";\r\n    }\r\n    static illegalArgumentIncompatibleListener(listenerType, responseType) {\r\n        return \"The listener type '\" + listenerType + \"' is incompatible with the response type '\" + responseType + \"'\";\r\n    }\r\n    static InvalidArgumentNullParameter(parameterName) {\r\n        return parameterName + \" must be not null\";\r\n    }\r\n    /** TAG Initialization */\r\n    static InitError() {\r\n        return \"Unable to initialize\";\r\n    }\r\n    static InitRsainternalKey() {\r\n        return \"Unable to initialize the RSA internal key\";\r\n    }\r\n    static InitCouchManager() {\r\n        return \"Unable to initialize the fullSync databases manager\";\r\n    }\r\n    static InitSslSocketFactory() {\r\n        return \"Unable to initialize the ssl socket factory\";\r\n    }\r\n    static InitDocumentBuilder() {\r\n        return \"Unable to initialize the XML document builder\";\r\n    }\r\n    /** TAG Parse */\r\n    static ParseStreamToJson() {\r\n        return \"Unable to parse the input stream to a json document\";\r\n    }\r\n    static ParseStreamToXml() {\r\n        return \"Unable to parse the input stream to an xml document\";\r\n    }\r\n    static parseInputStreamToString() {\r\n        return \"Unable to parse the input stream to a string\";\r\n    }\r\n    static parseXmlToString() {\r\n        return \"Unable to parse the xml document to a string\";\r\n    }\r\n    static parseRsainternalKey() {\r\n        return \"Unable to parse the RSA internal key\";\r\n    }\r\n    static parseQueryEnumeratorToJson() {\r\n        return \"Unable to parse the query to a json document\";\r\n    }\r\n    static parseLogsToJson() {\r\n        return \"Unable to parse logs to a json document\";\r\n    }\r\n    static parseLogsStreamToJson() {\r\n        return \"Unable to parse stream containing logs response to a json document\";\r\n    }\r\n    static parseC8oReplicationResultToJson() {\r\n        return \"Unable to parse the replication result to a json document\";\r\n    }\r\n    static parseFullSyncDefaultResponseToJson() {\r\n        return \"Unable to parse the default fullSync result to a json document\";\r\n    }\r\n    static parseFullSyncPostDocumentResponseToJson() {\r\n        return \"Unable to parse the post document fullSync result to a json document\";\r\n    }\r\n    static parseStringToJson() {\r\n        return \"Unable to parse the string to a JSON document\";\r\n    }\r\n    static ParseStringToObject(type /*type*/) {\r\n        return \"Unable to parse the string (JSON):string to an object of type \"; // + type\r\n    }\r\n    static StringToJsonValue(str) {\r\n        return \"Unable to translate the string '\" + str + \"' to a JSON value\";\r\n    }\r\n    /** TAG HTTP */\r\n    static retrieveRsainternalKey() {\r\n        return \"Error during http request to get the RSA internal key\";\r\n    }\r\n    static httpLogs() {\r\n        return \"Error during http request to send logs to the Convertigo server\";\r\n    }\r\n    /** TAG Couch */\r\n    static couchRequestGetView() {\r\n        return \"Unable to run the view query\";\r\n    }\r\n    static couchRequestCreateIndex() {\r\n        return \"Unable to create the index\";\r\n    }\r\n    static couchRequestFind() {\r\n        return \"Unable to run the query find\";\r\n    }\r\n    static couchRequestExplain() {\r\n        return \"Unable to run the query explain\";\r\n    }\r\n    static couchRequestGetIndexes() {\r\n        return \"Unable to run the query getIndexes\";\r\n    }\r\n    static couchRequestDeleteIndex() {\r\n        return \"Unable to run the query deleteIndex\";\r\n    }\r\n    static couchRequestSearch() {\r\n        return \"Unable to run the query search\";\r\n    }\r\n    static couchRequestAllDocuments() {\r\n        return \"Unable to run the all query\";\r\n    }\r\n    static couchRequestResetDatabase() {\r\n        return \"Unable to run the reset query\";\r\n    }\r\n    static couchRequestDeleteDocument() {\r\n        return \"Unable to run the delete document query\";\r\n    }\r\n    static couchRequestInvalidRevision() {\r\n        return \"The revision is invalid\";\r\n    }\r\n    static couchRequestPostDocument() {\r\n        return \"Unable to run the post document query\";\r\n    }\r\n    static unableToGetFullSyncDatabase(databaseName) {\r\n        return \"Unable to get the fullSync database '\" + databaseName + \"' from the manager\";\r\n    }\r\n    static couchNullResult() {\r\n        return \"An error occured during the fullSync request, its result is null\";\r\n    }\r\n    static couchFullSyncNotActive() {\r\n        return \"Unable to use fullSync because it was not activated at the initialization\";\r\n    }\r\n    static CouchDeleteFailed() {\r\n        return \"Delete the Couch document failed\";\r\n    }\r\n    static fullSyncPutProperties(properties) {\r\n        return \"Unable to put the following properties in the fullSync Document: \" + JSON.stringify(properties);\r\n    }\r\n    static fullSyncGetOrCreateDatabase(databaseName) {\r\n        return \"Unable to get or create the fullSync database '\" + databaseName + \"'\";\r\n    }\r\n    static fullSyncHandleResponse() {\r\n        return \"Error while handling the fullSync response\";\r\n    }\r\n    /** TAG Certificate */\r\n    static loadKeyStore() {\r\n        return \"Failed to load key store\";\r\n    }\r\n    static trustAllCertificates() {\r\n        return \"Unable to load a key store trusting all certificates\";\r\n    }\r\n    static clientKeyStore() {\r\n        return \"Unable to load the client key store\";\r\n    }\r\n    static serverKeyStore() {\r\n        return \"Unable to load the server key store\";\r\n    }\r\n    /** TAG Not found */\r\n    static illegalArgumentNotFoundFullSyncView(viewName, databaseName) {\r\n        return \"Cannot found the view '\" + viewName + \"' in database '\" + databaseName + \"'\";\r\n    }\r\n    /** TAG Other */\r\n    static unhandledResponseType(responseType) {\r\n        return \"The response type '\" + responseType + \"' is not handled\";\r\n    }\r\n    static unhandledListenerType(listenerType) {\r\n        return \"The listener type '\" + listenerType + \"' is not handled\";\r\n    }\r\n    //noinspection JSUnusedLocalSymbols\r\n    static WrongListener(c8oListener) {\r\n        return \"wrong listener\"; // \"The C8oListener class \" + C8oUtils.GetObjectClassName(c8oListener) + \" is not handled\"\r\n    }\r\n    static wrongResult(result) {\r\n        return \"The response class \" + C8oUtilsCore.getObjectClassName(result) + \" is not handled\";\r\n    }\r\n    static unhandledFullSyncRequestable(fullSyncRequestableValue) {\r\n        return \"The fullSync requestable '\" + fullSyncRequestableValue + \"' is not handled\";\r\n    }\r\n    static closeInputStream() {\r\n        return \"Unable to close the input stream\";\r\n    }\r\n    static deserializeJsonObjectFromString(str) {\r\n        return \"Unable to deserialize the JSON object from the following string: '\" + str + \"'\";\r\n    }\r\n    static postDocument() {\r\n        return \"Unable to post document\";\r\n    }\r\n    static getNameValuePairObjectValue(name) {\r\n        return \"Unable to get the object value from the NameValuePair named '\" + name + \"'\";\r\n    }\r\n    static queryEnumeratorToJSON() {\r\n        return \"Unable to parse the QueryEnumerator to a JSON document\";\r\n    }\r\n    static queryEnumeratorToXML() {\r\n        return \"Unable to parse the QueryEnumerator to a XML document\";\r\n    }\r\n    static addparametersToQuery() {\r\n        return \"Unable to add parameters to the fullSync query\";\r\n    }\r\n    static putJson() {\r\n        return \"Failed to put data in JSON ...\";\r\n    }\r\n    static changeEventToJson() {\r\n        return \"Failed to parse ChangeEvent to JSON document\";\r\n    }\r\n    static initC8oSslSocketFactory() {\r\n        return \"Failed to initialize C8oSslSocketFactory\";\r\n    }\r\n    static createSslContext() {\r\n        return \"failed to create a new SSL context\";\r\n    }\r\n    static keyManagerFactoryInstance() {\r\n        return \"Failed to instanciate KeyManagerFactory\";\r\n    }\r\n    static initKeyManagerFactory() {\r\n        return \"Failed to initialize the key manager factory\";\r\n    }\r\n    static InitHttpInterface() {\r\n        return \"Failed to initialize the secure HTTP Interface\";\r\n    }\r\n    static trustManagerFactoryInstance() {\r\n        return \"Failed to instanciate KeyManagerFactory\";\r\n    }\r\n    static initTrustManagerFactory() {\r\n        return \"Failed to initialize the key manager factory\";\r\n    }\r\n    static initSslContext() {\r\n        return \"Failed to initialize the SSL context\";\r\n    }\r\n    static initCipher() {\r\n        return \"Failed to initialize the cipher\";\r\n    }\r\n    static urlEncode() {\r\n        return \"Failed to URL encode parameters\";\r\n    }\r\n    static getParametersStringBytes() {\r\n        return \"Failed to get parameters string bytes\";\r\n    }\r\n    static encodeParameters() {\r\n        return \"Failed to encode parameters\";\r\n    }\r\n    static RunHttpRequest() {\r\n        return \"Failed to run the HTTP request\";\r\n    }\r\n    static generateRsainternalKey() {\r\n        return \"Failed to generate RSA internal key\";\r\n    }\r\n    static keyFactoryInstance() {\r\n        return \"Failed to get KeyFactory instance\";\r\n    }\r\n    static getCipherInstance() {\r\n        return \"Failed to get Cipher instance\";\r\n    }\r\n    static entryNotFound(entryKey) {\r\n        return \"Entry key '\" + entryKey + \"' not found\";\r\n    }\r\n    static c8oCallRequestToJson() {\r\n        return \"Failed to parse c8o call request to JSON\";\r\n    }\r\n    static getJsonKey(key) {\r\n        return \"Failed to get the JSON key '\" + key + \"'\";\r\n    }\r\n    static jsonValueToXML() {\r\n        return \"Failed to parse JSON value to XML\";\r\n    }\r\n    static inputStreamToXML() {\r\n        return \"Failed to parse InputStream to an XML document\";\r\n    }\r\n    static inputStreamReaderEncoding() {\r\n        return \"Failed to instanciate the InputStreamReader\";\r\n    }\r\n    static readLineFromBufferReader() {\r\n        return \"Failed to read line from the BufferReader\";\r\n    }\r\n    static GetLocalCacheParameters() {\r\n        return \"Failed to get local cache parameters\";\r\n    }\r\n    static GetLocalCachePolicy(policy) {\r\n        return \"Failed to get local cache policy: \" + policy;\r\n    }\r\n    static fullSyncJsonToXML() {\r\n        return \"Failed to translate full sync JSON to XML\";\r\n    }\r\n    static takeLog() {\r\n        return \"Failed to take a log line in the list\";\r\n    }\r\n    static remoteLogHttpRequest() {\r\n        return \"Failed while running the HTTP request sending logs to the Convertigo server\";\r\n    }\r\n    static getInputStreamFromHttpResponse() {\r\n        return \"Failed to get InputStream from the HTTP response\";\r\n    }\r\n    static inputStreamToJSON() {\r\n        return \"Failed to translate the input stream to a JSON document\";\r\n    }\r\n    static httpInterfaceInstance() {\r\n        return \"Failed to instanciate the HTTP interface\";\r\n    }\r\n    static FullSyncInterfaceInstance() {\r\n        return \"Failed to instanciate the FullSync interface\";\r\n    }\r\n    static getDocumentFromDatabase(documentId) {\r\n        return \"Failed to get fullSync document '\" + documentId + \"' from the database\";\r\n    }\r\n    static FullSyncReplicationFail(databaseName, way) {\r\n        return \"Failed to '\" + way + \"' replicate the '\" + databaseName + \"' database\";\r\n    }\r\n    static localCachePolicyIsDisable() {\r\n        return \"Depending to the network state the local cache is disabled\";\r\n    }\r\n    static localCacheDocumentJustCreated() {\r\n        return \"The local cache document is just created (empty):string\";\r\n    }\r\n    static illegalArgumentInvalidLocalCachePolicy(localCachePolicyString) {\r\n        return \"The local cache policy '\" + localCachePolicyString + \"' is invalid\";\r\n    }\r\n    static timeToLiveExpired() {\r\n        return \"The time to live expired\";\r\n    }\r\n    static InvalidLocalCacheResponseInformation() {\r\n        return \"Local cache response informations are invalid\";\r\n    }\r\n    static overrideDocument() {\r\n        return \"Failed to override the fullSync document\";\r\n    }\r\n    static handleFullSyncRequest() {\r\n        return \"Failed while running the fullSync request\";\r\n    }\r\n    static serializeC8oCallRequest() {\r\n        return \"Fails to serialize the Convertigo call request\";\r\n    }\r\n    static getResponseFromLocalCache() {\r\n        return \"Failed to get response from the local cache\";\r\n    }\r\n    static getResponseFromLocalCacheDocument() {\r\n        return \"Failed to get response form the local cache document\";\r\n    }\r\n    static handleC8oCallRequest() {\r\n        return \"Failed while running the c8o call request\";\r\n    }\r\n    static runHttpRequest() {\r\n        return \"Failed to run the HTTP request\";\r\n    }\r\n    static saveResponseToLocalCache() {\r\n        return \"Failed to save the response to the local cache\";\r\n    }\r\n    static RemoteLogFail() {\r\n        return \"Failed to send log to the Convertigo server: disabling remote logging\";\r\n    }\r\n    static FullSyncRequestFail() {\r\n        return \"Failed to process the fullsync request\";\r\n    }\r\n    static MissingLocalCacheResponseDocument() {\r\n        return \"Missing local cache response document\";\r\n    }\r\n}\n\nclass C8oLogger {\r\n    constructor(c8o, first) {\r\n        this.initDone = false;\r\n        this.waitForSending = false;\r\n        this.pInit = this.affect_val(c8o, first);\r\n    }\r\n    affect_val(c8o, first) {\r\n        return new Promise(async (resolve) => {\r\n            if (first) {\r\n                this.c8o = c8o;\r\n                this.remoteLogUrl = \"\";\r\n                this.remoteLogs = new Queue();\r\n                this.pending_remoteLogsLevel = new Queue();\r\n                this.pending_remoteLogs = new Queue();\r\n                this.alreadyRemoteLogging = [];\r\n                this.alreadyRemoteLogging.push(false);\r\n                this.remoteLogLevel = C8oLogLevel.TRACE;\r\n                this.startTimeRemoteLog = new Date().getTime();\r\n                this.uidRemoteLogs = Math.round((new Date().getTime() * Math.random())).toString(36);\r\n                const obj = {};\r\n                obj[\"uid\"] = this.uidRemoteLogs.toUpperCase();\r\n                obj[\"uuid\"] = (await this.c8o.deviceUUID).toUpperCase();\r\n                obj[\"project\"] = \"\";\r\n                this.env = JSON.stringify(obj);\r\n                resolve();\r\n            }\r\n            else {\r\n                this.c8o = c8o;\r\n                this.remoteLogUrl = c8o.endpointConvertigo + \"/admin/services/logs.Add\";\r\n                this.remoteLogs = new Queue();\r\n                this.alreadyRemoteLogging = [];\r\n                this.alreadyRemoteLogging.push(false);\r\n                this.remoteLogLevel = C8oLogLevel.TRACE;\r\n                this.startTimeRemoteLog = new Date().getTime();\r\n                this.uidRemoteLogs = Math.round((new Date().getTime() * Math.random())).toString(36);\r\n                const obj = {};\r\n                obj[\"uid\"] = this.uidRemoteLogs.toUpperCase();\r\n                obj[\"uuid\"] = (await this.c8o.deviceUUID).toUpperCase();\r\n                obj[\"project\"] = encodeURIComponent(c8o.endpointProject.toString());\r\n                this.env = JSON.stringify(obj);\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n    isLoggableRemote(logLevel) {\r\n        return this.c8o.logRemote && logLevel != null && C8oLogLevel.TRACE.priority <= this.remoteLogLevel.priority && this.remoteLogLevel.priority <= logLevel.priority;\r\n    }\r\n    isLoggableConsole(logLevel) {\r\n        return logLevel != null && C8oLogLevel.TRACE.priority <= this.c8o.logLevelLocal.priority && this.c8o.logLevelLocal.priority <= logLevel.priority;\r\n    }\r\n    canLog(logLevel) {\r\n        return this.isLoggableConsole(logLevel) || this.isLoggableRemote(logLevel);\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get isFatal() {\r\n        return this.canLog(C8oLogLevel.FATAL);\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get isError() {\r\n        return this.canLog(C8oLogLevel.ERROR);\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get isWarn() {\r\n        return this.canLog(C8oLogLevel.WARN);\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get isInfo() {\r\n        return this.canLog(C8oLogLevel.INFO);\r\n    }\r\n    get isDebug() {\r\n        return this.canLog(C8oLogLevel.DEBUG);\r\n    }\r\n    get isTrace() {\r\n        return this.canLog(C8oLogLevel.TRACE);\r\n    }\r\n    log(logLevel, message, exception) {\r\n        const isLogConsole = this.isLoggableConsole(logLevel);\r\n        const isLogRemote = this.isLoggableRemote(logLevel);\r\n        let copyMsg = \"\" + message;\r\n        if (isLogConsole || isLogRemote) {\r\n            if (exception != null) {\r\n                let messageB = false;\r\n                let messageS = false;\r\n                try {\r\n                    if (exception.message != undefined) {\r\n                        message += \" : \" + JSON.stringify(exception.message);\r\n                    }\r\n                    else {\r\n                        messageB = true;\r\n                    }\r\n                    if (exception.stack != undefined) {\r\n                        message += \"\\n\" + JSON.stringify(exception.stack);\r\n                    }\r\n                    else {\r\n                        messageS = true;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    message += \"\\n\" + exception.toString();\r\n                }\r\n                if (messageB && messageS) {\r\n                    try {\r\n                        message += \"\\n\" + JSON.stringify(exception);\r\n                    }\r\n                    catch (e) {\r\n                        message += \"\\n\" + exception.toString();\r\n                    }\r\n                }\r\n            }\r\n            const time = (((new Date().getTime().valueOf()) - (this.startTimeRemoteLog)) / 1000).toString();\r\n            if (!this.initDone) {\r\n                const obj = {};\r\n                obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n                obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = logLevel.name;\r\n                obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message.toString();\r\n                const objJson = obj;\r\n                this.pending_remoteLogs.push(objJson);\r\n                this.pending_remoteLogsLevel.push(logLevel);\r\n            }\r\n            else {\r\n                if (isLogRemote) {\r\n                    const obj = {};\r\n                    obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n                    obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = logLevel.name;\r\n                    obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message.toString();\r\n                    const objJson = obj;\r\n                    this.remoteLogs.push(objJson);\r\n                    this.logRemote();\r\n                }\r\n                if (isLogConsole) {\r\n                    let verb = logLevel.name.toLowerCase();\r\n                    if (logLevel.name == \"FATAL\" || logLevel.name == \"fatal\") {\r\n                        verb = \"error\";\r\n                    }\r\n                    else if (logLevel.name == \"TRACE\" || logLevel.name == \"trace\") {\r\n                        verb = \"debug\";\r\n                    }\r\n                    try {\r\n                        if (exception != undefined) {\r\n                            if (exception.message != undefined && exception[\"cause\"] != undefined) {\r\n                                console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg, exception.message, exception[\"cause\"]);\r\n                            }\r\n                            else {\r\n                                console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg, exception);\r\n                            }\r\n                        }\r\n                        else {\r\n                            console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(\"(\" + time + \") [\" + logLevel.name + \"] \" + message);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    fatal(message, exceptions = null) {\r\n        this.log(C8oLogLevel.FATAL, message, exceptions);\r\n    }\r\n    error(message, exceptions = null) {\r\n        this.log(C8oLogLevel.ERROR, message, exceptions);\r\n    }\r\n    warn(message, exceptions = null) {\r\n        this.log(C8oLogLevel.WARN, message, exceptions);\r\n    }\r\n    info(message, exceptions = null) {\r\n        this.log(C8oLogLevel.INFO, message, exceptions);\r\n    }\r\n    debug(message, exceptions = null) {\r\n        this.log(C8oLogLevel.DEBUG, message, exceptions);\r\n    }\r\n    trace(message, exceptions = null) {\r\n        this.log(C8oLogLevel.TRACE, message, exceptions);\r\n    }\r\n    _log(logLevel, messages, exceptions = null) {\r\n        if (this.c8o.logC8o) {\r\n            this.log(logLevel, C8oLogger.LOG_INTERNAL_PREFIX.toString() + messages.toString(), exceptions);\r\n        }\r\n    }\r\n    _fatal(message, exceptions = null) {\r\n        this._log(C8oLogLevel.FATAL, message, exceptions);\r\n    }\r\n    _error(message, exceptions = null) {\r\n        this._log(C8oLogLevel.ERROR, message, exceptions);\r\n    }\r\n    _warn(message, exceptions = null) {\r\n        this._log(C8oLogLevel.WARN, message, exceptions);\r\n    }\r\n    _info(message, exceptions = null) {\r\n        this._log(C8oLogLevel.INFO, message, exceptions);\r\n    }\r\n    _debug(message, exceptions = null) {\r\n        this._log(C8oLogLevel.DEBUG, message, exceptions);\r\n    }\r\n    _trace(message, exceptions = null) {\r\n        this._log(C8oLogLevel.TRACE, message, exceptions);\r\n    }\r\n    async logRemoteInit() {\r\n        this.pInit.then(async () => {\r\n            this.initDone = true;\r\n            let count = 0;\r\n            const listSize = this.pending_remoteLogs.count();\r\n            const logsArray = new Array();\r\n            while (count < listSize && count < C8oLogger.REMOTE_LOG_LIMIT) {\r\n                const logLvl = this.pending_remoteLogsLevel.pop();\r\n                const mvar = this.pending_remoteLogs.pop();\r\n                if (this.isLoggableConsole(logLvl)) {\r\n                    console.log(\"(\" + mvar[\"time\"] + \") [\" + logLvl.name + \"] \" + mvar[\"msg\"]);\r\n                }\r\n                if (this.isLoggableRemote(logLvl)) {\r\n                    logsArray.push(mvar);\r\n                    count += 1;\r\n                }\r\n            }\r\n            //noinspection JSUnusedAssignment\r\n            let canLog = false;\r\n            canLog = logsArray.length > 0;\r\n            if (canLog) {\r\n                this.alreadyRemoteLogging[0] = true;\r\n            }\r\n            const parameters = {};\r\n            parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify(logsArray);\r\n            parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n            parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n            this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                .then((response) => {\r\n                if (response !== undefined) {\r\n                    if (response.error !== undefined) {\r\n                        this.c8o.logRemote = false;\r\n                        if (this.c8o.logOnFail != null) {\r\n                            this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), response.error), null);\r\n                        }\r\n                    }\r\n                }\r\n                const logLevelResponse = response[C8oLogger.JSON_KEY_REMOTE_LOG_LEVEL.toString()];\r\n                if (logLevelResponse != null) {\r\n                    const logLevelResponseStr = logLevelResponse.toString();\r\n                    const c8oLogLevel = C8oLogLevel.getC8oLogLevel(logLevelResponseStr);\r\n                    if (c8oLogLevel != null) {\r\n                        this.remoteLogLevel = c8oLogLevel;\r\n                    }\r\n                    this.alreadyRemoteLogging[0] = false;\r\n                    this.logRemote();\r\n                }\r\n            })\r\n                .catch((error) => {\r\n                this.c8o.logRemote = false;\r\n                if (this.c8o.logOnFail != null) {\r\n                    this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), error), null);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    checkInitDone(resolve = null) {\r\n        if (resolve == null) {\r\n            return new Promise((resolve) => {\r\n                if (!this.initDone) {\r\n                    setTimeout(() => {\r\n                        this.checkInitDone(resolve);\r\n                    }, 100);\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (!this.initDone) {\r\n                setTimeout(() => {\r\n                    this.checkInitDone(resolve);\r\n                }, 100);\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async logTest() {\r\n        await this.checkInitDone();\r\n        return this.logTestAction();\r\n        /*if (!this.initDone) {\r\n            setTimeout(()=>{\r\n                return this.logTest();\r\n            },100)\r\n        }\r\n        else{\r\n            return this.logTestAction();\r\n        } */\r\n    }\r\n    logTestAction() {\r\n        return new Promise(async (resolve, reject) => {\r\n            const message = \"[c8o] Testing if endpoint is reachable\";\r\n            const time = (((new Date().getTime().valueOf()) - (this.startTimeRemoteLog)) / 1000).toString();\r\n            const obj = {};\r\n            obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n            obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = C8oLogLevel.DEBUG.name;\r\n            obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message;\r\n            const parameters = {};\r\n            parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify([obj]);\r\n            parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n            parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n            this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                .then((response) => {\r\n                resolve(true);\r\n            })\r\n                .catch((error) => {\r\n                reject(false);\r\n            });\r\n        });\r\n    }\r\n    timeout(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n    async logRemote(wait = 5000) {\r\n        // if sending is already processing\r\n        if (this.waitForSending) {\r\n            return;\r\n        }\r\n        //noinspection JSUnusedAssignment\r\n        let canLog = false;\r\n        canLog = this.remoteLogs.count() > 0;\r\n        if (canLog) {\r\n            this.alreadyRemoteLogging[0] = true;\r\n        }\r\n        if (canLog) {\r\n            // We're using Angular Http provider to request the data,\r\n            // then on the response it'll map the JSON data to a parsed JS object.\r\n            // Next we process the data and resolve the promise with the new data.\r\n            // \"/admin/services/logs.Add\";\r\n            // wait 5000 ms to group http request with severals logs and reduce http charge\r\n            if (wait == null) {\r\n                wait = 0;\r\n            }\r\n            this.waitForSending = true;\r\n            await this.timeout(wait);\r\n            this.waitForSending = false;\r\n            let count = 0;\r\n            const listSize = this.remoteLogs.count();\r\n            const logsArray = [];\r\n            while (count < listSize && count < C8oLogger.REMOTE_LOG_LIMIT) {\r\n                logsArray.push(this.remoteLogs.pop());\r\n                count += 1;\r\n            }\r\n            // if there are still los to be pushed after timeout the log them\r\n            if (logsArray.length > 0) {\r\n                const parameters = {};\r\n                parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify(logsArray);\r\n                parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n                parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n                this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                    .then((response) => {\r\n                    if (response !== undefined) {\r\n                        if (response.error !== undefined) {\r\n                            this.c8o.logRemote = false;\r\n                            if (this.c8o.logOnFail != null) {\r\n                                this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), response.error), null);\r\n                            }\r\n                        }\r\n                    }\r\n                    const logLevelResponse = response[C8oLogger.JSON_KEY_REMOTE_LOG_LEVEL.toString()];\r\n                    if (logLevelResponse != null) {\r\n                        const logLevelResponseStr = logLevelResponse.toString();\r\n                        const c8oLogLevel = C8oLogLevel.getC8oLogLevel(logLevelResponseStr);\r\n                        if (c8oLogLevel != null) {\r\n                            this.remoteLogLevel = c8oLogLevel;\r\n                        }\r\n                        this.alreadyRemoteLogging[0] = false;\r\n                        this.logRemote();\r\n                    }\r\n                })\r\n                    .catch((error) => {\r\n                    this.c8o.logRemote = false;\r\n                    if (this.c8o.logOnFail != null) {\r\n                        this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), error), null);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    logMethodCall(methodName, ...parameters) {\r\n        if (this.c8o.logC8o && this.isDebug) {\r\n            let methodCallLogMessage = \"Method call: \" + methodName;\r\n            if (parameters == null || Object.keys(parameters).length === 0) {\r\n                this._debug(methodCallLogMessage);\r\n            }\r\n            if (this.isTrace) {\r\n                methodCallLogMessage += \", Parameters: [\";\r\n                for (const param of parameters) {\r\n                    let paramStr = \"null\";\r\n                    if (parameters != null) {\r\n                        try {\r\n                            paramStr = JSON.stringify(param);\r\n                        }\r\n                        catch (error) {\r\n                            paramStr = \"cannot view value due to circular reference\";\r\n                        }\r\n                    }\r\n                    methodCallLogMessage += \"\\n\" + paramStr + \", \";\r\n                }\r\n                // Remove the last character\r\n                methodCallLogMessage = methodCallLogMessage.substring(0, methodCallLogMessage.length - 2) + \"]\";\r\n                this._trace(methodCallLogMessage);\r\n            }\r\n            else {\r\n                this._debug(methodCallLogMessage);\r\n            }\r\n        }\r\n    }\r\n    logC8oCall(url, parameters) {\r\n        if (this.c8o.logC8o && this.isDebug) {\r\n            let c8oCallLogMessage = \"C8o call: \" + url;\r\n            if (parameters.length > 0) {\r\n                c8oCallLogMessage += \"\\n\" + String(parameters);\r\n            }\r\n            this._debug(c8oCallLogMessage);\r\n        }\r\n    }\r\n    logC8oCallJSONResponse(response, url, parameters) {\r\n        this.logC8oCallResponse(JSON.stringify(response), \"JSON\", url, parameters);\r\n    }\r\n    logC8oCallXMLResponse(response, url, parameters) {\r\n        this.logC8oCallResponse(response.toString(), \"XML\", url, parameters);\r\n    }\r\n    logC8oCallResponse(responseStr, responseType, url, parameters) {\r\n        if (this.c8o.logC8o && this.isTrace) {\r\n            let c8oCallResponseLogMessage;\r\n            if (url == null) {\r\n                c8oCallResponseLogMessage = \"C8o call \" + responseType + \" response: \";\r\n            }\r\n            else {\r\n                c8oCallResponseLogMessage = \"C8o call \" + responseType + \" response: \" + url;\r\n            }\r\n            if (parameters.count > 0) {\r\n                c8oCallResponseLogMessage += \"\\n\" + parameters.toString();\r\n            }\r\n            c8oCallResponseLogMessage += \"\\n\" + responseStr;\r\n            this._trace(c8oCallResponseLogMessage);\r\n        }\r\n    }\r\n}\r\n// *** Constants ***//\r\n// private static LOG_TAG: string = \"c8o\";\r\nC8oLogger.LOG_INTERNAL_PREFIX = \"[c8o] \";\r\nC8oLogger.REMOTE_LOG_LIMIT = 100;\r\nC8oLogger.JSON_KEY_REMOTE_LOG_LEVEL = \"remoteLogLevel\";\r\nC8oLogger.JSON_KEY_TIME = \"time\";\r\nC8oLogger.JSON_KEY_LEVEL = \"level\";\r\nC8oLogger.JSON_KEY_MESSAGE = \"msg\";\r\nC8oLogger.JSON_KEY_LOGS = \"logs\";\r\nC8oLogger.JSON_KEY_ENV = \"env\";\n\nclass C8oFullSyncTranslator {\r\n    static fullSyncDocumentOperationResponseToJson(fullSyncDocumentOperationResponse) {\r\n        return fullSyncDocumentOperationResponse.getProperties();\r\n    }\r\n    static fullSyncDefaultResponseToJson(fullSyncDefaultResponse) {\r\n        return fullSyncDefaultResponse.getProperties();\r\n    }\r\n}\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_COUNT = \"count\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_ROWS = \"rows\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_CURRENT = \"current\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_DIRECTION = \"direction\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_TOTAL = \"total\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_OK = \"ok\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_STATUS = \"status\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PUSH = \"push\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PULL = \"pull\";\r\nC8oFullSyncTranslator.XML_KEY_DOCUMENT = \"document\";\r\nC8oFullSyncTranslator.XML_KEY_COUCHDB_OUTPUT = \"couchdb_output\";\n\nclass C8oLocalCacheResponse {\r\n    constructor(response, responseType, expirationDate) {\r\n        this.response = response;\r\n        this.responseType = responseType;\r\n        this.expirationDate = expirationDate;\r\n    }\r\n    isExpired() {\r\n        if (this.expirationDate <= 0) {\r\n            return false;\r\n        }\r\n        else {\r\n            const currentDate = new Date().getTime();\r\n            return this.expirationDate < currentDate;\r\n        }\r\n    }\r\n    getResponse() {\r\n        return this.response;\r\n    }\r\n    getResponseType() {\r\n        return this.responseType;\r\n    }\r\n    getExpirationDate() {\r\n        return this.expirationDate;\r\n    }\r\n}\n\nclass C8oResponseJsonListener {\r\n    constructor(onJsonResponse) {\r\n        this.onJsonResponse = onJsonResponse;\r\n    }\r\n}\r\nclass C8oResponseProgressListener {\r\n    constructor(onProgressResponse) {\r\n        this.onProgressResponse = onProgressResponse;\r\n    }\r\n}\n\nclass C8oCouchBaseLiteException extends C8oException {\r\n    constructor(message, cause = null) {\r\n        super(message, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oCouchBaseLiteException.prototype);\r\n    }\r\n}\n\nclass C8oRessourceNotFoundException extends C8oException {\r\n    constructor(message, cause = null) {\r\n        super(message, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oRessourceNotFoundException.prototype);\r\n    }\r\n}\n\n/**\r\n * This Exception is not thrown to the user, it is used to know if the requested response from the local cache is available or no.\r\n */\r\nclass C8oUnavailableLocalCacheException extends C8oException {\r\n    constructor(detailMessage, cause = null) {\r\n        super(detailMessage, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oUnavailableLocalCacheException.prototype);\r\n    }\r\n}\n\nclass C8oProgress {\r\n    constructor(progress) {\r\n        this._changed = false;\r\n        this._continuous = false;\r\n        this._finished = false;\r\n        this._pull = true;\r\n        this._current = -1;\r\n        this._total = -1;\r\n        this._status = \"\";\r\n        this._taskInfo = \"\";\r\n        if (progress instanceof C8oProgress) {\r\n            this._changed = false;\r\n            this._continuous = progress._continuous;\r\n            this._finished = progress._finished;\r\n            this._pull = progress._pull;\r\n            this._current = progress._current;\r\n            this._total = progress._total;\r\n            this._status = progress._status;\r\n            this._taskInfo = progress._taskInfo;\r\n            this._raw = progress._raw;\r\n        }\r\n        else {\r\n            if (progress === undefined) {\r\n                this._raw = null;\r\n            }\r\n            else {\r\n                throw new Error(`Expected C8oProgress or empty constructor, got '${progress}'.`);\r\n            }\r\n        }\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get changed() {\r\n        return this._changed;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    set changed(value) {\r\n        this._changed = value;\r\n    }\r\n    get continuous() {\r\n        return this._continuous;\r\n    }\r\n    set continuous(value) {\r\n        this._continuous = value;\r\n        this._changed = true;\r\n    }\r\n    get finished() {\r\n        return this._finished;\r\n    }\r\n    set finished(value) {\r\n        this._finished = value;\r\n        this._changed = true;\r\n    }\r\n    get pull() {\r\n        return this._pull;\r\n    }\r\n    set pull(value) {\r\n        this._pull = value;\r\n        this._changed = true;\r\n    }\r\n    get push() {\r\n        return !this._pull;\r\n    }\r\n    get current() {\r\n        return this._current;\r\n    }\r\n    set current(value) {\r\n        this._current = value;\r\n        this._changed = true;\r\n    }\r\n    get total() {\r\n        return this._total;\r\n    }\r\n    set total(value) {\r\n        this._total = value;\r\n        this._changed = true;\r\n    }\r\n    get direction() {\r\n        return this._pull ? C8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PULL : C8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PUSH;\r\n    }\r\n    get status() {\r\n        return this._status;\r\n    }\r\n    set status(value) {\r\n        this._changed = true;\r\n        this._status = value;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get taskInfo() {\r\n        return this._taskInfo;\r\n    }\r\n    set taskInfo(value) {\r\n        this._changed = true;\r\n        this._taskInfo = value;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get raw() {\r\n        return this._raw;\r\n    }\r\n    set raw(value) {\r\n        this._changed = true;\r\n        this._raw = value;\r\n    }\r\n    toString() {\r\n        return this.direction + \": \" + this.current + \"/\" + this.total + \" (\" + (this.finished ? (this.continuous ? \"live\" : \"done\") : \"running\") + \")\";\r\n    }\r\n}\n\nclass FullSyncReplication {\r\n    constructor(pull = null) {\r\n        if (pull != null) {\r\n            this.pull = pull;\r\n        }\r\n        else {\r\n            this.sync = true;\r\n        }\r\n    }\r\n}\n\nclass C8oLoad {\r\n    constructor(c8o) {\r\n        this.c8o = c8o;\r\n        this.plugin = {\r\n            c8oload: function (url, opts, c8o) {\r\n                var db = this;\r\n                var extend = require('pouchdb-extend');\r\n                var Checkpointer = require('pouchdb-checkpointer');\r\n                var genReplicationId = require('pouchdb-generate-replication-id');\r\n                let loadString = (db, datastr, opts, resolve, reject, c8o) => {\r\n                    let parsedDump = parseDump(datastr);\r\n                    if (parsedDump[\"err\"]) {\r\n                        return reject(parsedDump[\"err\"]);\r\n                    }\r\n                    let docs = parsedDump[\"docs\"];\r\n                    let lastSeq = parsedDump[\"lastSeq\"];\r\n                    db.bulkDocs({ docs: docs, new_edits: false })\r\n                        .then(() => {\r\n                        if (!opts.proxy) {\r\n                            resolve({ ok: true });\r\n                        }\r\n                        else {\r\n                            writeProxyCheckpoint(db, lastSeq, opts, resolve, reject);\r\n                        }\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                };\r\n                let loadUrl = (db, url, opts, resolve, reject, c8o) => {\r\n                    let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': c8o.sdkVersion };\r\n                    Object.assign(headersObject, c8o.headers);\r\n                    let headers = c8o.httpInterface.getHeaders(headersObject);\r\n                    c8o.httpInterface.httpGetObservable(url, {\r\n                        headers: headers,\r\n                        withCredentials: true,\r\n                        responseType: 'text'\r\n                    }, {})\r\n                        .subscribe(response => {\r\n                        loadString(db, response, opts, resolve, reject, c8o);\r\n                    }, error => {\r\n                        reject(error);\r\n                    });\r\n                };\r\n                let parseDump = (data) => {\r\n                    var docs = [];\r\n                    var lastSeq = 0;\r\n                    try {\r\n                        data.split('\\n').forEach(function (line) {\r\n                            if (!line) {\r\n                                return;\r\n                            }\r\n                            line = JSON.parse(line);\r\n                            if (line[\"docs\"]) {\r\n                                docs = docs.concat(line[\"docs\"]);\r\n                            }\r\n                            if (line.seq) {\r\n                                lastSeq = line.seq;\r\n                            }\r\n                        });\r\n                    }\r\n                    catch (err) {\r\n                        return { err: err };\r\n                    }\r\n                    return { docs: docs, lastSeq: lastSeq };\r\n                };\r\n                let writeProxyCheckpoint = (db, lastSeq, opts, resolve, reject) => {\r\n                    db.info()\r\n                        .then((info) => {\r\n                        var src = new db.constructor(opts.proxy, extend(true, {}, {}, opts));\r\n                        var target = new db.constructor(info.db_name, extend(true, {}, db.__opts, opts));\r\n                        var replIdOpts = {};\r\n                        if (opts.filter) {\r\n                            replIdOpts[\"filter\"] = opts.filter;\r\n                        }\r\n                        if (opts.query_params) {\r\n                            replIdOpts[\"query_params\"] = opts.query_params;\r\n                        }\r\n                        if (opts.view) {\r\n                            replIdOpts[\"view\"] = opts.view;\r\n                        }\r\n                        genReplicationId.default(src, target, replIdOpts)\r\n                            .then(function (replId) {\r\n                            var state = {\r\n                                cancelled: false\r\n                            };\r\n                            var checkpointer = new Checkpointer.default(src, target, replId, state);\r\n                            checkpointer.writeCheckpoint(lastSeq)\r\n                                .then((response) => {\r\n                                resolve(response);\r\n                            })\r\n                                .catch((err) => {\r\n                                reject(err);\r\n                            });\r\n                        })\r\n                            .catch((err) => {\r\n                            reject(err);\r\n                        });\r\n                    });\r\n                };\r\n                return new Promise((resolve, reject) => {\r\n                    // if its a dumped string\r\n                    if (/^\\s*\\{/.test(url)) {\r\n                        loadString(db, url, opts, resolve, reject, c8o);\r\n                    }\r\n                    else {\r\n                        loadUrl(db, url, opts, resolve, reject, c8o);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * Created by charlesg on 10/01/2017.\r\n */\r\nclass C8oFullSyncDatabase {\r\n    /**\r\n     * Creates a fullSync database with the specified name and its location.\r\n     *\r\n     * @param c8o\r\n     * @param databaseName\r\n     * @param fullSyncDatabases\r\n     * @param localSuffix\r\n     * @throws C8oException Failed to get the fullSync database.\r\n     */\r\n    constructor(c8o, databaseName, fullSyncDatabases, localSuffix, localPrefix) {\r\n        /**\r\n         * The fullSync Database instance.\r\n         */\r\n        this.database = null;\r\n        /**\r\n         * Used to make pull replication (uploads changes from the local database to the remote one).\r\n         */\r\n        this.pullFullSyncReplication = new FullSyncReplication(true);\r\n        /**\r\n         * Used to make push replication (downloads changes from the remote database to the local one).\r\n         */\r\n        this.pushFullSyncReplication = new FullSyncReplication(false);\r\n        /**\r\n         * Used to make pull replication (uploads changes from the local database to the remote one).\r\n         */\r\n        this.syncFullSyncReplication = new FullSyncReplication();\r\n        this.manual_canceled = false;\r\n        this.to_cancel = [];\r\n        PouchDB$1.plugin(PouchDBFind);\r\n        PouchDB$1.plugin(PouchDBQuickSearch);\r\n        var opts = {};\r\n        if (c8o.usewroker) {\r\n            //@ts-ignore\r\n            PouchDB$1.adapter('worker', PouchDBWorker);\r\n            opts[\"adapter\"] = \"worker\";\r\n            c8o.log._debug(\"We will use experimental PouchDBWorker to speed up your requests. \\n fs://.createIndex is not supported\");\r\n        }\r\n        let c8oload = new C8oLoad(c8o);\r\n        window[\"PouchDB\"] = PouchDB$1;\r\n        this.c8o = c8o;\r\n        const header = {\r\n            \"x-convertigo-sdk\": this.c8o.sdkVersion,\r\n        };\r\n        if (this.c8o.xsrfUsed) {\r\n            const headerName = \"x-xsrf-token\";\r\n            const fetch = \"Fetch\";\r\n            header[headerName] = window.localStorage.getItem(headerName) != undefined ? window.localStorage.getItem(headerName) : fetch;\r\n        }\r\n        Object.assign(header, this.c8o.headers);\r\n        this.remotePouchHeader = {\r\n            fetch: (url, opts) => {\r\n                opts.credentials = 'include';\r\n                for (let key in header) {\r\n                    opts.headers.set(key, header[key]);\r\n                }\r\n                var fecthPouch = PouchDB$1.fetch(url, opts);\r\n                fecthPouch.then((response) => {\r\n                    this.c8o.session.sort(response, header, null, null, null);\r\n                })\r\n                    .catch((e) => {\r\n                });\r\n                return fecthPouch;\r\n            }\r\n        };\r\n        this.c8oFullSyncDatabaseUrl = fullSyncDatabases + databaseName;\r\n        this.remotedatabaseName = databaseName;\r\n        this.databaseName = localPrefix + databaseName + localSuffix;\r\n        try {\r\n            if (c8o.couchUrl != null) {\r\n                this.database = new PouchDB$1(c8o.couchUrl + \"/\" + this.databaseName);\r\n                this.c8o.log._debug(\"PouchDb launched on couchbaselite\");\r\n            }\r\n            else {\r\n                PouchDB$1.plugin(c8oload.plugin);\r\n                this.database = new PouchDB$1(this.databaseName, opts);\r\n                this.c8o.log._debug(\"PouchDb launched normally\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    async remoteDatabaseVersion() {\r\n        return new Promise((resolve) => {\r\n            let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n            Object.assign(headersObject, this.c8o.headers);\r\n            let headers = this.c8o.httpInterface.getHeaders(headersObject);\r\n            this.c8o.httpInterface.httpGetObservable(this.c8oFullSyncDatabaseUrl + \"/_design/c8o\", {\r\n                headers: headers,\r\n                withCredentials: true\r\n            }, {})\r\n                .subscribe(response => {\r\n                if (response != undefined && response[\"~c8oDbVersion\"] != null) {\r\n                    this.c8o.log._trace(\"Server support reset database, remote version for \" + this.remotedatabaseName + \" is \" + response[\"~c8oDbVersion\"]);\r\n                    resolve(response[\"~c8oDbVersion\"]);\r\n                }\r\n                else {\r\n                    resolve(false);\r\n                }\r\n            }, error => {\r\n                this.c8o.log._trace(\"Server does not support reset database\");\r\n                resolve(false);\r\n            });\r\n        });\r\n    }\r\n    async localDatabaseVersion() {\r\n        try {\r\n            let info = await this.database.info();\r\n            let response = await this.database.get('_design/c8o');\r\n            if (response[\"~c8oDbVersion\"] != null) {\r\n                this.c8o.log._trace(\"Version for local database,  \" + this.databaseName + \" is \" + response[\"~c8oDbVersion\"]);\r\n                return response[\"~c8oDbVersion\"];\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        catch (error) {\r\n            //there is no c8odesing base has been created in local\r\n            return \"_C8O_DO_NOTHING\";\r\n        }\r\n    }\r\n    async checkResetBase() {\r\n        let remoteVersion = await this.remoteDatabaseVersion();\r\n        let localVersion = await this.localDatabaseVersion();\r\n        let reset = false;\r\n        if (localVersion == \"_C8O_DO_NOTHING\") {\r\n            this.c8o.log._trace(\"Local database version do not contains, _design/c8o, it has been created in local, no reset needed\");\r\n        }\r\n        else {\r\n            if (remoteVersion != false) {\r\n                if (localVersion != false) {\r\n                    if (remoteVersion != localVersion) {\r\n                        // reset\r\n                        reset = true;\r\n                    }\r\n                }\r\n                else {\r\n                    reset = true;\r\n                }\r\n            }\r\n            if (reset) {\r\n                this.c8o.log._trace(\"Since remote database version is different from local database, we will reset it\");\r\n                await this.resetMyBase();\r\n            }\r\n            else {\r\n                this.c8o.log._trace(\"Remote database version and local database, had the same version, reset not needed\");\r\n            }\r\n        }\r\n        return reset;\r\n    }\r\n    async resetMyBase() {\r\n        try {\r\n            await this.database.destroy();\r\n            if (this.c8o.couchUrl != null) {\r\n                this.database = new PouchDB$1(this.c8o.couchUrl + \"/\" + this.databaseName);\r\n                this.c8o.log._debug(\"PouchDb launched on couchbaselite\");\r\n            }\r\n            else {\r\n                let c8oload = new C8oLoad(this.c8o);\r\n                PouchDB$1.plugin(c8oload.plugin);\r\n                this.database = new PouchDB$1(this.databaseName);\r\n                this.c8o.log._debug(\"PouchDb launched normally\");\r\n            }\r\n            this.c8o.log._debug(\"Database reset successfully\");\r\n            this.c8o.subscriber_database_reset.next({ databaseName: this.databaseName, success: true, error: false });\r\n        }\r\n        catch (error) {\r\n            this.c8o.subscriber_database_reset.error({ databaseName: this.databaseName, success: false, error: true, nativeError: error });\r\n            this.c8o.log._error(\"error while resetting database\");\r\n        }\r\n    }\r\n    /**\r\n     * Start pull and push replications.\r\n     * @returns Promise<any>\r\n     */\r\n    async startAllReplications(parameters, c8oResponseListener, handler, id = null, mutex = null) {\r\n        if (this.c8o.resetBase) {\r\n            await this.checkResetBase();\r\n        }\r\n        let resp = await this.c8o.log.logTest();\r\n        return this.startSync(this.syncFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n    }\r\n    /**\r\n     * Start pull replication.\r\n     * @returns Promise<any>\r\n     */\r\n    async startPullReplication(parameters, c8oResponseListener, handler, id = null, mutex = null) {\r\n        if (this.c8o.resetBase) {\r\n            await this.checkResetBase();\r\n        }\r\n        let resp = await this.c8o.log.logTest();\r\n        return this.startReplication(this.pullFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n    }\r\n    /**\r\n     * Start push replication.\r\n     * @returns Promise<any>\r\n     */\r\n    async startPushReplication(parameters, c8oResponseListener, handler, id = null, mutex = null) {\r\n        if (this.c8o.resetBase) {\r\n            await this.checkResetBase();\r\n        }\r\n        let resp = await this.c8o.log.logTest();\r\n        return this.startReplication(this.pushFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n    }\r\n    startSync(fullSyncReplication, parameters, c8oResponseListener, handler, id = null, mutex = null) {\r\n        let continuous = false;\r\n        let cancel = false;\r\n        const parametersObj = {};\r\n        //stop replication if exists\r\n        if (fullSyncReplication.replication != null) {\r\n            fullSyncReplication.replication.cancel();\r\n        }\r\n        this._id = id;\r\n        //check continuous flag\r\n        if (parameters[\"continuous\"] != null) {\r\n            if (parameters[\"continuous\"] === true) {\r\n                continuous = true;\r\n            }\r\n            else {\r\n                continuous = false;\r\n            }\r\n        }\r\n        //check cancel flag\r\n        if (parameters[\"cancel\"] != null) {\r\n            //noinspection RedundantIfStatementJS\r\n            if (parameters[\"cancel\"] === true) {\r\n                cancel = true;\r\n            }\r\n            else {\r\n                cancel = false;\r\n            }\r\n        }\r\n        // Set retry true by default...\r\n        parametersObj[\"retry\"] = true;\r\n        //check parameters to throw to pouchDB\r\n        if (parameters[\"retry\"] != null) {\r\n            parametersObj[\"retry\"] = parameters[\"retry\"];\r\n        }\r\n        if (parameters[\"filter\"] != null) {\r\n            parametersObj[\"filter\"] = parameters[\"filter\"];\r\n        }\r\n        if (parameters[\"doc_ids\"] != null) {\r\n            parametersObj[\"doc_ids\"] = parameters[\"doc_ids\"];\r\n        }\r\n        if (parameters[\"query_params\"] != null) {\r\n            parametersObj[\"query_params\"] = parameters[\"query_params\"];\r\n        }\r\n        if (parameters[\"view\"] != null) {\r\n            parametersObj[\"view\"] = parameters[\"view\"];\r\n        }\r\n        if (parameters[\"since\"] != null) {\r\n            parametersObj[\"since\"] = parameters[\"since\"];\r\n        }\r\n        if (parameters[\"heartbeat\"] != null) {\r\n            parametersObj[\"heartbeat\"] = parameters[\"heartbeat\"];\r\n        }\r\n        if (parameters[\"timeout\"] != null) {\r\n            parametersObj[\"timeout\"] = parameters[\"timeout\"];\r\n        }\r\n        if (parameters[\"batch_size\"] != null) {\r\n            parametersObj[\"batch_size\"] = parameters[\"batch_size\"];\r\n        }\r\n        if (parameters[\"batches_limit\"] != null) {\r\n            parametersObj[\"batches_limit\"] = parameters[\"batches_limit\"];\r\n        }\r\n        if (parameters[\"back_off_function\"] != null) {\r\n            parametersObj[\"back_off_function\"] = parameters[\"back_off_function\"];\r\n        }\r\n        if (parameters[\"checkpoint\"] != null) {\r\n            parametersObj[\"checkpoint\"] = parameters[\"checkpoint\"];\r\n        }\r\n        if (parameters[\"seq_interval\"] != null) {\r\n            parametersObj[\"seq_interval\"] = parameters[\"seq_interval\"];\r\n        }\r\n        const remoteDB = new PouchDB$1(this.c8oFullSyncDatabaseUrl, this.remotePouchHeader);\r\n        let rep = fullSyncReplication.replication = this.database.sync(remoteDB, parametersObj);\r\n        const param = parameters;\r\n        const progress = new C8oProgress();\r\n        progress.raw = rep;\r\n        progress.continuous = false;\r\n        return new Promise((resolve, reject) => {\r\n            rep.on(\"change\", (info) => {\r\n                progress.finished = false;\r\n                if (info.direction === \"pull\") {\r\n                    progress.pull = true;\r\n                    progress.status = rep.pull.state;\r\n                    progress.finished = rep.pull.state !== \"active\";\r\n                }\r\n                else if (info.direction === \"push\") {\r\n                    progress.pull = false;\r\n                    progress.status = rep.push.state;\r\n                    progress.finished = rep.push.state !== \"active\";\r\n                }\r\n                progress.total = info.change.docs_read;\r\n                progress.current = info.change.docs_written;\r\n                param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                c8oResponseListener.onProgressResponse(progress, param);\r\n            }).on(\"complete\", (info) => {\r\n                progress.finished = true;\r\n                progress.pull = false;\r\n                progress.total = info.push.docs_read;\r\n                progress.current = info.push.docs_written;\r\n                progress.status = info.status;\r\n                progress.finished = true;\r\n                param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                c8oResponseListener.onProgressResponse(progress, param);\r\n                progress.pull = true;\r\n                progress.total = info.pull.docs_read;\r\n                progress.current = info.pull.docs_written;\r\n                c8oResponseListener.onProgressResponse(progress, param);\r\n                if (rep.canceled == true && continuous) {\r\n                    this.c8o.log._trace(\"Replication is continuous but has been canceled\");\r\n                    rep.cancel();\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    if (!this.manual_canceled) {\r\n                        handler();\r\n                    }\r\n                }\r\n                else if (continuous) {\r\n                    rep.cancel();\r\n                    parametersObj[\"live\"] = true;\r\n                    rep = fullSyncReplication.replication = this.database.sync(remoteDB, parametersObj);\r\n                    progress.continuous = true;\r\n                    progress.raw = rep;\r\n                    progress.taskInfo = \"n/a\";\r\n                    progress.pull = true;\r\n                    progress.status = \"live\";\r\n                    progress.finished = false;\r\n                    progress.pull = true;\r\n                    progress.total = 0;\r\n                    progress.current = 0;\r\n                    c8oResponseListener.onProgressResponse(progress, param);\r\n                    progress.pull = false;\r\n                    c8oResponseListener.onProgressResponse(progress, param);\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    rep.on(\"change\", (info) => {\r\n                        progress.finished = false;\r\n                        if (info.direction === \"pull\") {\r\n                            progress.pull = true;\r\n                            progress.status = rep.pull.state;\r\n                        }\r\n                        else if (info.direction === \"push\") {\r\n                            progress.pull = false;\r\n                            progress.status = rep.push.state;\r\n                        }\r\n                        progress.total = info.change.docs_read;\r\n                        progress.current = info.change.docs_written;\r\n                        param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                        c8oResponseListener.onProgressResponse(progress, param);\r\n                    })\r\n                        .on(\"paused\", () => {\r\n                        try {\r\n                            if ((this.c8o.database[\"replications\"].map(x => x.id == id)).length > 0) {\r\n                                rep.cancel();\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                        }\r\n                        progress.finished = true;\r\n                        c8oResponseListener.onProgressResponse(progress, param);\r\n                        if (progress.total === 0 && progress.current === 0) {\r\n                            progress.pull = !progress.pull;\r\n                            c8oResponseListener.onProgressResponse(progress, param);\r\n                        }\r\n                    })\r\n                        .on(\"error\", (err) => {\r\n                        if (err.message === \"Unexpected end of JSON input\") {\r\n                            progress.finished = true;\r\n                            progress.status = \"live\";\r\n                            c8oResponseListener.onProgressResponse(progress, parameters);\r\n                        }\r\n                        else {\r\n                            rep.cancel();\r\n                            if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                                if (parameters[\"force_retry\"] == true) {\r\n                                    this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Forcing Restarting replication\");\r\n                                    this.database.sync(remoteDB, { timeout: 600000, retry: true });\r\n                                }\r\n                                else {\r\n                                    this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Restarting automatically replication\");\r\n                                }\r\n                            }\r\n                            else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                                reject(\"NO_NETWORK\");\r\n                            }\r\n                            else {\r\n                                reject(err);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                else if (!continuous) {\r\n                    rep.cancel();\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    this.c8o.log._trace(\"Replication is finished, modifying its state\");\r\n                    if (!this.manual_canceled) {\r\n                        handler();\r\n                    }\r\n                }\r\n            }).on(\"error\", (err) => {\r\n                rep.cancel();\r\n                if (mutex != undefined) {\r\n                    mutex.release();\r\n                }\r\n                if (err.message === \"Unexpected end of JSON input\") {\r\n                    progress.finished = true;\r\n                    progress.status = \"Complete\";\r\n                    c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    rep.cancel();\r\n                }\r\n                else if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                    if (parameters[\"force_retry\"] == true) {\r\n                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Forcing Restarting replication\");\r\n                        this.database.sync(remoteDB, { timeout: 600000, retry: true });\r\n                    }\r\n                    else {\r\n                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Restarting automatically replication\");\r\n                    }\r\n                }\r\n                else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                    reject(\"NO_NETWORK\");\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            });\r\n            if (cancel) {\r\n                if (rep != null) {\r\n                    this.c8o.log._trace(\"Replication canceled called, modifying its state\");\r\n                    handler();\r\n                    rep.cancel();\r\n                    progress.finished = true;\r\n                    if (c8oResponseListener != null && c8oResponseListener instanceof C8oResponseProgressListener) {\r\n                        c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    }\r\n                }\r\n                if (mutex != undefined) {\r\n                    mutex.release();\r\n                }\r\n            }\r\n        }).catch((error) => {\r\n            throw error.toString();\r\n        });\r\n    }\r\n    /**\r\n     * Starts a replication taking into account parameters.<br/>\r\n     * This action does not directly return something but setup a callback raised when the replication raises change events.\r\n     *\r\n     * @param fullSyncReplication\r\n     * @param c8oResponseListener\r\n     * @param parameters\r\n     */\r\n    startReplication(fullSyncReplication, parameters, c8oResponseListener, handler, id = null, mutex = null) {\r\n        let continuous = false;\r\n        let cancel = false;\r\n        const parametersObj = {};\r\n        //stop replication if exists\r\n        if (fullSyncReplication.replication != null) {\r\n            fullSyncReplication.replication.cancel();\r\n        }\r\n        this._id = id;\r\n        //check continuous flag\r\n        if (parameters[\"continuous\"] != null) {\r\n            if (parameters[\"continuous\"] == true) {\r\n                continuous = true;\r\n            }\r\n            else {\r\n                continuous = false;\r\n            }\r\n        }\r\n        //check cancel flag\r\n        if (parameters[\"cancel\"] != null) {\r\n            //noinspection RedundantIfStatementJS\r\n            if (parameters[\"cancel\"] == true) {\r\n                cancel = true;\r\n            }\r\n            else {\r\n                cancel = false;\r\n            }\r\n        }\r\n        //check parameters to throw to pouchDB\r\n        // Set retry true by default...\r\n        parametersObj[\"retry\"] = true;\r\n        if (parameters[\"retry\"] != null) {\r\n            parametersObj[\"retry\"] = parameters[\"retry\"];\r\n        }\r\n        if (parameters[\"filter\"] != null) {\r\n            parametersObj[\"filter\"] = parameters[\"filter\"];\r\n        }\r\n        if (parameters[\"doc_ids\"] != null) {\r\n            parametersObj[\"doc_ids\"] = parameters[\"doc_ids\"];\r\n        }\r\n        if (parameters[\"query_params\"] != null) {\r\n            parametersObj[\"query_params\"] = parameters[\"query_params\"];\r\n        }\r\n        if (parameters[\"view\"] != null) {\r\n            parametersObj[\"view\"] = parameters[\"view\"];\r\n        }\r\n        if (parameters[\"since\"] != null) {\r\n            parametersObj[\"since\"] = parameters[\"since\"];\r\n        }\r\n        if (parameters[\"heartbeat\"] != null) {\r\n            parametersObj[\"heartbeat\"] = parameters[\"heartbeat\"];\r\n        }\r\n        if (parameters[\"timeout\"] != null) {\r\n            parametersObj[\"timeout\"] = parameters[\"timeout\"];\r\n        }\r\n        if (parameters[\"batch_size\"] != null) {\r\n            parametersObj[\"batch_size\"] = parameters[\"batch_size\"];\r\n        }\r\n        if (parameters[\"batches_limit\"] != null) {\r\n            parametersObj[\"batches_limit\"] = parameters[\"batches_limit\"];\r\n        }\r\n        if (parameters[\"back_off_function\"] != null) {\r\n            parametersObj[\"back_off_function\"] = parameters[\"back_off_function\"];\r\n        }\r\n        if (parameters[\"checkpoint\"] != null) {\r\n            parametersObj[\"checkpoint\"] = parameters[\"checkpoint\"];\r\n        }\r\n        if (parameters[\"seq_interval\"] != null) {\r\n            parametersObj[\"seq_interval\"] = parameters[\"seq_interval\"];\r\n        }\r\n        const remoteDB = new PouchDB$1(this.c8oFullSyncDatabaseUrl, this.remotePouchHeader);\r\n        let rep = fullSyncReplication.replication = fullSyncReplication.pull ? this.database.replicate.from(remoteDB, parametersObj) : this.database.replicate.to(remoteDB, parametersObj);\r\n        const progress = new C8oProgress();\r\n        progress.raw = rep;\r\n        progress.pull = fullSyncReplication.pull;\r\n        progress.continuous = false;\r\n        return new Promise((resolve, reject) => {\r\n            rep.on(\"change\", (info) => {\r\n                progress.total = info.docs_read;\r\n                progress.current = info.docs_written;\r\n                progress.status = \"change\";\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                c8oResponseListener.onProgressResponse(progress, parameters);\r\n            }).on(\"complete\", (info) => {\r\n                progress.finished = true;\r\n                progress.total = info.docs_read;\r\n                progress.current = info.docs_written;\r\n                progress.status = \"complete\";\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                c8oResponseListener.onProgressResponse(progress, parameters);\r\n                if (rep.canceled == true && continuous) {\r\n                    this.c8o.log._trace(\"Replication is continuous but has been canceled\");\r\n                    rep.cancel();\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    if (!this.manual_canceled) {\r\n                        handler();\r\n                    }\r\n                }\r\n                if (continuous) {\r\n                    rep.cancel();\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    parametersObj[\"live\"] = true;\r\n                    rep = fullSyncReplication.replication = fullSyncReplication.pull ? this.database.replicate.from(remoteDB, parametersObj) : this.database.replicate.to(remoteDB, parametersObj);\r\n                    progress.continuous = true;\r\n                    progress.raw = rep;\r\n                    progress.taskInfo = \"n/a\";\r\n                    rep.on(\"change\", (info) => {\r\n                        progress.finished = false;\r\n                        progress.total = info.docs_read;\r\n                        progress.current = info.docs_written;\r\n                        progress.status = \"change\";\r\n                        parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                        c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    })\r\n                        .on(\"paused\", () => {\r\n                        try {\r\n                            if ((this.c8o.database[\"replications\"].map(x => x.id == id)).length > 0) {\r\n                                rep.cancel();\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                        }\r\n                    })\r\n                        .on(\"error\", (err) => {\r\n                        if (err.message === \"Unexpected end of JSON input\") {\r\n                            progress.finished = true;\r\n                            progress.status = \"live\";\r\n                            c8oResponseListener.onProgressResponse(progress, parameters);\r\n                        }\r\n                        else {\r\n                            rep.cancel();\r\n                            if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                                reject(\"TIMEOUT\");\r\n                            }\r\n                            else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                                reject(\"NO_NETWORK\");\r\n                            }\r\n                            else {\r\n                                reject(err);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                else if (!continuous) {\r\n                    rep.cancel();\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    this.c8o.log._trace(\"Replication is finished, modifying its state\");\r\n                    if (!this.manual_canceled) {\r\n                        handler();\r\n                    }\r\n                }\r\n            }).on(\"error\", (err) => {\r\n                rep.cancel();\r\n                if (mutex != undefined) {\r\n                    mutex.release();\r\n                }\r\n                if (err.message === \"Unexpected end of JSON input\") {\r\n                    progress.finished = true;\r\n                    progress.status = \"complete\";\r\n                    parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                    c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    rep.cancel();\r\n                }\r\n                else if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                    reject(\"TIMEOUT\");\r\n                }\r\n                else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                    reject(\"NO_NETWORK\");\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            });\r\n            if (cancel) {\r\n                if (mutex != undefined) {\r\n                    mutex.release();\r\n                }\r\n                if (rep != null) {\r\n                    this.c8o.log._trace(\"Replication canceled called, modifying its state\");\r\n                    handler();\r\n                    rep.cancel();\r\n                    progress.finished = true;\r\n                    if (c8oResponseListener != null && c8oResponseListener instanceof C8oResponseProgressListener) {\r\n                        c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    }\r\n                }\r\n            }\r\n        }).catch((error) => {\r\n            throw error.toString();\r\n        });\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get getdatabseName() {\r\n        return this.databaseName;\r\n    }\r\n    get getdatabase() {\r\n        return this.database;\r\n    }\r\n    deleteDB() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.database != null) {\r\n                this.database.destroy().then((response) => {\r\n                    this.database = null;\r\n                    resolve(response);\r\n                }).catch((error) => {\r\n                    this.c8o.log._debug(\"Failed to close DB, will retry: \", error.message);\r\n                    this.database.destroy().then((response) => {\r\n                        this.database = null;\r\n                        resolve(response);\r\n                    }).catch((error) => {\r\n                        this.c8o.log._debug(\"Failed to close DB, second attempt has failed \", error.message);\r\n                        reject(error);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * cancel Pull Replication\r\n     */\r\n    cancelPullReplication() {\r\n        if (this.pullFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.pullFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n    /**\r\n     * cancel Push Replication\r\n     */\r\n    cancelPushReplication() {\r\n        if (this.pushFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.pushFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n    /**\r\n     * cancel Sync Replication\r\n     */\r\n    cancelSyncReplication() {\r\n        if (this.syncFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.syncFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n}\n\nclass FullSyncDeleteDocumentParameter {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n}\r\nFullSyncDeleteDocumentParameter.DOCID = new FullSyncDeleteDocumentParameter(\"docid\");\r\nFullSyncDeleteDocumentParameter.REV = new FullSyncDeleteDocumentParameter(\"rev\");\n\nclass FullSyncAttachmentParameter {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n}\r\nFullSyncAttachmentParameter.DOCID = new FullSyncAttachmentParameter(\"docid\");\r\nFullSyncAttachmentParameter.NAME = new FullSyncAttachmentParameter(\"name\");\r\nFullSyncAttachmentParameter.CONTENT_TYPE = new FullSyncAttachmentParameter(\"content_type\");\r\nFullSyncAttachmentParameter.CONTENT = new FullSyncAttachmentParameter(\"content\");\n\nclass FullSyncGetDocumentParameter {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n}\r\nFullSyncGetDocumentParameter.DOCID = new FullSyncGetDocumentParameter(\"docid\");\n\nclass FullSyncGetViewParameter {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n}\r\nFullSyncGetViewParameter.VIEW = new FullSyncGetViewParameter(\"view\");\r\nFullSyncGetViewParameter.DDOC = new FullSyncGetViewParameter(\"ddoc\");\n\nvar _a;\r\n/**\r\n * Created by charlesg on 10/01/2017.\r\n */\r\n// @dynamic\r\nclass FullSyncRequestable {\r\n    constructor(value, handleFullSyncRequestOp) {\r\n        this.value = value;\r\n        this.handleFullSyncRequestOp = handleFullSyncRequestOp;\r\n    }\r\n    handleFullSyncRequest(c8oFullSync, databaseName, parameters, c8oResponseListener) {\r\n        return new Promise((resolve, reject) => {\r\n            this.handleFullSyncRequestOp(c8oFullSync, databaseName, parameters, c8oResponseListener).then((result) => {\r\n                resolve(result);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    static getFullSyncRequestable(value) {\r\n        const fullSyncRequestableValues = FullSyncRequestable.values();\r\n        for (let i = 0; i < fullSyncRequestableValues.length; i++) {\r\n            if (fullSyncRequestableValues[i].value === value) {\r\n                return fullSyncRequestableValues[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    static values() {\r\n        return [this.GET, this.DELETE, this.POST, this.ALL, this.ALL_LOCAL, this.VIEW, this.SYNC, this.REPLICATE_PULL, this.REPLICATE_PUSH, this.RESET, this.CREATE, this.DESTROY, this.PUT_ATTACHMENT, this.GET_ATTACHMENT, this.DELETE_ATTACHMENT, this.BULK, this.INFO, this.CREATEINDEX, this.FIND, this.DELETEINDEX, this.GETINDEXES, this.EXPLAIN, this.SEARCH];\r\n    }\r\n}\r\n_a = FullSyncRequestable;\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.GET = new FullSyncRequestable(\"get\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        const docid = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, true);\r\n        resolve(c8oFullSync.handleGetDocumentRequest(databaseName, docid, parameters));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.DELETE = new FullSyncRequestable(\"delete\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        const docid = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, true);\r\n        c8oFullSync.handleDeleteDocumentRequest(databaseName, docid, parameters).then((result) => {\r\n            resolve(result);\r\n        }).catch((error) => {\r\n            reject(error);\r\n        });\r\n    })\r\n        .catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.POST = new FullSyncRequestable(\"post\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const fullSyncPolicyParameter = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncPostDocumentParameter.POLICY.name, false);\r\n            const fullSyncPolicy = FullSyncPolicy.getFullSyncPolicy(fullSyncPolicyParameter);\r\n            let fullSyncPolicySubMerge = [];\r\n            if (fullSyncPolicyParameter == \"merge\") {\r\n                for (let elem in parameters) {\r\n                    if (elem.indexOf(\"_use_merge\") == 0) {\r\n                        let key = elem.substring(11);\r\n                        let value = parameters[elem];\r\n                        fullSyncPolicySubMerge.push({ key: key, value: value });\r\n                    }\r\n                }\r\n            }\r\n            resolve(c8oFullSync.handlePostDocumentRequest(databaseName, fullSyncPolicy, parameters, fullSyncPolicySubMerge));\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.PUT_ATTACHMENT = new FullSyncRequestable(\"put_attachment\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        const docid = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n        const name = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n        const contentType = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.CONTENT_TYPE.name, false);\r\n        const content = C8oUtilsCore.getParameterObjectValue(parameters, FullSyncAttachmentParameter.CONTENT.name, false);\r\n        resolve(c8oFullSync.handlePutAttachmentRequest(databaseName, docid, name, contentType, content));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\nFullSyncRequestable.GET_ATTACHMENT = new FullSyncRequestable(\"get_attachment\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        const docid = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n        const name = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n        resolve(c8oFullSync.handleGetAttachmentRequest(databaseName, docid, name, parameters));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.DELETE_ATTACHMENT = new FullSyncRequestable(\"delete_attachment\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        const docid = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n        const name = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n        resolve(c8oFullSync.handleDeleteAttachmentRequest(databaseName, docid, name));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.ALL = new FullSyncRequestable(\"all\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        c8oFullSync.handleAllDocumentsRequest(databaseName, parameters)\r\n            .then((result) => {\r\n            resolve(result);\r\n        });\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.ALL_LOCAL = new FullSyncRequestable(\"all_local\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        c8oFullSync.handleAllLocalDocumentsRequest(databaseName, parameters)\r\n            .then((result) => {\r\n            resolve(result);\r\n        });\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.VIEW = new FullSyncRequestable(\"view\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        const ddoc = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetViewParameter.DDOC.name, false);\r\n        const view = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetViewParameter.VIEW.name, false);\r\n        c8oFullSync.handleGetViewRequest(databaseName, ddoc, view, parameters).then((result) => {\r\n            resolve(result);\r\n        }).catch((error) => {\r\n            reject(error);\r\n        });\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.CREATEINDEX = new FullSyncRequestable(\"createIndex\", async (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    try {\r\n        const fields = C8oUtilsCore.peekParameterObjectValue(parameters, \"fields\", false);\r\n        let result = await c8oFullSync.handleCreateIndexRequest(databaseName, fields, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.FIND = new FullSyncRequestable(\"find\", async (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    try {\r\n        const selector = C8oUtilsCore.peekParameterObjectValue(parameters, \"selector\", false);\r\n        let result = await c8oFullSync.handleGetFindRequest(databaseName, selector, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.EXPLAIN = new FullSyncRequestable(\"explain\", async (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    try {\r\n        const selector = C8oUtilsCore.peekParameterObjectValue(parameters, \"selector\", false);\r\n        let result = await c8oFullSync.handleExplainRequest(databaseName, selector, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.GETINDEXES = new FullSyncRequestable(\"getIndexes\", async (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    try {\r\n        let result = await c8oFullSync.handleGetIndexesRequest(databaseName, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.DELETEINDEX = new FullSyncRequestable(\"deleteIndex\", async (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    try {\r\n        let result = await c8oFullSync.handleDeleteIndexRequest(databaseName, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.SEARCH = new FullSyncRequestable(\"search\", async (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    try {\r\n        const query = C8oUtilsCore.peekParameterObjectValue(parameters, \"query\", false);\r\n        const fields = C8oUtilsCore.peekParameterObjectValue(parameters, \"fields\", false);\r\n        let result = await c8oFullSync.handleSearchRequest(databaseName, query, fields, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n});\r\nFullSyncRequestable.SYNC = new FullSyncRequestable(\"sync\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    let pullFinish = false;\r\n    let pushFinish = false;\r\n    return new Promise((resolve, reject) => {\r\n        c8oFullSync.handleSyncRequest(databaseName, parameters, new C8oResponseProgressListener((progress, parameters) => {\r\n            if (parameters[\"cancel\"] == true) {\r\n                resolve({ ok: true });\r\n            }\r\n            else {\r\n                if (!pullFinish && progress.pull && progress.finished) {\r\n                    pullFinish = true;\r\n                    c8oFullSync.c8o.log._debug(\"handleFullSyncRequest pullFinish = true: \" + progress.toString());\r\n                }\r\n                if (!pushFinish && progress.push && progress.finished) {\r\n                    pushFinish = true;\r\n                    c8oFullSync.c8o.log._debug(\"handleFullSyncRequest pushFinish = true: \" + progress.toString());\r\n                }\r\n                if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                    c8oFullSync.c8o.log._debug(\"handleFullSyncRequest onJsonResponse: \" + progress.toString());\r\n                    const varNull = null;\r\n                    c8oResponseListener.onJsonResponse(varNull, parameters);\r\n                }\r\n                if (pullFinish || pushFinish) {\r\n                    resolve({ ok: true });\r\n                }\r\n            }\r\n        })).catch((error) => {\r\n            reject(error);\r\n        });\r\n    })\r\n        .catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\nFullSyncRequestable.REPLICATE_PULL = new FullSyncRequestable(\"replicate_pull\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        c8oFullSync.handleReplicatePullRequest(databaseName, parameters, new C8oResponseProgressListener((progress, param) => {\r\n            if (parameters[\"cancel\"] == true) {\r\n                resolve({ ok: true });\r\n            }\r\n            else {\r\n                if (progress.finished) {\r\n                    resolve({ ok: true });\r\n                }\r\n                if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                    const varNull = null;\r\n                    c8oResponseListener.onJsonResponse(varNull, param);\r\n                }\r\n            }\r\n        })).catch((error) => {\r\n            reject(error);\r\n        });\r\n    })\r\n        .catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\nFullSyncRequestable.REPLICATE_PUSH = new FullSyncRequestable(\"replicate_push\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        c8oFullSync.handleReplicatePushRequest(databaseName, parameters, new C8oResponseProgressListener((progress, param) => {\r\n            if (parameters[\"cancel\"] == true) {\r\n                resolve({ ok: true });\r\n            }\r\n            else {\r\n                if (progress.finished) {\r\n                    resolve({ ok: true });\r\n                }\r\n                if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                    const varNull = null;\r\n                    c8oResponseListener.onJsonResponse(varNull, param);\r\n                }\r\n            }\r\n        })).catch((error) => {\r\n            reject(error);\r\n        });\r\n    })\r\n        .catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\nFullSyncRequestable.RESET = new FullSyncRequestable(\"reset\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        c8oFullSync.handleResetDatabaseRequest(databaseName).then((response) => {\r\n            c8oFullSync.c8o.subscriber_database_reset.next({ databaseName: databaseName, success: true, error: false });\r\n            resolve(response);\r\n        }).catch((error) => {\r\n            c8oFullSync.c8o.subscriber_database_reset.error({ databaseName: databaseName, success: false, error: true, nativeError: error });\r\n            reject(error);\r\n        });\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\nFullSyncRequestable.CREATE = new FullSyncRequestable(\"create\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        resolve(c8oFullSync.handleCreateDatabaseRequest(databaseName));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\nFullSyncRequestable.BULK = new FullSyncRequestable(\"bulk\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        resolve(c8oFullSync.handleBulkRequest(databaseName, parameters));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\nFullSyncRequestable.INFO = new FullSyncRequestable(\"info\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        resolve(c8oFullSync.handleInfoRequest(databaseName));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\nFullSyncRequestable.DESTROY = new FullSyncRequestable(\"destroy\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        c8oFullSync.handleDestroyDatabaseRequest(databaseName).then((response) => {\r\n            resolve(response);\r\n        }).catch((error) => {\r\n            reject(error);\r\n        });\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\n\nclass FullSyncResponse {\r\n}\r\n/**\r\n * The response key indicating the operation status.\r\n */\r\nFullSyncResponse.RESPONSE_KEY_OK = \"ok\";\r\n/**\r\n * The response key indicating the document ID.\r\n */\r\nFullSyncResponse.RESPONSE_KEY_DOCUMENT_ID = \"id\";\r\n/**\r\n * The response key indicating the document revision.\r\n */\r\nFullSyncResponse.RESPONSE_KEY_DOCUMENT_REVISION = \"rev\";\r\n/**\r\n * Returned by a fullSync operation without return data.\r\n */\r\nclass FullSyncAbstractResponse {\r\n    constructor(operationStatus) {\r\n        this.operationStatus = operationStatus;\r\n    }\r\n    getProperties() {\r\n        const properties = {};\r\n        properties[FullSyncResponse.RESPONSE_KEY_OK] = this.operationStatus;\r\n        return properties;\r\n    }\r\n}\r\n/**\r\n * Represents a default fullSync response.\r\n */\r\nclass FullSyncDefaultResponse extends FullSyncAbstractResponse {\r\n    constructor(operationStatus) {\r\n        super(operationStatus);\r\n    }\r\n}\r\n/**\r\n * Returned by a fullSync document operation without return data.\r\n */\r\nclass FullSyncDocumentOperationResponse extends FullSyncAbstractResponse {\r\n    constructor(documentId, documentRevision, operationStatus) {\r\n        super(operationStatus);\r\n        this.documentId = documentId;\r\n        this.documentRevision = documentRevision;\r\n    }\r\n    getProperties() {\r\n        const properties = super.getProperties();\r\n        properties[FullSyncResponse.RESPONSE_KEY_DOCUMENT_ID] = this.documentId;\r\n        properties[FullSyncResponse.RESPONSE_KEY_DOCUMENT_REVISION] = this.documentRevision;\r\n        return properties;\r\n    }\r\n}\n\nclass C8oAlldocsLocal {\r\n    constructor(c8o) {\r\n        this.c8o = c8o;\r\n        this.DB_VERSION = 5;\r\n        this.LOCAL_STORE = 'local-store';\r\n        this.ATTACH_STORE = 'attach-store';\r\n    }\r\n    alldocs(opts, db) {\r\n        return new Promise((resolve, reject) => {\r\n            let dbName = db[\"prefix\"] + db[\"name\"];\r\n            opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;\r\n            if (opts.start_key) {\r\n                opts.startkey = opts.start_key;\r\n            }\r\n            if (opts.end_key) {\r\n                opts.endkey = opts.end_key;\r\n            }\r\n            if ('keys' in opts) {\r\n                if (!Array.isArray(opts.keys)) {\r\n                    return reject(new TypeError('options.keys must be an array'));\r\n                }\r\n                var incompatibleOpt = ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {\r\n                    return incompatibleOpt in opts;\r\n                })[0];\r\n                if (incompatibleOpt) {\r\n                    reject('Some query parameter is invalid' +\r\n                        'Query parameter `' + incompatibleOpt +\r\n                        '` is not compatible with multi-get');\r\n                    return;\r\n                }\r\n                if (!this.isRemote(db)) {\r\n                    this.allDocsKeysParse(opts);\r\n                    if (opts.keys.length === 0) {\r\n                        let callback = (arg1, arg2, arg3) => {\r\n                            resolve({ arg1: arg1, arg2: arg2, arg3: arg3 });\r\n                        };\r\n                        return this.idbAllDocs({ limit: 0 }, callback, dbName);\r\n                    }\r\n                }\r\n            }\r\n            let callback = (err, result) => {\r\n                if (!err) {\r\n                    this.c8o.log._trace(\"[c8oAlldocsLocal], alldocs: ok\");\r\n                }\r\n                else {\r\n                    this.c8o.log._error(\"[c8oAlldocsLocal], alldocs: an error occured :\", err);\r\n                }\r\n                resolve({ err: err, result: result });\r\n            };\r\n            return this.idbAllDocs(opts, callback, dbName);\r\n        });\r\n    }\r\n    openBase(DB_NAME, resolve = null, reject = null) {\r\n        if (resolve != null) {\r\n            this.doOpenBase(DB_NAME, resolve, reject);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            this.doOpenBase(DB_NAME, resolve, reject);\r\n        });\r\n    }\r\n    doOpenBase(DB_NAME, resolve = null, reject = null) {\r\n        try {\r\n            let req = window.indexedDB.open(DB_NAME, this.DB_VERSION);\r\n            req.onsuccess = (event) => {\r\n                if (req.result.objectStoreNames.length == 0) {\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, we need to re-initialized it\");\r\n                    this.restaureDb(DB_NAME)\r\n                        .then(() => {\r\n                        this.c8o.log._debug(\"[alldocs] database has been re-initialized, we will execute all docs\");\r\n                        this.openBase(DB_NAME, resolve, reject);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    resolve(req.result);\r\n                }\r\n            };\r\n        }\r\n        catch (err) {\r\n            reject(err);\r\n        }\r\n    }\r\n    restaureDb(DB_NAME) {\r\n        return new Promise((resolve, reject) => {\r\n            var dbDeleteRequest = window.indexedDB.deleteDatabase(DB_NAME);\r\n            dbDeleteRequest.onerror = (event) => {\r\n                this.c8o.log._error(\"[alldocs] database is corrupted, failed to re-initialized database\");\r\n                reject(event);\r\n            };\r\n            dbDeleteRequest.onsuccess = (event) => {\r\n                this.c8o.log._debug(\"[alldocs] database is corrupted, deletion successfull\");\r\n                // Let us open our database\r\n                var DBOpenRequest = window.indexedDB.open(DB_NAME, 5);\r\n                DBOpenRequest.onsuccess = (event) => {\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, creation successfull\");\r\n                    resolve();\r\n                };\r\n                DBOpenRequest.onupgradeneeded = (event) => {\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, database need to be upgraded\");\r\n                };\r\n                DBOpenRequest.onerror = (event) => {\r\n                    this.c8o.log._error(\"[alldocs] database is corrupted, creation errored\", event);\r\n                    reject(event);\r\n                };\r\n            };\r\n        });\r\n    }\r\n    async idbAllDocs(opts, callback, DB_NAME) {\r\n        let idb = await this.openBase(DB_NAME);\r\n        var start = 'startkey' in opts ? opts.startkey : false;\r\n        var end = 'endkey' in opts ? opts.endkey : false;\r\n        var key = 'key' in opts ? opts.key : false;\r\n        var keys = 'keys' in opts ? opts.keys : false;\r\n        var skip = opts.skip || 0;\r\n        var limit = typeof opts.limit === 'number' ? opts.limit : -1;\r\n        var inclusiveEnd = opts.inclusive_end !== false;\r\n        var keyRange;\r\n        var keyRangeError;\r\n        if (!keys) {\r\n            keyRange = this.createKeyRange(start, end, inclusiveEnd, key, opts.descending);\r\n            keyRangeError = keyRange && keyRange.error;\r\n            if (keyRangeError &&\r\n                !(keyRangeError.name === \"DataError\" && keyRangeError.code === 0)) {\r\n                // DataError with error code 0 indicates start is less than end, so\r\n                // can just do an empty query. Else need to throw\r\n                return callback(\"indexed_db_went_bad\" +\r\n                    keyRangeError.name, keyRangeError.message);\r\n            }\r\n        }\r\n        var stores = [this.LOCAL_STORE];\r\n        if (opts.attachments) {\r\n            stores.push(this.ATTACH_STORE);\r\n        }\r\n        var txnResult = this.openTransactionSafely(idb, stores, 'readonly');\r\n        if (txnResult[\"error\"]) {\r\n            return callback(txnResult[\"error\"]);\r\n        }\r\n        var txn = txnResult[\"txn\"];\r\n        txn.oncomplete = onTxnComplete;\r\n        txn.onabort = callback;\r\n        var localStore = txn.objectStore(this.LOCAL_STORE);\r\n        var results = [];\r\n        var docCount;\r\n        var countRequest = localStore.count();\r\n        countRequest.onsuccess = function () {\r\n            docCount = countRequest.result;\r\n        };\r\n        function allDocsInner(winningRev$$1, metadata) {\r\n            var row = {\r\n                id: metadata.id,\r\n                key: metadata.id,\r\n                value: {\r\n                    rev: winningRev$$1\r\n                }\r\n            };\r\n            var deleted = metadata.deleted;\r\n            if (deleted) {\r\n                if (keys) {\r\n                    results.push(row);\r\n                    // deleted docs are okay with \"keys\" requests\r\n                    row[\"value\"][\"deleted\"] = true;\r\n                    row[\"doc\"] = null;\r\n                }\r\n            }\r\n            else if (skip-- <= 0) {\r\n                results.push(row);\r\n                if (opts.include_docs) {\r\n                    row[\"doc\"] = metadata[\"_c8o_inlcude\"];\r\n                }\r\n            }\r\n        }\r\n        let processBatch = (batchValues) => {\r\n            for (var i = 0, len = batchValues.length; i < len; i++) {\r\n                if (results.length === limit) {\r\n                    break;\r\n                }\r\n                var batchValue = batchValues[i];\r\n                if (batchValue.error && keys) {\r\n                    // key was not found with \"keys\" requests\r\n                    results.push(batchValue);\r\n                    continue;\r\n                }\r\n                var metadata = this.decodeMetadata(batchValue);\r\n                var winningRev$$1 = metadata[\"winningRev\"];\r\n                metadata[\"_c8o_inlcude\"] = batchValue;\r\n                allDocsInner(winningRev$$1, metadata);\r\n            }\r\n        };\r\n        function onBatch(batchKeys, batchValues, cursor) {\r\n            if (!cursor) {\r\n                return;\r\n            }\r\n            processBatch(batchValues);\r\n            if (results.length < limit) {\r\n                cursor.continue();\r\n            }\r\n        }\r\n        function onGetAll(e) {\r\n            var values = e.target.result;\r\n            if (opts.descending) {\r\n                values = values.reverse();\r\n            }\r\n            processBatch(values);\r\n        }\r\n        function onResultsReady() {\r\n            var returnVal = {\r\n                total_rows: docCount,\r\n                offset: opts.skip,\r\n                rows: results\r\n            };\r\n            callback(null, returnVal);\r\n        }\r\n        function onTxnComplete() {\r\n            if (opts.attachments) {\r\n                this.postProcessAttachments(results, opts.binary).then(onResultsReady);\r\n            }\r\n            else {\r\n                onResultsReady();\r\n            }\r\n        }\r\n        // don't bother doing any requests if start > end or limit === 0\r\n        if (keyRangeError || limit === 0) {\r\n            return;\r\n        }\r\n        if (keys) {\r\n            return this.allDocsKeys(opts.keys, localStore, onBatch);\r\n        }\r\n        if (limit === -1) { // just fetch everything\r\n            return this.getAll(localStore, keyRange, onGetAll);\r\n        }\r\n        // else do a cursor\r\n        // choose a batch size based on the skip, since we'll need to skip that many\r\n        this.runBatchedCursor(localStore, keyRange, opts.descending, limit + skip, onBatch);\r\n    }\r\n    runBatchedCursor(objectStore, keyRange, descending, batchSize, onBatch) {\r\n        if (batchSize === -1) {\r\n            batchSize = 1000;\r\n        }\r\n        // Bail out of getAll()/getAllKeys() in the following cases:\r\n        // 1) either method is unsupported - we need both\r\n        // 2) batchSize is 1 (might as well use IDBCursor)\r\n        // 3) descending – no real way to do this via getAll()/getAllKeys()\r\n        var useGetAll = typeof objectStore.getAll === 'function' &&\r\n            typeof objectStore.getAllKeys === 'function' &&\r\n            batchSize > 1 && !descending;\r\n        var keysBatch;\r\n        var valuesBatch;\r\n        var pseudoCursor;\r\n        function onGetAll(e) {\r\n            valuesBatch = e.target.result;\r\n            if (keysBatch) {\r\n                onBatch(keysBatch, valuesBatch, pseudoCursor);\r\n            }\r\n        }\r\n        function onGetAllKeys(e) {\r\n            keysBatch = e.target.result;\r\n            if (valuesBatch) {\r\n                onBatch(keysBatch, valuesBatch, pseudoCursor);\r\n            }\r\n        }\r\n        function continuePseudoCursor() {\r\n            if (!keysBatch.length) { // no more results\r\n                return onBatch();\r\n            }\r\n            // fetch next batch, exclusive start\r\n            var lastKey = keysBatch[keysBatch.length - 1];\r\n            var newKeyRange;\r\n            if (keyRange && keyRange.upper) {\r\n                try {\r\n                    newKeyRange = IDBKeyRange.bound(lastKey, keyRange.upper, true, keyRange.upperOpen);\r\n                }\r\n                catch (e) {\r\n                    if (e.name === \"DataError\" && e.code === 0) {\r\n                        return onBatch(); // we're done, startkey and endkey are equal\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                newKeyRange = IDBKeyRange.lowerBound(lastKey, true);\r\n            }\r\n            keyRange = newKeyRange;\r\n            keysBatch = null;\r\n            valuesBatch = null;\r\n            objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;\r\n            objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;\r\n        }\r\n        function onCursor(e) {\r\n            var cursor = e.target.result;\r\n            if (!cursor) { // done\r\n                return onBatch();\r\n            }\r\n            // regular IDBCursor acts like a batch where batch size is always 1\r\n            onBatch([cursor.key], [cursor.value], cursor);\r\n        }\r\n        if (useGetAll) {\r\n            pseudoCursor = { \"continue\": continuePseudoCursor };\r\n            objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;\r\n            objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;\r\n        }\r\n        else if (descending) {\r\n            objectStore.openCursor(keyRange, 'prev').onsuccess = onCursor;\r\n        }\r\n        else {\r\n            objectStore.openCursor(keyRange).onsuccess = onCursor;\r\n        }\r\n    }\r\n    getAll(objectStore, keyRange, onSuccess) {\r\n        if (typeof objectStore.getAll === 'function') {\r\n            // use native getAll\r\n            objectStore.getAll(keyRange).onsuccess = onSuccess;\r\n            return;\r\n        }\r\n        // fall back to cursors\r\n        var values = [];\r\n        function onCursor(e) {\r\n            var cursor = e.target.result;\r\n            if (cursor) {\r\n                values.push(cursor.value);\r\n                cursor.continue();\r\n            }\r\n            else {\r\n                onSuccess({\r\n                    target: {\r\n                        result: values\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        objectStore.openCursor(keyRange).onsuccess = onCursor;\r\n    }\r\n    allDocsKeys(keys, docStore, onBatch) {\r\n        // It's not guaranted to be returned in right order  \r\n        var valuesBatch = new Array(keys.length);\r\n        var count = 0;\r\n        keys.forEach(function (key, index) {\r\n            docStore.get(key).onsuccess = function (event) {\r\n                if (event.target.result) {\r\n                    valuesBatch[index] = event.target.result;\r\n                }\r\n                else {\r\n                    valuesBatch[index] = { key: key, error: 'not_found' };\r\n                }\r\n                count++;\r\n                if (count === keys.length) {\r\n                    onBatch(keys, valuesBatch, {});\r\n                }\r\n            };\r\n        });\r\n    }\r\n    decodeMetadata(storedObject) {\r\n        if (!storedObject) {\r\n            return null;\r\n        }\r\n        var metadata = {};\r\n        metadata[\"winningRev\"] = storedObject._rev;\r\n        metadata[\"id\"] = storedObject._id;\r\n        return metadata;\r\n    }\r\n    openTransactionSafely(idb, stores, mode) {\r\n        try {\r\n            return {\r\n                txn: idb.transaction(stores, mode)\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                error: err\r\n            };\r\n        }\r\n    }\r\n    isRemote(db) {\r\n        if (typeof db._remote === 'boolean') {\r\n            return db._remote;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (typeof db.type === 'function') {\r\n            return db.type() === 'http';\r\n        }\r\n        /* istanbul ignore next */\r\n        return false;\r\n    }\r\n    allDocsKeysParse(opts) {\r\n        var keys = ('limit' in opts) ?\r\n            opts.keys.slice(opts.skip, opts.limit + opts.skip) :\r\n            (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;\r\n        opts.keys = keys;\r\n        opts.skip = 0;\r\n        delete opts.limit;\r\n        if (opts.descending) {\r\n            keys.reverse();\r\n            opts.descending = false;\r\n        }\r\n    }\r\n    createKeyRange(start, end, inclusiveEnd, key, descending) {\r\n        try {\r\n            if (start && end) {\r\n                if (descending) {\r\n                    return IDBKeyRange.bound(end, start, !inclusiveEnd, false);\r\n                }\r\n                else {\r\n                    return IDBKeyRange.bound(start, end, false, !inclusiveEnd);\r\n                }\r\n            }\r\n            else if (start) {\r\n                if (descending) {\r\n                    return IDBKeyRange.upperBound(start);\r\n                }\r\n                else {\r\n                    return IDBKeyRange.lowerBound(start);\r\n                }\r\n            }\r\n            else if (end) {\r\n                if (descending) {\r\n                    return IDBKeyRange.lowerBound(end, !inclusiveEnd);\r\n                }\r\n                else {\r\n                    return IDBKeyRange.upperBound(end, !inclusiveEnd);\r\n                }\r\n            }\r\n            else if (key) {\r\n                return IDBKeyRange.only(key);\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { error: e };\r\n        }\r\n        return null;\r\n    }\r\n}\n\nclass C8oFullSync {\r\n    constructor(c8o) {\r\n        this.c8o = c8o;\r\n        this.fullSyncDatabaseUrlBase = c8o.endpointConvertigo + C8oFullSync.FULL_SYNC_URL_PATH;\r\n        this.localSuffix = (c8o.fullSyncLocalSuffix !== null) ? c8o.fullSyncLocalSuffix : \"_device\";\r\n    }\r\n    /**\r\n     * Handles a fullSync request.<br/>\r\n     * It determines the type of the request thanks to parameters.\r\n     *\r\n     * @param _parameters\r\n     * @param listener\r\n     * @return promise<any>\r\n     * @throws C8oException\r\n     */\r\n    async handleFullSyncRequest(_parameters, listener) {\r\n        return new Promise((resolve, reject) => {\r\n            const parameters = {};\r\n            for (const val in _parameters) {\r\n                if (_parameters[val] instanceof Blob != true && typeof _parameters[val] !== \"function\") {\r\n                    //if it's not a blob then stringify and parse the value to make some values like true case insensitive ( from string to boolean)\r\n                    parameters[val] = JSON.parse(JSON.stringify(_parameters[val]));\r\n                }\r\n                else {\r\n                    parameters[val] = _parameters[val];\r\n                }\r\n            }\r\n            const projectParameterValue = C8oUtilsCore.peekParameterStringValue(parameters, C8oCore.ENGINE_PARAMETER_PROJECT, true);\r\n            if (projectParameterValue.indexOf(C8oFullSync.FULL_SYNC_PROJECT) !== 0) {\r\n                reject(new C8oException(C8oExceptionMessage.invalidParameterValue(projectParameterValue, \"its don't start with\" + C8oFullSync.FULL_SYNC_PROJECT)));\r\n            }\r\n            let fullSyncRequestableValue = C8oUtilsCore.peekParameterStringValue(parameters, C8oCore.ENGINE_PARAMETER_SEQUENCE, true);\r\n            //  get rid of the optional trailing #RouteHint present in the sequence\r\n            if (fullSyncRequestableValue.indexOf(\"#\") !== -1) {\r\n                fullSyncRequestableValue = fullSyncRequestableValue.substring(0, fullSyncRequestableValue.indexOf(\"#\"));\r\n            }\r\n            const fullSyncRequestable = FullSyncRequestable.getFullSyncRequestable(fullSyncRequestableValue);\r\n            if (fullSyncRequestable === null) {\r\n                reject(new C8oException(C8oExceptionMessage.invalidParameterValue(C8oCore.ENGINE_PARAMETER_PROJECT, C8oExceptionMessage.unknownValue(\"fullSync requestable\", fullSyncRequestableValue))));\r\n            }\r\n            let databaseName = projectParameterValue.substring(C8oFullSync.FULL_SYNC_PROJECT.length);\r\n            if (databaseName.length < 1) {\r\n                databaseName = this.c8o.defaultDatabaseName;\r\n                if (databaseName === null) {\r\n                    reject(new C8oException(C8oExceptionMessage.invalidParameterValue(C8oCore.ENGINE_PARAMETER_PROJECT, C8oExceptionMessage.missingValue(\"fullSync database name\"))));\r\n                }\r\n            }\r\n            let response;\r\n            fullSyncRequestable.handleFullSyncRequest(this, databaseName, parameters, listener).then((result) => {\r\n                response = result;\r\n                if (response === null || response === undefined) {\r\n                    reject(new C8oException(C8oExceptionMessage.couchNullResult()));\r\n                }\r\n                resolve(this.handleFullSyncResponse(response, listener));\r\n            }).catch((error) => {\r\n                if (error instanceof C8oException) {\r\n                    reject(error);\r\n                }\r\n                else {\r\n                    reject(new C8oException(C8oExceptionMessage.FullSyncRequestFail(), error));\r\n                }\r\n            });\r\n        });\r\n    }\r\n    //noinspection JSUnusedLocalSymbols\r\n    /**\r\n     *\r\n     * @param response\r\n     * @param listener\r\n     * @return response\r\n     * @throws C8oException Failed to parse response.\r\n     */\r\n    handleFullSyncResponse(response, listener) {\r\n        return response;\r\n    }\r\n    /**\r\n     * Checks if request parameters correspond to a fullSync request.\r\n     */\r\n    static isFullSyncRequest(requestParameter) {\r\n        if (C8oUtilsCore.getParameterStringValue(requestParameter, C8oCore.ENGINE_PARAMETER_PROJECT, false) !== null) {\r\n            return C8oUtilsCore.getParameterStringValue(requestParameter, C8oCore.ENGINE_PARAMETER_PROJECT, false).indexOf(C8oFullSync.FULL_SYNC_PROJECT) === 0;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nC8oFullSync.FULL_SYNC_URL_PATH = \"/fullsync/\";\r\n/**\r\n * The project requestable value to execute a fullSync request.\r\n */\r\nC8oFullSync.FULL_SYNC_PROJECT = \"fs://\";\r\nC8oFullSync.FULL_SYNC__ID = \"_id\";\r\nC8oFullSync.FULL_SYNC__REV = \"_rev\";\r\nC8oFullSync.FULL_SYNC__ATTACHMENTS = \"_attachments\";\r\nclass C8oFullSyncCbl extends C8oFullSync {\r\n    constructor(c8o) {\r\n        super(c8o);\r\n        this.fullSyncChangeListeners = [];\r\n        this.cblChangeListeners = [];\r\n        this.replicationsToRestart = [];\r\n        this.canceled = false;\r\n        this.fullSyncDatabases = {};\r\n        if (window[\"C8oFullSyncCbl\"] == undefined) {\r\n            window[\"C8oFullSyncCbl\"] = [];\r\n        }\r\n    }\r\n    /**\r\n     * Returns the database with this name in the list.<br/>\r\n     * If it does not already exist yet then creates it and adds it to the list.\r\n     *\r\n     * @param databaseName\r\n     * @return C8oFullSyncDatabase\r\n     * @throws C8oException Failed to create a new fullSync database.\r\n     */\r\n    async getOrCreateFullSyncDatabase(databaseName, isLocalCache = false) {\r\n        let mutex = window[\"C8oFullSyncCbl\"][databaseName] == undefined ? window[\"C8oFullSyncCbl\"][databaseName] = new Semaphore(1) : window[\"C8oFullSyncCbl\"][databaseName];\r\n        await mutex.acquire();\r\n        let localDatabaseName = databaseName + this.localSuffix;\r\n        localDatabaseName = this.c8o.database.localName(localDatabaseName, true);\r\n        let prefix = this.c8o.prefixBase == true && isLocalCache == false ? this.c8o.session.user.name + \"_\" : \"\";\r\n        if (this.fullSyncDatabases[localDatabaseName] == null) {\r\n            this.fullSyncDatabases[localDatabaseName] = new C8oFullSyncDatabase(this.c8o, databaseName, this.fullSyncDatabaseUrlBase, this.localSuffix, prefix);\r\n        }\r\n        mutex.release();\r\n        return this.fullSyncDatabases[localDatabaseName];\r\n    }\r\n    handleFullSyncResponse(response, listener) {\r\n        response = super.handleFullSyncResponse(response, listener);\r\n        if (listener instanceof C8oResponseJsonListener) {\r\n            if (response instanceof FullSyncDocumentOperationResponse) {\r\n                return C8oFullSyncTranslator.fullSyncDocumentOperationResponseToJson(response);\r\n            }\r\n            else if (response instanceof FullSyncDefaultResponse) {\r\n                return C8oFullSyncTranslator.fullSyncDefaultResponseToJson(response);\r\n            }\r\n            else if (response instanceof Object) {\r\n                return response;\r\n            }\r\n            else {\r\n                throw new C8oException(C8oExceptionMessage.illegalArgumentIncompatibleListener(listener.toString(), typeof response));\r\n            }\r\n        }\r\n    }\r\n    async handleGetAttachmentUrlRequest(fullSyncDatabaseName, docid, parameters) {\r\n        let fullSyncDatabase = null;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(fullSyncDatabaseName);\r\n        const attachmentName = C8oUtilsCore.getParameterStringValue(parameters, \"attachment_name\", false);\r\n        return new Promise((resolve) => {\r\n            fullSyncDatabase.getdatabase.getAttachment(docid, attachmentName).then((buffer) => {\r\n                resolve(buffer);\r\n            });\r\n        });\r\n    }\r\n    async handleGetDocumentRequest(fullSyncDatabaseName, docid, parameters) {\r\n        let fullSyncDatabase = null;\r\n        let param;\r\n        param = parameters[\"attachments\"] ? { attachments: true } : {};\r\n        parameters[\"binary\"] ? param[\"binary\"] = true : {};\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(fullSyncDatabaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(docid, param).then((document) => {\r\n                if (document == null) {\r\n                    reject(new C8oRessourceNotFoundException((C8oExceptionMessage.ressourceNotFound(\"requested document \\\"\" + docid + \"\\\"\"))));\r\n                }\r\n                if (document === null) {\r\n                    document = {};\r\n                }\r\n                resolve(document);\r\n            })\r\n                .catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    async handleDeleteDocumentRequest(DatabaseName, docid, parameters) {\r\n        return new Promise(async (resolve, reject) => {\r\n            let fullSyncDatabase = null;\r\n            fullSyncDatabase = await this.getOrCreateFullSyncDatabase(DatabaseName);\r\n            const revParameterValue = C8oUtilsCore.getParameterStringValue(parameters, FullSyncDeleteDocumentParameter.REV.name, false);\r\n            let documentRevision;\r\n            if (revParameterValue === null) {\r\n                fullSyncDatabase.getdatabase.get(docid).then((doc) => {\r\n                    if (doc === null) {\r\n                        reject(new C8oRessourceNotFoundException(\"Cannot find document\"));\r\n                    }\r\n                    documentRevision = doc._rev;\r\n                    return fullSyncDatabase.getdatabase.remove(doc);\r\n                }).then((result) => {\r\n                    resolve(new FullSyncDocumentOperationResponse(docid, documentRevision, result.ok));\r\n                }).catch((err) => {\r\n                    reject(new C8oException(C8oExceptionMessage.couchRequestDeleteDocument(), err));\r\n                });\r\n            }\r\n            else {\r\n                fullSyncDatabase.getdatabase.remove(docid, revParameterValue)\r\n                    .then((result) => {\r\n                    resolve(new FullSyncDocumentOperationResponse(docid, documentRevision, result.ok));\r\n                }).catch((err) => {\r\n                    reject(new C8oException(C8oExceptionMessage.couchRequestDeleteDocument(), err));\r\n                });\r\n            }\r\n        });\r\n    }\r\n    async handlePostDocumentRequest(databaseName, fullSyncPolicy, parameters, fullsyncPolicySubMerge = null) {\r\n        let fullSyncDatabase;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let subkeySeparatorParameterValue = C8oUtilsCore.getParameterStringValue(parameters, C8oCore.FS_SUBKEY_SEPARATOR, false);\r\n        if (subkeySeparatorParameterValue == null) {\r\n            subkeySeparatorParameterValue = \".\";\r\n        }\r\n        const newProperties = {};\r\n        for (let i = 0; i < Object.keys(parameters).length; i++) {\r\n            let parameterName = Object.keys(parameters)[i];\r\n            if (parameterName.indexOf(\"__\") !== 0 && parameterName.indexOf(\"_use_\") !== 0) {\r\n                let objectParameterValue = parameters[Object.keys(parameters)[i]];\r\n                const paths = parameterName.split(subkeySeparatorParameterValue);\r\n                if (paths.length > 1) {\r\n                    parameterName = paths[0];\r\n                    let count = paths.length - 1;\r\n                    while (count > 0) {\r\n                        const tmpObject = {};\r\n                        tmpObject[paths[count]] = objectParameterValue;\r\n                        objectParameterValue = tmpObject;\r\n                        count--;\r\n                    }\r\n                    const existProperty = newProperties[parameterName];\r\n                    if (existProperty != null) {\r\n                        C8oFullSyncCbl.mergeProperties(objectParameterValue, existProperty);\r\n                    }\r\n                }\r\n                newProperties[parameterName] = objectParameterValue;\r\n            }\r\n        }\r\n        if (fullsyncPolicySubMerge != null) {\r\n        }\r\n        const db = fullSyncDatabase.getdatabase;\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncPolicy.action(db, newProperties, { fullsyncPolicySubMerge: fullsyncPolicySubMerge, subkeySeparatorParameterValue: subkeySeparatorParameterValue })\r\n                .then((createdDocument) => {\r\n                const fsDocOpeResp = new FullSyncDocumentOperationResponse(createdDocument.id, createdDocument.rev, createdDocument.ok);\r\n                resolve(fsDocOpeResp);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    async handlePutAttachmentRequest(databaseName, docid, attachmentName, attachmentType, attachmentContent) {\r\n        let document = null;\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(docid).then((result) => {\r\n                document = result;\r\n                if (document !== null) {\r\n                    fullSyncDatabase.getdatabase.putAttachment(docid, attachmentName, result._rev, attachmentContent, attachmentType)\r\n                        .then((result) => {\r\n                        //  handle result\r\n                        resolve(new FullSyncDocumentOperationResponse(result._id, result._rev, result.ok));\r\n                    }).catch((err) => {\r\n                        reject(new C8oCouchBaseLiteException(\"Unable to put the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n                    });\r\n                }\r\n                else {\r\n                    reject(new C8oRessourceNotFoundException(\"Cannot find document\"));\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async handleGetAttachmentRequest(databaseName, docid, attachmentName, parameters) {\r\n        let document = null;\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.getAttachment(docid, attachmentName, parameters)\r\n                .then((buffer) => {\r\n                resolve(buffer);\r\n            }).catch((err) => {\r\n                reject(new C8oCouchBaseLiteException(\"Unable to put the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n            });\r\n        });\r\n    }\r\n    async handleDeleteAttachmentRequest(databaseName, docid, attachmentName) {\r\n        let document = null;\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(docid).then((result) => {\r\n                document = result;\r\n            }).then(() => {\r\n                if (document !== null) {\r\n                    fullSyncDatabase.getdatabase.removeAttachment(docid, attachmentName, document._rev).catch((err) => {\r\n                        reject(new C8oCouchBaseLiteException(\"Unable to delete the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n                    });\r\n                }\r\n                else {\r\n                    reject(new C8oRessourceNotFoundException(\"Document do not exists\"));\r\n                }\r\n                resolve(new FullSyncDocumentOperationResponse(document._id, document._rev, true));\r\n            })\r\n                .catch((err) => {\r\n                reject(new C8oException(err.message, err));\r\n            });\r\n        });\r\n    }\r\n    async handleAllDocumentsRequest(databaseName, parameters) {\r\n        let fullSyncDatabase = null;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase\r\n                .allDocs(parameters)\r\n                .then((res) => {\r\n                resolve(res);\r\n            })\r\n                .catch((err) => {\r\n                reject(new C8oException(err.stack));\r\n            });\r\n        });\r\n    }\r\n    async handleAllLocalDocumentsRequest(databaseName, parameters) {\r\n        let fullSyncDatabase = null;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let c8oAlldocsLocal = new C8oAlldocsLocal(this.c8o);\r\n        return new Promise((resolve, reject) => {\r\n            c8oAlldocsLocal.alldocs(parameters, fullSyncDatabase.database)\r\n                .then((res) => {\r\n                if (!res.err) {\r\n                    resolve(res.result);\r\n                }\r\n                else {\r\n                    if (res[\"err\"][\"stack\"] != undefined) {\r\n                        reject(new C8oException(res[\"err\"][\"stack\"]));\r\n                    }\r\n                    else {\r\n                        reject(new C8oException(JSON.stringify(res[\"err\"])));\r\n                    }\r\n                }\r\n            })\r\n                .catch((err) => {\r\n                if (err[\"err\"][\"stack\"] != undefined) {\r\n                    reject(new C8oException(err[\"err\"][\"stack\"]));\r\n                }\r\n                else {\r\n                    reject(new C8oException(JSON.stringify(err[\"err\"])));\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async handleGetViewRequest(databaseName, ddocName, viewName, parameters) {\r\n        let fullSyncDatabase = null;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let attachments;\r\n        let binary;\r\n        let include_docs;\r\n        if (parameters[\"attachments\"] && window[\"cblite\"] !== undefined) {\r\n            attachments = C8oUtilsCore.getParameterStringValue(parameters, \"attachments\", false);\r\n            binary = C8oUtilsCore.getParameterStringValue(parameters, \"binary\", false);\r\n            include_docs = C8oUtilsCore.getParameterStringValue(parameters, \"include_docs\", false);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.query(ddocName + \"/\" + viewName, parameters)\r\n                .then((result) => {\r\n                if (attachments) {\r\n                    const array = [];\r\n                    let len = 0;\r\n                    for (const resp of result.rows) {\r\n                        this.handleGetDocumentRequest(databaseName, resp.id, {\r\n                            attachments: true,\r\n                            binary: true,\r\n                            include_docs: true,\r\n                        }).then((getResult) => {\r\n                            array.push(getResult);\r\n                            len++;\r\n                            if (len === result.rows.length) {\r\n                                result.rows = array;\r\n                                resolve(result);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    resolve(result);\r\n                }\r\n            }).catch((error) => {\r\n                reject(new C8oException(C8oExceptionMessage.couchRequestGetView(), error));\r\n            });\r\n        });\r\n    }\r\n    async handleCreateIndexRequest(databaseName, fields, parameters) {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            parameters[\"fields\"] = fields;\r\n            var result = await fullSyncDatabase.getdatabase.createIndex({ index: parameters });\r\n            return result;\r\n        }\r\n        catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestCreateIndex(), err);\r\n        }\r\n    }\r\n    async handleGetFindRequest(databaseName, selector, parameters) {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            parameters[\"selector\"] = selector;\r\n            var result = await fullSyncDatabase.getdatabase.find(parameters);\r\n            return result;\r\n        }\r\n        catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestFind(), err);\r\n        }\r\n    }\r\n    async handleExplainRequest(databaseName, selector, parameters) {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            parameters[\"selector\"] = selector;\r\n            var result = await fullSyncDatabase.getdatabase.explain(parameters);\r\n            return result;\r\n        }\r\n        catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestExplain(), err);\r\n        }\r\n    }\r\n    async handleGetIndexesRequest(databaseName, parameters) {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            var result = await fullSyncDatabase.getdatabase.getIndexes();\r\n            return result;\r\n        }\r\n        catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestGetIndexes(), err);\r\n        }\r\n    }\r\n    async handleDeleteIndexRequest(databaseName, parameters) {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            var result = await fullSyncDatabase.getdatabase.deleteIndex(parameters);\r\n            return result;\r\n        }\r\n        catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestDeleteIndex(), err);\r\n        }\r\n    }\r\n    async handleSearchRequest(databaseName, query, fields, parameters) {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        parameters[\"query\"] = query;\r\n        parameters[\"fields\"] = fields;\r\n        try {\r\n            var result = await fullSyncDatabase.getdatabase.search(parameters);\r\n            return result;\r\n        }\r\n        catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestSearch(), err);\r\n        }\r\n    }\r\n    /**\r\n     * Check network status before starting a replication\r\n     */\r\n    checkState() {\r\n        return this.c8o.reachable == undefined ? false : this.c8o.reachable;\r\n    }\r\n    async handleSyncRequest(databaseName, parameters, c8oResponseListener) {\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"sync\", fullSyncDatabase);\r\n        if (!resp[0]) {\r\n            this.c8o.session.mutexCheckSession.acquire();\r\n            return fullSyncDatabase.startAllReplications(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n        }\r\n        else {\r\n            this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n            return new Promise(() => { });\r\n        }\r\n    }\r\n    async handleReplicatePullRequest(databaseName, parameters, c8oResponseListener) {\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"pull\", fullSyncDatabase);\r\n        if (!resp[0]) {\r\n            this.c8o.session.mutexCheckSession.acquire();\r\n            return fullSyncDatabase.startPullReplication(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n        }\r\n        else {\r\n            this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n            return new Promise(() => { });\r\n        }\r\n    }\r\n    async handleReplicatePushRequest(databaseName, parameters, c8oResponseListener) {\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"push\", fullSyncDatabase);\r\n        if (!resp[0]) {\r\n            this.c8o.session.mutexCheckSession.acquire();\r\n            return fullSyncDatabase.startPushReplication(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n        }\r\n        else {\r\n            this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n            return new Promise(() => { });\r\n        }\r\n    }\r\n    handleResetDatabaseRequest(databaseName) {\r\n        return new Promise((resolve, reject) => {\r\n            this.handleDestroyDatabaseRequest(databaseName)\r\n                .then(() => {\r\n                this.handleCreateDatabaseRequest(databaseName).\r\n                    then((res) => {\r\n                    resolve(res);\r\n                })\r\n                    .catch((err) => {\r\n                    reject(err);\r\n                });\r\n            })\r\n                .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    async handleCreateDatabaseRequest(databaseName) {\r\n        await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new FullSyncDefaultResponse(true);\r\n    }\r\n    async handleBulkRequest(databaseName, parameters) {\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            const header = {\r\n                \"x-convertigo-sdk\": this.c8o.sdkVersion,\r\n            };\r\n            if (this.c8o.xsrfUsed) {\r\n                const headerName = \"x-xsrf-token\";\r\n                const fetch = \"Fetch\";\r\n                header[headerName] = window.localStorage.getItem(headerName) != undefined ? window.localStorage.getItem(headerName) : fetch;\r\n            }\r\n            Object.assign(header, this.c8o.headers);\r\n            fullSyncDatabase.getdatabase.c8oload(parameters[\"data\"], {\r\n                proxy: this.c8o.endpointConvertigo + \"/fullsync/\" + (fullSyncDatabase.getdatabseName).replace(\"_device\", \"\"),\r\n                fetch: (url, opts) => {\r\n                    opts.credentials = 'include';\r\n                    for (let key in header) {\r\n                        opts.headers.set(key, header[key]);\r\n                    }\r\n                    return PouchDB.fetch(url, opts);\r\n                }\r\n            }, this.c8o)\r\n                .then(() => {\r\n                resolve(new FullSyncDefaultResponse(true));\r\n            }).catch((err) => {\r\n                //this.c8o.log._error(\"Error loading the \" + parameters[\"data\"] + \" database resource\" + JSON.stringify(err, Object.getOwnPropertyNames(err)))\r\n                reject(new C8oException(\"Bulk Load failed\", err));\r\n            });\r\n        });\r\n    }\r\n    async handleInfoRequest(databaseName) {\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.info()\r\n                .then((response) => {\r\n                resolve(response);\r\n            }).catch((err) => {\r\n                //this.c8o.log._error(\"Error loading the \" + parameters[\"data\"] + \" database resource\" + JSON.stringify(err, Object.getOwnPropertyNames(err)))\r\n                reject(new C8oException(\"Get info failed\", err));\r\n            });\r\n        });\r\n    }\r\n    async handleDestroyDatabaseRequest(databaseName) {\r\n        return new Promise(async (resolve, reject) => {\r\n            const localDatabaseName = databaseName + this.localSuffix;\r\n            (await this.getOrCreateFullSyncDatabase(databaseName)).deleteDB().then((response) => {\r\n                if (this.fullSyncDatabases[this.c8o.database.localName(localDatabaseName)] != null) {\r\n                    delete this.fullSyncDatabases[this.c8o.database.localName(localDatabaseName)];\r\n                    this.c8o.database.cancelAllForbase(this.fullSyncDatabases[\"databaseName\"]);\r\n                }\r\n                resolve(new FullSyncDefaultResponse(response.ok));\r\n            }).catch((err) => {\r\n                reject(new C8oException(err.name, err));\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Allow to clone object whithout reference\r\n     *\r\n     * @param obj Object: object to be cloned\r\n     */\r\n    static deepCloneObject(obj) {\r\n        if (obj === null || typeof obj !== 'object') {\r\n            return obj;\r\n        }\r\n        var temporarystorage = obj.constructor();\r\n        for (var key in obj) {\r\n            temporarystorage[key] = C8oFullSyncCbl.deepCloneObject(obj[key]);\r\n        }\r\n        return temporarystorage;\r\n    }\r\n    /**\r\n     * Recursive function that browse object to be modified and apply delete\r\n     *\r\n     * @param objToChange Object: the object to be modified\r\n     * @param path string: The path where to find object to be modified\r\n     * @param index number: index\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    static applySubPolicyDelete(objToChange, path, index, subPolicy) {\r\n        let arrayPath = path.split(subPolicy.subkeySeparatorParameterValue);\r\n        let length = arrayPath.length;\r\n        if (index + 1 == length) {\r\n            // delete key\r\n            delete objToChange[arrayPath[index]];\r\n        }\r\n        else {\r\n            //recursive call to navigate to property\r\n            C8oFullSyncCbl.applySubPolicyDelete(objToChange[arrayPath[index]], path, index + 1, subPolicy);\r\n        }\r\n    }\r\n    /**\r\n     * Recursive function that browse object to be modified and apply override\r\n     *\r\n     * @param objToChange Object: the object to be modified\r\n     * @param path string: The path where to find object to be modified\r\n     * @param index number: index\r\n     * @param source Object: the object posted\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    static applySubPolicyOverride(objToChange, path, index, source, subPolicy) {\r\n        let arrayPath = path.split(subPolicy.subkeySeparatorParameterValue);\r\n        let length = arrayPath.length;\r\n        if (index + 1 == length) {\r\n            // change key\r\n            // user has not given object to override\r\n            if (source == undefined) {\r\n            }\r\n            else if (source[arrayPath[index]] != null) {\r\n                objToChange[arrayPath[index]] = source[arrayPath[index]];\r\n            }\r\n        }\r\n        else {\r\n            //recursive call to navigate to property\r\n            if (source != undefined) {\r\n                if (objToChange == undefined) {\r\n                    objToChange = {};\r\n                }\r\n                C8oFullSyncCbl.applySubPolicyOverride(objToChange[arrayPath[index]], path, index + 1, source[arrayPath[index]], subPolicy);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Global function that will apply sub policy for merge\r\n     *\r\n     * @param override boolean: if we have to perform override sub policy or not\r\n     * @param source Object: the object posted\r\n     * @param objToChange Object: the object to be modified\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    static applySubPolicyForMerge(override, source, objToChange, subPolicy) {\r\n        for (let elem of subPolicy.fullsyncPolicySubMerge) {\r\n            switch (elem.value) {\r\n                case \"override\":\r\n                    if (override) {\r\n                        C8oFullSyncCbl.applySubPolicyOverride(objToChange, elem.key, 0, source, subPolicy);\r\n                    }\r\n                    break;\r\n                case \"delete\":\r\n                    C8oFullSyncCbl.applySubPolicyDelete(objToChange, elem.key, 0, subPolicy);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    static mergeProperties(newProperties, oldProperties, useMergePolicy = \"none\") {\r\n        for (let i = 0; i < Object.keys(oldProperties).length; i++) {\r\n            const oldPropertyKey = Object.keys(oldProperties)[i];\r\n            const oldPropertyValue = oldProperties[Object.keys(oldProperties)[i]];\r\n            // Checks if the new document contains the same key\r\n            if (newProperties[oldPropertyKey] !== null && newProperties[oldPropertyKey] !== undefined) {\r\n                const newDocumentValue = newProperties[oldPropertyKey];\r\n                if (Object.prototype.toString.call(newDocumentValue) === \"[object Array]\" && Object.prototype.toString.call(oldPropertyValue) === \"[object Array]\") {\r\n                    C8oFullSyncCbl.mergeArrayProperties(newDocumentValue, oldPropertyValue);\r\n                }\r\n                else if (typeof (newDocumentValue) === \"object\" && typeof (oldPropertyValue) === \"object\") {\r\n                    C8oFullSyncCbl.mergeProperties(newDocumentValue, oldPropertyValue);\r\n                }\r\n                else {\r\n                    // If the new document has the same key but its value is not the same type than the old one or if their type are \"simple\"\r\n                    // Does nothing cause the right value is the new one\r\n                }\r\n            }\r\n            else {\r\n                // If the new document does not contain the key then adds it\r\n                newProperties[oldPropertyKey] = oldPropertyValue;\r\n            }\r\n        }\r\n    }\r\n    static mergeArrayProperties(newArray, oldArray) {\r\n        const newArraySize = newArray.length;\r\n        const oldArraySize = oldArray.length;\r\n        for (let i = 0; i < oldArraySize; i++) {\r\n            let newArrayValue = null;\r\n            if (i < newArraySize) {\r\n                newArrayValue = newArray[i];\r\n            }\r\n            const oldArrayValue = oldArray[i];\r\n            if (newArrayValue !== null) {\r\n                if (newArrayValue instanceof Array && oldArrayValue instanceof Array) {\r\n                    C8oFullSyncCbl.mergeArrayProperties(newArrayValue, oldArrayValue);\r\n                }\r\n                else if (typeof (newArrayValue) === \"object\" && typeof (oldArrayValue) === \"object\") {\r\n                    C8oFullSyncCbl.mergeProperties(newArrayValue, oldArrayValue);\r\n                }\r\n                else {\r\n                    // If the new array value is not the same type than the old one or if their type are \"simple\"\r\n                    // Does nothing cause the right value is the new one\r\n                }\r\n            }\r\n            else {\r\n                // If the new array value is null then it means that it size is reach so we can add objects at its end\r\n                newArray.push(oldArrayValue);\r\n            }\r\n        }\r\n    }\r\n    //noinspection JSUnusedLocalSymbols\r\n    async getDocucmentFromDatabase(c8o, databaseName, documentId) {\r\n        return new Promise(async (resolve, reject) => {\r\n            let c8oFullSyncDatabase;\r\n            try {\r\n                c8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n            }\r\n            catch (err) {\r\n                reject(new C8oException(C8oExceptionMessage.fullSyncGetOrCreateDatabase(databaseName), err));\r\n            }\r\n            c8oFullSyncDatabase.getdatabase().get(documentId).then((result) => {\r\n                resolve(result);\r\n            });\r\n        });\r\n    }\r\n    async overrideDocument(document, properties, databaseName) {\r\n        properties[C8oFullSync.FULL_SYNC__REV] = document._rev;\r\n        let c8oFullSyncDatabase;\r\n        try {\r\n            c8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        }\r\n        catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.fullSyncGetOrCreateDatabase(databaseName));\r\n        }\r\n        c8oFullSyncDatabase.getdatabase().put(properties)\r\n            .catch((err) => {\r\n            throw new C8oException(err.message, err);\r\n        });\r\n    }\r\n    async getResponseFromLocalCache(c8oCallRequestIdentifier) {\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(C8oCore.LOCAL_CACHE_DATABASE_NAME, true);\r\n        let localCacheDocument = null;\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(c8oCallRequestIdentifier).then((result) => {\r\n                localCacheDocument = result;\r\n                const response = JSON.stringify(localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE]);\r\n                const responseType = localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE];\r\n                const expirationDate = localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE];\r\n                let responseString = null;\r\n                let responseTypeString = null;\r\n                let expirationDateNumber = -1;\r\n                if (response != null) {\r\n                    if (typeof response === \"string\") {\r\n                        responseString = response;\r\n                    }\r\n                    else {\r\n                        reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                    }\r\n                }\r\n                if (responseType != null) {\r\n                    if (typeof responseType === \"string\") {\r\n                        responseTypeString = responseType;\r\n                    }\r\n                    else {\r\n                        reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                    }\r\n                }\r\n                if (expirationDate != null) {\r\n                    if (typeof expirationDate === \"number\") {\r\n                        expirationDateNumber = expirationDate;\r\n                        const currentTime = new Date().getTime();\r\n                        if (expirationDateNumber < currentTime) {\r\n                            reject(new C8oUnavailableLocalCacheException(C8oExceptionMessage.timeToLiveExpired()));\r\n                        }\r\n                    }\r\n                    else {\r\n                        reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                    }\r\n                }\r\n                resolve(new C8oLocalCacheResponse(responseString, responseTypeString, expirationDateNumber));\r\n            }).catch((err) => {\r\n                if (err.status === 404) {\r\n                    resolve(new C8oUnavailableLocalCacheException(C8oExceptionMessage.localCacheDocumentJustCreated(), err));\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async saveResponseToLocalCache(c8oCallRequestIdentifier, localCacheResponse) {\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(C8oCore.LOCAL_CACHE_DATABASE_NAME, true);\r\n        return new Promise((resolve) => {\r\n            fullSyncDatabase.getdatabase.get(c8oCallRequestIdentifier).then((localCacheDocument) => {\r\n                const properties = {};\r\n                properties[C8oFullSync.FULL_SYNC__ID] = c8oCallRequestIdentifier;\r\n                properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE] = localCacheResponse.getResponse();\r\n                properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE] = localCacheResponse.getResponseType();\r\n                if (localCacheResponse.getExpirationDate() > 0) {\r\n                    properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE] = localCacheResponse.getExpirationDate();\r\n                }\r\n                const currentRevision = localCacheDocument._rev;\r\n                if (currentRevision !== null) {\r\n                    properties[C8oFullSyncCbl.FULL_SYNC__REV] = currentRevision;\r\n                }\r\n                fullSyncDatabase.getdatabase.put(properties).then((result) => {\r\n                    resolve(result);\r\n                });\r\n            }).catch((error) => {\r\n                if (error.status === 404) {\r\n                    const properties = {};\r\n                    properties[C8oFullSync.FULL_SYNC__ID] = c8oCallRequestIdentifier;\r\n                    properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE] = localCacheResponse.getResponse();\r\n                    properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE] = localCacheResponse.getResponseType();\r\n                    if (localCacheResponse.getExpirationDate() > 0) {\r\n                        properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE] = localCacheResponse.getExpirationDate();\r\n                    }\r\n                    fullSyncDatabase.getdatabase.put(properties).then((result) => {\r\n                        resolve(result);\r\n                    });\r\n                }\r\n                else {\r\n                    resolve(error);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async addFullSyncChangeListener(db, listener, parameters = {}) {\r\n        if (db === null || db === \"\") {\r\n            db = this.c8o.defaultDatabaseName;\r\n        }\r\n        const listeners = [];\r\n        if (this.fullSyncChangeListeners[db] != null) {\r\n            listeners[0] = this.fullSyncChangeListeners[db];\r\n        }\r\n        else {\r\n            listeners[0] = [];\r\n            this.fullSyncChangeListeners[db] = listeners[0];\r\n            if (parameters[\"since\"] == undefined) {\r\n                parameters[\"since\"] = \"now\";\r\n            }\r\n            if (parameters[\"live\"] == undefined) {\r\n                parameters[\"live\"] = true;\r\n            }\r\n            if (parameters[\"include_docs\"] == undefined) {\r\n                parameters[\"include_docs\"] = true;\r\n            }\r\n            //noinspection UnnecessaryLocalVariableJS\r\n            const evtHandler = (await this.getOrCreateFullSyncDatabase(db)).getdatabase\r\n                .changes(parameters).on(\"change\", function (change) {\r\n                const changes = {};\r\n                const docs = [];\r\n                // docs[\"isExternal\"] = false;\r\n                const doc = {};\r\n                doc[\"id\"] = change.doc._id;\r\n                doc[\"rev\"] = change.doc._rev;\r\n                doc[\"isConflict\"] = change.doc._conflicts;\r\n                if (change.source != null) {\r\n                    doc[\"sourceUrl\"] = change.source;\r\n                }\r\n                docs.push(doc);\r\n                changes[\"changes\"] = docs;\r\n                for (const handler of listeners[0]) {\r\n                    if (handler !== undefined) {\r\n                        handler.onChange(changes);\r\n                    }\r\n                }\r\n            });\r\n            this.cblChangeListeners[db] = evtHandler;\r\n        }\r\n        listeners[0].push(listener);\r\n    }\r\n    async removeFullSyncChangeListener(db, listener) {\r\n        if (db === null || db === \"\") {\r\n            db = this.c8o.defaultDatabaseName;\r\n        }\r\n        if (this.fullSyncChangeListeners[db] != null) {\r\n            const listeners = this.fullSyncChangeListeners[db];\r\n            for (const list in listeners) {\r\n                if (listeners[list] === listener) {\r\n                    delete listeners[list];\r\n                }\r\n            }\r\n            if (listeners.length === 0 || listeners == null) {\r\n                (await this.getOrCreateFullSyncDatabase(db)).getdatabase.cancel();\r\n                this.cblChangeListeners[db].cancel();\r\n                delete this.fullSyncChangeListeners[db];\r\n                delete this.cblChangeListeners[db];\r\n            }\r\n        }\r\n    }\r\n}\r\nC8oFullSyncCbl.ATTACHMENT_PROPERTY_KEY_CONTENT_URL = \"content_url\";\n\nclass C8oLocalCache {\r\n    constructor(priority, ttl = -1, enabled = true) {\r\n        if (priority == null) {\r\n            throw new C8oException(\"Local Cache priority cannot be null\");\r\n        }\r\n        this.priority = priority;\r\n        this.ttl = ttl;\r\n        this.enabled = enabled;\r\n    }\r\n}\r\nC8oLocalCache.PARAM = \"__localCache\";\n\nclass C8oTranslator {\r\n    static stringToJSON(jsonValueString) {\r\n        return JSON.parse(jsonValueString);\r\n    }\r\n}\n\n/**\r\n * Thrown during an HTTP request.\r\n */\r\nclass C8oHttpRequestException extends C8oException {\r\n    constructor(message, cause = null) {\r\n        super(message, cause);\r\n        this.originalException = cause;\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oHttpRequestException.prototype);\r\n    }\r\n}\n\nclass C8oCallTask {\r\n    constructor(c8o, parameters, c8oResponseListener, c8oExceptionListener) {\r\n        this.c8o = c8o;\r\n        this.parameters = parameters;\r\n        this.c8oResponseListener = c8oResponseListener;\r\n        this.c8oExceptionListener = c8oExceptionListener;\r\n        c8o.log.logMethodCall(\"C8oCallTask\", parameters, c8oResponseListener, c8oExceptionListener);\r\n    }\r\n    get parameters() {\r\n        return this._parameters;\r\n    }\r\n    set parameters(value) {\r\n        this._parameters = value;\r\n    }\r\n    // called execute() in others SDK...\r\n    run() {\r\n        try {\r\n            this.handleRequest().then((response) => {\r\n                this.handleResponse(response);\r\n            }).catch((error) => {\r\n                this.c8oExceptionListener.onException(error, this.parameters);\r\n            });\r\n        }\r\n        catch (error) {\r\n            this.c8oExceptionListener.onException(error, this.parameters);\r\n        }\r\n    }\r\n    executeFromLive() {\r\n        delete this.parameters[C8oCore.FS_LIVE];\r\n        this.parameters[C8oCore.ENGINE_PARAMETER_FROM_LIVE] = true;\r\n        this.run();\r\n    }\r\n    async handleRequest() {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const isFullSyncRequest = C8oFullSync.isFullSyncRequest(this.parameters);\r\n                if (isFullSyncRequest) {\r\n                    this.c8o.log._trace(\"Is FullSync request\");\r\n                    // FS_LIVE\r\n                    const liveid = C8oUtilsCore.getParameterStringValue(this.parameters, C8oCore.FS_LIVE, false);\r\n                    if (liveid !== null) {\r\n                        const dbName = C8oUtilsCore.getParameterStringValue(this.parameters, C8oCore.ENGINE_PARAMETER_PROJECT, true).substring(C8oFullSync.FULL_SYNC_PROJECT.length);\r\n                        this.c8o.addLive(liveid, dbName, this);\r\n                    }\r\n                    await this.c8o.c8oFullSync.handleFullSyncRequest(this.parameters, this.c8oResponseListener)\r\n                        .then((result) => {\r\n                        resolve(result);\r\n                    })\r\n                        .catch((error) => {\r\n                        if (error instanceof C8oException) {\r\n                            reject(error);\r\n                        }\r\n                        else {\r\n                            reject(new C8oException(C8oExceptionMessage.handleFullSyncRequest(), error));\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    let responseType = \"\";\r\n                    if (this.c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                        responseType = C8oCore.RESPONSE_TYPE_JSON;\r\n                    }\r\n                    else {\r\n                        // Return an Exception because the C8oListener used is unknown\r\n                        reject(new C8oException(C8oExceptionMessage.wrongListener(this.c8oResponseListener)));\r\n                    }\r\n                    let c8oCallRequestIdentifier = null;\r\n                    const localCache = C8oUtilsCore.getParameterObjectValue(this.parameters, C8oLocalCache.PARAM, false);\r\n                    let localCacheEnabled = false;\r\n                    if (localCache != null) {\r\n                        if (localCacheEnabled !== undefined) {\r\n                            delete this.parameters[C8oLocalCache.PARAM];\r\n                            localCacheEnabled = localCache.enabled;\r\n                            if (localCacheEnabled) {\r\n                                try {\r\n                                    c8oCallRequestIdentifier = C8oUtilsCore.identifyC8oCallRequest(this.parameters, responseType);\r\n                                }\r\n                                catch (error) {\r\n                                    reject(new C8oException(C8oExceptionMessage.serializeC8oCallRequest(), error));\r\n                                }\r\n                                // here we are not testing if localcahe is available.\r\n                                // if connection is not available this will generates an exception that will be caught\r\n                                if (localCache.priority.isAvailable) {\r\n                                    try {\r\n                                        const result = await this.c8o.c8oFullSync.getResponseFromLocalCache(c8oCallRequestIdentifier);\r\n                                        if (result instanceof C8oUnavailableLocalCacheException) {\r\n                                            // no entry\r\n                                        }\r\n                                        else {\r\n                                            const localCacheResponse = result;\r\n                                            if (!localCacheResponse.isExpired()) {\r\n                                                if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                                    resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                                    return;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    catch (error) {\r\n                                        if (error instanceof C8oUnavailableLocalCacheException) {\r\n                                            // no entry\r\n                                        }\r\n                                        else {\r\n                                            reject(error);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    // Get Response\r\n                    this.parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n                    this.c8oCallUrl = this.c8o.endpoint + \"/.\" + responseType;\r\n                    let params = new Object();\r\n                    params = Object.assign(params, this.parameters);\r\n                    await this.c8o.httpInterface.handleRequest(this.c8oCallUrl, params, this.c8oResponseListener).catch(async (error) => {\r\n                        if (localCacheEnabled) {\r\n                            await this.c8o.c8oFullSync.getResponseFromLocalCache(c8oCallRequestIdentifier).then((localCacheResponse) => {\r\n                                try {\r\n                                    if (!localCacheResponse.isExpired()) {\r\n                                        if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                            resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                        }\r\n                                    }\r\n                                }\r\n                                catch (error) {\r\n                                    // no entry\r\n                                }\r\n                            });\r\n                        }\r\n                        if (error.status === 0) {\r\n                            reject(new C8oHttpRequestException(\"ERR_INTERNET_DISCONNECTED\", error));\r\n                        }\r\n                        else {\r\n                            reject(error);\r\n                        }\r\n                    }).then(async (result) => {\r\n                        if (result !== undefined) {\r\n                            let isErrorR = result[\"error\"] != undefined ? result[\"error\"][\"code\"] != undefined ? result[\"error\"][\"message\"] != undefined ? result[\"error\"][\"details\"] != undefined ? true : false : false : false : false;\r\n                            let isErrorDoc = result[\"document\"] != undefined ? result[\"document\"][\"error\"] != undefined ? result[\"document\"][\"error\"][\"code\"] != undefined ? result[\"document\"][\"error\"][\"message\"] != undefined ? result[\"document\"][\"error\"][\"details\"] != undefined ? true : false : false : false : false : false;\r\n                            let isError = (isErrorR || isErrorDoc);\r\n                            if (isError) {\r\n                                if (localCacheEnabled) {\r\n                                    await this.c8o.c8oFullSync.getResponseFromLocalCache(c8oCallRequestIdentifier).then((localCacheResponse) => {\r\n                                        try {\r\n                                            if (!localCacheResponse.isExpired()) {\r\n                                                if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                                    resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        catch (error) {\r\n                                            // no entry\r\n                                        }\r\n                                    });\r\n                                }\r\n                                if (this.c8o.errorConvertigoIntoFail) {\r\n                                    reject(result);\r\n                                }\r\n                                else {\r\n                                    resolve(result);\r\n                                }\r\n                            }\r\n                            else {\r\n                                let response;\r\n                                let responseString;\r\n                                if (this.c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                                    try {\r\n                                        try {\r\n                                            responseString = result;\r\n                                        }\r\n                                        catch (error) {\r\n                                            reject(new C8oException(C8oExceptionMessage.parseInputStreamToString(), error));\r\n                                        }\r\n                                        response = result;\r\n                                    }\r\n                                    catch (error) {\r\n                                        reject(error);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    reject(new C8oException(C8oExceptionMessage.wrongListener(this.c8oResponseListener)));\r\n                                }\r\n                                if (localCacheEnabled) {\r\n                                    try {\r\n                                        let expirationDate = -1;\r\n                                        if (localCache.ttl > 0) {\r\n                                            expirationDate = localCache.ttl + (new Date).getTime();\r\n                                        }\r\n                                        const localCacheResponse = new C8oLocalCacheResponse(responseString, responseType, expirationDate);\r\n                                        const p1 = await this.c8o.c8oFullSync.saveResponseToLocalCache(c8oCallRequestIdentifier, localCacheResponse);\r\n                                        Promise.all([p1])\r\n                                            .then(() => {\r\n                                            resolve(response);\r\n                                        });\r\n                                    }\r\n                                    catch (error) {\r\n                                        reject(new C8oException(C8oExceptionMessage.saveResponseToLocalCache()));\r\n                                    }\r\n                                }\r\n                                resolve(response);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n    handleResponse(result) {\r\n        try {\r\n            if (this.c8oResponseListener === null) {\r\n                return;\r\n            }\r\n            else if (result instanceof Error || result instanceof C8oException) {\r\n                this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, result);\r\n            }\r\n            else if (result instanceof Object) {\r\n                this.c8o.log.logC8oCallJSONResponse(result, this.c8oCallUrl, this.parameters);\r\n                this.c8oResponseListener.onJsonResponse(result, this.parameters);\r\n            }\r\n            else {\r\n                this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, new C8oException(C8oExceptionMessage.wrongResult(result)));\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, error);\r\n        }\r\n    }\r\n}\n\nclass C8oFullSyncChangeListener {\r\n    constructor(change) {\r\n        this._onchange = change;\r\n    }\r\n    onChange(changes) {\r\n        this._onchange(changes);\r\n    }\r\n}\n\nclass C8oPromise {\r\n    constructor(c8o) {\r\n        this.c8o = c8o;\r\n    }\r\n    async() {\r\n        return new Promise((resolve, reject) => {\r\n            this.then((response, parameters) => {\r\n                resolve(response);\r\n                return null;\r\n            }).fail((error, parameters) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    toObservable() {\r\n        return new Observable((observer) => {\r\n            this.then((response, parameters) => {\r\n                if (parameters[\"__live\"] == true || parameters[\"continuous\"] == true) {\r\n                    observer.next({ response: response, parameters: parameters });\r\n                }\r\n                else {\r\n                    observer.next({ response: response, parameters: parameters });\r\n                    observer.complete();\r\n                }\r\n                return null;\r\n            })\r\n                .progress((progress) => {\r\n                observer.next(progress);\r\n            })\r\n                .fail((error, parameters) => {\r\n                observer.error(error);\r\n            });\r\n        });\r\n    }\r\n    then(c8oOnResponse) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.then(c8oOnResponse);\r\n        }\r\n        else {\r\n            this.c8oResponse = c8oOnResponse;\r\n            this.nextPromise = new C8oPromise(this.c8o);\r\n            if (this.lastFailure != null) {\r\n                this.nextPromise.lastFailure = this.lastFailure;\r\n                this.nextPromise.lastParameters = this.lastParameters;\r\n            }\r\n            if (this.lastResponse != null) {\r\n                this._onResponse();\r\n            }\r\n            return this.nextPromise;\r\n        }\r\n    }\r\n    progress(c8oOnProgress) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.progress(c8oOnProgress);\r\n        }\r\n        else {\r\n            this.c8oProgress = c8oOnProgress;\r\n            this.nextPromise = new C8oPromise(this.c8o);\r\n            return this.nextPromise;\r\n        }\r\n    }\r\n    fail(c8oOnFail) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.fail(c8oOnFail);\r\n        }\r\n        else {\r\n            this.c8oFail = c8oOnFail;\r\n            this.nextPromise = new C8oPromise(this.c8o);\r\n            if (this.lastFailure != null) {\r\n                this.onFailure(this.lastFailure, this.lastParameters);\r\n            }\r\n            return this.nextPromise;\r\n        }\r\n    }\r\n    _onResponse() {\r\n        try {\r\n            if (this.c8oResponse != null) {\r\n                const promise = new Array(0);\r\n                promise.push(this.c8oResponse(this.lastResponse, this.lastParameters));\r\n                if (promise[0] != null) {\r\n                    if (this.nextPromise != null) {\r\n                        let lastPromise = promise[0];\r\n                        while (lastPromise.nextPromise != null) {\r\n                            lastPromise = lastPromise.nextPromise;\r\n                        }\r\n                        lastPromise.nextPromise = this.nextPromise;\r\n                    }\r\n                    this.nextPromise = promise[0];\r\n                }\r\n                else if (this.nextPromise != null) {\r\n                    this.nextPromise.onResponse(this.lastResponse, this.lastParameters);\r\n                }\r\n            }\r\n            else if (this.nextPromise != null) {\r\n                this.nextPromise.onResponse(this.lastResponse, this.lastParameters);\r\n            }\r\n            else {\r\n                // Response received and no handler\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.onFailure(error, this.lastParameters);\r\n        }\r\n    }\r\n    onResponse(response, parameters) {\r\n        if ((this.lastResponse != null || this.lastResponse !== undefined) && parameters[C8oCore.ENGINE_PARAMETER_FROM_LIVE] === undefined) {\r\n            if (this.nextPromise != null || this.nextPromise !== undefined) {\r\n                this.nextPromise.onResponse(response, parameters);\r\n            }\r\n        }\r\n        else {\r\n            this.lastResponse = response;\r\n            this.lastParameters = parameters;\r\n            this._onResponse();\r\n        }\r\n    }\r\n    onProgress(progress) {\r\n        if (this.c8oProgress != null) {\r\n            this.c8oProgress(progress);\r\n        }\r\n        else if (this.nextPromise != null) {\r\n            this.nextPromise.onProgress(progress);\r\n        }\r\n    }\r\n    onFailure(error, parameters) {\r\n        this.lastFailure = error;\r\n        this.lastParameters = parameters;\r\n        if (this.c8oFail != null) {\r\n            this.c8oFail(this.lastFailure, parameters);\r\n        }\r\n        if (this.nextPromise != null) {\r\n            this.nextPromise.onFailure(this.lastFailure, parameters);\r\n        }\r\n    }\r\n}\n\nclass C8oExceptionListener {\r\n    constructor(onException) {\r\n        this.onException = onException;\r\n    }\r\n}\n\nclass C8oNetworkStatus {\r\n}\r\nC8oNetworkStatus.Reachable = \"Reachable\";\r\nC8oNetworkStatus.NotReachable = \"NotReachable\";\r\nC8oNetworkStatus.Offline = \"Offline\";\n\nclass C8oManagerNetwork {\r\n    constructor(c8o) {\r\n        this._listen = false;\r\n        this.c8o = c8o;\r\n    }\r\n    /**\r\n     * init NetworkManager\r\n     */\r\n    async init() {\r\n        this.listen();\r\n        let reachable = await this.checkReachable();\r\n        let online = window.navigator.onLine;\r\n        this.status = (reachable == true ? C8oNetworkStatus.Reachable : (online == true ? C8oNetworkStatus.NotReachable : C8oNetworkStatus.Offline));\r\n    }\r\n    /**\r\n     * Set network status, and notify if its had change\r\n     * @params c8oNetworkStatus : C8oNetworkStatus\r\n     */\r\n    set status(c8oNetworkStatus) {\r\n        // if the status has not changed do nothing\r\n        //this.c8o.log.warn(\"through set network status\")\r\n        if (this._status == c8oNetworkStatus) {\r\n            return;\r\n        }\r\n        this._status = c8oNetworkStatus;\r\n        this.c8o.subscriber_network.next(c8oNetworkStatus);\r\n    }\r\n    /**\r\n     * get network status\r\n     *\r\n     * @returns C8oNetworkStatus\r\n     */\r\n    get status() {\r\n        return this._status;\r\n    }\r\n    async listen() {\r\n        if (this._listen == false) {\r\n            this._listen = true;\r\n            window.addEventListener(\"online\", () => {\r\n                this.processOnline();\r\n            }, false);\r\n            window.addEventListener(\"offline\", () => {\r\n                this.processOffline();\r\n            }, false);\r\n            this.c8o.subscriber_network.subscribe(async (res) => {\r\n                this.c8o.log._debug(\"[handleNetworkEvents] Handle a network event: \" + res);\r\n                switch (res) {\r\n                    case C8oNetworkStatus.Reachable:\r\n                        // check session status              \r\n                        this.c8o.session.doAuthReachable();\r\n                        this.c8o.database.restartReplications(\"anonymous\");\r\n                        break;\r\n                    case C8oNetworkStatus.NotReachable:\r\n                        this.c8o.database.stopReplications(this.c8o.session.user.name);\r\n                        this.c8o.database.stopReplications(\"anonymous\");\r\n                        break;\r\n                    case C8oNetworkStatus.Offline:\r\n                        this.c8o.database.stopReplications(this.c8o.session.user.name);\r\n                        this.c8o.database.stopReplications(\"anonymous\");\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    async processOnline() {\r\n        let reachable = await this.checkReachable();\r\n        if (reachable) {\r\n            this.status = C8oNetworkStatus.Reachable;\r\n        }\r\n        else {\r\n            this.status = C8oNetworkStatus.NotReachable;\r\n        }\r\n    }\r\n    async processOffline() {\r\n        this.status = C8oNetworkStatus.Offline;\r\n    }\r\n    async checkReachable() {\r\n        try {\r\n            let r = await this.c8o.c8oLogger.logTest();\r\n            return true;\r\n        }\r\n        catch {\r\n            return false;\r\n        }\r\n    }\r\n}\n\nclass C8oSessionStatus {\r\n}\r\nC8oSessionStatus.Connected = 1;\r\nC8oSessionStatus.HasBeenConnected = 2;\r\nC8oSessionStatus.HasBeenDisconnected = 3;\r\nC8oSessionStatus.Disconnected = 4;\r\nC8oSessionStatus.Ignore = 5;\r\nC8oSessionStatus.HasBeenConnectedToAnother = 5;\n\nclass C8oReplicationStatus {\r\n    constructor(user, listener, parameters, type, authenticated, canceled, finished, fullSyncDatabase, id) {\r\n        this.user = user;\r\n        this.listener = listener;\r\n        this.parameters = parameters;\r\n        this.type = type;\r\n        this.authenticated = authenticated;\r\n        this.canceled = canceled;\r\n        this.database = fullSyncDatabase;\r\n        this.finished = finished;\r\n        this.id = id;\r\n    }\r\n}\n\nclass C8oManagerDatabase {\r\n    constructor(c8o) {\r\n        this.replications = new Object();\r\n        this.c8o = c8o;\r\n        this.mutexCreateReplication = new Semaphore(1);\r\n    }\r\n    localName(baseName, log = false) {\r\n        if (this.c8o.prefixBase) {\r\n            if (log) {\r\n                this.c8o.log._trace(\"Database will be seteed with prefix of user name\");\r\n            }\r\n            return this.c8o.session.user.name + \"_\" + baseName;\r\n        }\r\n        else {\r\n            return baseName;\r\n        }\r\n    }\r\n    get registeredReplications() {\r\n        return this.replications;\r\n    }\r\n    /**\r\n     * Register a request attaching it to the current user\r\n     * @param listener The listener for this request\r\n     * @param parameters The parameters of this request\r\n     * @param type The type of réplication (SYNC, PULL, PUSH)\r\n     */\r\n    registerRequest(listener, parameters, type, fullSyncDatabase, handler = null) {\r\n        let user = this.c8o.session.user;\r\n        if (this.replications[user.name] == null) {\r\n            this.replications[user.name] = new Array();\r\n        }\r\n        let authenticated = (this.c8o.session.status == (C8oSessionStatus.Connected || C8oSessionStatus.HasBeenConnected));\r\n        let canceled = (this.c8o.network.status != C8oNetworkStatus.Reachable);\r\n        let id = new Date().getTime() + \"_\" + (\"\" + Math.random()).substring(2);\r\n        let rep = new C8oReplicationStatus(user, listener, parameters, type, authenticated, canceled, false, fullSyncDatabase, id);\r\n        handler = () => {\r\n            rep.finished = true;\r\n        };\r\n        this.replications[user.name].push(rep);\r\n        return [canceled, handler, id];\r\n    }\r\n    cancelAndPopRequest(id) {\r\n        var user = this.c8o.session.user;\r\n        for (var i in this.replications[user.name]) {\r\n            if (this.replications[user.name][i].id == id) {\r\n                this.c8o.log._debug(\"[c8oManagerDatabase] cancelAndPopRequest => canceling  and removing replication: \" + this.replications[user.name][i].database.getdatabase.name);\r\n                let repToCancel = this.replications[user.name][i].database.syncFullSyncReplication.replication;\r\n                repToCancel.cancel();\r\n                this.replications[user.name].splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.c8o.log._debug(\"[c8oManagerDatabase] cancelAndPopRequest => done, replication still actives: \" + JSON.stringify(this.replications[user.name].map(x => x.database.getdatabase.name)));\r\n    }\r\n    cancelAllForbase(baseName) {\r\n        var user = this.c8o.session.user;\r\n        for (var i in this.replications[user.name]) {\r\n            if (this.replications[user.name][i].databaseName == baseName) {\r\n                this.replications[user.name].splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Restart all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    async restartReplications(user) {\r\n        if (this.replications[user] != undefined) {\r\n            var lastsDistinctsReps = {};\r\n            this.replications[user].forEach((rep) => { lastsDistinctsReps[rep.database.databaseName] = rep; });\r\n            this.replications[user] = Object.keys(lastsDistinctsReps).map(e => lastsDistinctsReps[e]);\r\n            for (let i in lastsDistinctsReps) {\r\n                let rep = lastsDistinctsReps[i];\r\n                if (rep.database != null) {\r\n                    if (rep.canceled == true) {\r\n                        if (rep.finished != true) {\r\n                            switch (rep.type) {\r\n                                case \"sync\":\r\n                                    this.mutexCreateReplication.acquire();\r\n                                    this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb sync \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                    let handler1 = () => {\r\n                                        rep.finished = true;\r\n                                    };\r\n                                    rep.finished = false;\r\n                                    rep.canceled = false;\r\n                                    rep.manual_canceled = false;\r\n                                    rep.database.startAllReplications(rep.parameters, rep.listener, handler1, rep.id, this.mutexCreateReplication);\r\n                                    break;\r\n                                case \"push\":\r\n                                    this.mutexCreateReplication.acquire();\r\n                                    this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb push \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                    let handler2 = () => {\r\n                                        rep.finished = true;\r\n                                    };\r\n                                    rep.finished = false;\r\n                                    rep.canceled = false;\r\n                                    rep.manual_canceled = false;\r\n                                    rep.database.startPushReplication(rep.parameters, rep.listener, handler2, rep.id, this.mutexCreateReplication);\r\n                                    break;\r\n                                case \"pull\":\r\n                                    this.mutexCreateReplication.acquire();\r\n                                    this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb pull \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                    let handler3 = () => {\r\n                                        rep.finished = true;\r\n                                    };\r\n                                    rep.canceled = false;\r\n                                    rep.finished = false;\r\n                                    rep.manual_canceled = false;\r\n                                    rep.database.startPullReplication(rep.parameters, rep.listener, handler3, rep.id, this.mutexCreateReplication);\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Stop all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    stopReplications(user) {\r\n        if (this.replications[user] != undefined) {\r\n            for (let rep of this.replications[user]) {\r\n                if (rep.database != null) {\r\n                    if (rep.finished != true) {\r\n                        switch (rep.type) {\r\n                            case \"sync\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb sync \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelSyncReplication();\r\n                                break;\r\n                            case \"push\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb push \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelPushReplication();\r\n                                break;\r\n                            case \"pull\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb pull \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelPullReplication();\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Remove state an delte top all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    removeReplications(user) {\r\n        this.stopReplications(user);\r\n        delete this.replications[user];\r\n        this.c8o.log._trace(\"[removeReplications] replications for user \" + user + \"has been removed and stopped\");\r\n    }\r\n}\n\nclass C8oManagerLogin {\r\n    constructor(c8o) {\r\n        this.c8o = c8o;\r\n        this.mutexL = new Semaphore(1);\r\n    }\r\n    async setRequestLogin(url, parameters, headers, id) {\r\n        if (url != null && parameters != null && headers != null) {\r\n            this.requestLogin = { url: url, parameters: parameters, headers: headers };\r\n        }\r\n        if (id != null && this.requestLogin != undefined) {\r\n            /**  must encrypt and save requestLogin there **/\r\n            //define buffer to save\r\n            const data = Buffer.from(JSON.stringify(this.requestLogin), 'utf-8');\r\n            // generate random iv and store it\r\n            const iv = crypto.getRandomValues(new Uint8Array(16));\r\n            window[\"localStorage\"][\"setItem\"](\"_c8o_iv\", Buffer.from(iv).toString('utf-8'));\r\n            // get key and hash it 128 bits\r\n            const key = C8oUtilsCore.MD5ArrayBuffer(id);\r\n            // defined key\r\n            const key_encoded = await crypto.subtle.importKey(\"raw\", key.buffer, 'AES-CTR', false, [\"encrypt\", \"decrypt\"]);\r\n            // encrypt data\r\n            const encrypted_content = await window.crypto.subtle.encrypt({\r\n                name: \"AES-CTR\",\r\n                counter: iv,\r\n                length: 128\r\n            }, key_encoded, data);\r\n            // store encrypted data\r\n            window.localStorage.setItem(\"_c8o_secret\", Buffer.from(encrypted_content).toString('utf-8'));\r\n        }\r\n    }\r\n    async defineRequestLogin(id) {\r\n        //if requestLogin is'nt into this.requestLogin, get it and assign it to requestLogin from local encrypted data.\r\n        try {\r\n            if (this.requestLogin == undefined && window[\"localStorage\"][\"getItem\"](\"_c8o_secret\") != undefined) {\r\n                const iv = Buffer.from(window[\"localStorage\"][\"getItem\"](\"_c8o_iv\"), 'utf-8');\r\n                const key = C8oUtilsCore.MD5ArrayBuffer(id);\r\n                const encrypted_content = Buffer.from(window.localStorage.getItem(\"_c8o_secret\"), 'utf-8');\r\n                const key_encoded = await crypto.subtle.importKey(\"raw\", key.buffer, 'AES-CTR', false, [\"encrypt\", \"decrypt\"]);\r\n                const decrypted_content = await window.crypto.subtle.decrypt({\r\n                    name: \"AES-CTR\",\r\n                    counter: iv,\r\n                    length: 128\r\n                }, key_encoded, encrypted_content);\r\n                this.requestLogin = JSON.parse(Buffer.from(decrypted_content).toString('utf-8'));\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.c8o.log.error(\"[C8oManagerLogin][defineRequestLogin], failed to define request login\", e);\r\n        }\r\n    }\r\n    doLogin() {\r\n        return new Promise((res) => {\r\n            this.mutexL.acquire();\r\n            if (!(this.c8o.session.status == C8oSessionStatus.Connected || this.c8o.session.status == C8oSessionStatus.HasBeenConnected)) {\r\n                if (this.requestLogin != undefined) {\r\n                    let resolve = (response) => {\r\n                        if (response.headers.get(\"X-Convertigo-Authenticated\") != undefined) {\r\n                            this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins works\");\r\n                            this.c8o.subscriber_login.next({ status: true, response: response.body, error: null });\r\n                            res({ status: true, urlReq: this.requestLogin.url, parameters: this.requestLogin.parameters, headers: this.requestLogin.headers, response: response.response });\r\n                        }\r\n                        else {\r\n                            this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins failed\");\r\n                            res({ status: false });\r\n                            this.c8o.subscriber_login.next({ status: false, response: response.body, error: \"error, we are not authenticated\" });\r\n                            //this.c8o.subscriber_session.next();\r\n                        }\r\n                        this.mutexL.release();\r\n                    };\r\n                    let reject = (err) => {\r\n                        this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins failed\");\r\n                        res({ status: false });\r\n                        this.c8o.subscriber_login.next({ status: false, response: null, error: err });\r\n                        this.c8o.subscriber_session.next(null);\r\n                        this.mutexL.release();\r\n                    };\r\n                    this.c8o.httpInterface.execHttpPosts(this.requestLogin.url, this.requestLogin.parameters, this.requestLogin.headers, resolve, reject, true);\r\n                }\r\n            }\r\n            else {\r\n                this.c8o.log.warn(\"Into else\");\r\n            }\r\n        });\r\n    }\r\n}\n\nclass C8oSessionUser {\r\n    constructor(user = null) {\r\n        this.authenticated = false;\r\n        this.groups = [];\r\n        this.maxInactive = 0;\r\n        this.sessionId = \"\";\r\n        this.name = \"anonymous\";\r\n        this.hash = \"\";\r\n        if (user != null) {\r\n            this.authenticated = user[\"authenticated\"] == true;\r\n            this.groups = user[\"groups\"] != undefined ? user[\"groups\"] : [];\r\n            this.maxInactive = user[\"maxInactive\"] != undefined ? user[\"maxInactive\"] : 0;\r\n            this.sessionId = user[\"session\"] != undefined ? user[\"session\"] : \"\";\r\n            this.name = user[\"user\"] != undefined ? user[\"user\"] : \"\";\r\n        }\r\n    }\r\n}\n\nclass C8oManagerSession {\r\n    constructor(c8o) {\r\n        this.resumeListener = undefined;\r\n        // When the app begins, session is not connected*\r\n        this.c8o = c8o;\r\n        this._status = C8oSessionStatus.Disconnected;\r\n        this.loginManager = new C8oManagerLogin(c8o);\r\n        this.ignored = 0;\r\n        this._user = new C8oSessionUser();\r\n        this.mutex = new Semaphore(1);\r\n        this.mutexNetwork = new Semaphore(10000000000);\r\n        this.mutexCheckSession = new Semaphore(1);\r\n    }\r\n    /**\r\n     * Get status of the session\r\n     *\r\n     * @returns: C8oSessionStatus\r\n     *\r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    get status() {\r\n        return this._status;\r\n    }\r\n    set status(status) {\r\n        this._status = status;\r\n    }\r\n    /**\r\n     * Get status of the session\r\n     *\r\n     * @returns: C8oSessionStatus\r\n     *\r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    get user() {\r\n        return this._user;\r\n    }\r\n    /**\r\n     * Get previous status of the session\r\n     *\r\n     * @returns: C8oSessionStatus\r\n     *\r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    get olduser() {\r\n        return this._olduser;\r\n    }\r\n    set user(user) {\r\n        this._olduser = user;\r\n        this._user = user;\r\n    }\r\n    async setInitalState() {\r\n        try {\r\n            const status = await this.c8o.httpInterface.getUserServiceStatus(true);\r\n            await this.sort(null, null, null, null, null, null, status);\r\n        }\r\n        catch (e) {\r\n            console.error(\"error getiing setInitalState\", e);\r\n        }\r\n    }\r\n    async getInitalState() {\r\n        try {\r\n            const resp = await this.c8o.httpInterface.getUserServiceStatus(true);\r\n            if (resp.body.authenticated) {\r\n                this.sessId = resp.body.session;\r\n                await this.loginManager.defineRequestLogin(resp.body.session);\r\n                this.user = new C8oSessionUser(resp.body);\r\n                this.status = C8oSessionStatus.HasBeenConnected;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.c8o.log.error(\"[C8oManagerSession][getInitalState] Impossible to define user service status\", e);\r\n        }\r\n    }\r\n    async sort(response, headers, urlReq, parametersReq, headersReq, resolve, status) {\r\n        // update _status if this is a sequence\r\n        return new Promise(async (resolve, reject) => {\r\n            let _status;\r\n            if (!status) {\r\n                _status = await this.defineSessionStatus(response, headers, urlReq, parametersReq, headersReq);\r\n            }\r\n            else {\r\n                _status = await this.defineSessionStatus(status, headers, urlReq, parametersReq, headersReq, status);\r\n            }\r\n            switch (_status) {\r\n                case C8oSessionStatus.Connected:\r\n                    this.ignored = 0;\r\n                    resolve(false);\r\n                    break;\r\n                case C8oSessionStatus.HasBeenConnectedToAnother:\r\n                    // if we called this function from setInitalState\r\n                    if (response == null && headers == null) {\r\n                        this.checkSession(headers, 0, resolve, status);\r\n                    }\r\n                    else {\r\n                        this.checkSession(headers, 0, resolve);\r\n                    }\r\n                    this.c8o.subscriber_session_changed.next(null);\r\n                    break;\r\n                case C8oSessionStatus.HasBeenConnected:\r\n                    // if we called this function from setInitalState\r\n                    if (response == null && headers == null) {\r\n                        this.checkSession(headers, 0, resolve, status);\r\n                    }\r\n                    else {\r\n                        this.checkSession(headers, 0, resolve);\r\n                    }\r\n                    break;\r\n                case C8oSessionStatus.HasBeenDisconnected:\r\n                    // if we called this function from setInitalState\r\n                    if (response == null && headers == null) {\r\n                        // do nothing\r\n                        resolve(false);\r\n                    }\r\n                    else {\r\n                        if (this.c8o.keepSessionAlive) {\r\n                            let objParams;\r\n                            try {\r\n                                objParams = parametersReq.split('&')\r\n                                    .reduce((a, c) => {\r\n                                    let [key, value] = c.split('=');\r\n                                    a[key] = value;\r\n                                    return a;\r\n                                }, {});\r\n                            }\r\n                            catch (e) {\r\n                                objParams = {};\r\n                            }\r\n                            if (!(objParams[C8oCore.SEQ_AUTO_LOGIN_OFF] === \"true\")) {\r\n                                this.loginManager.doLogin()\r\n                                    .then((res) => {\r\n                                    resolve(true);\r\n                                });\r\n                            }\r\n                            else {\r\n                                this.c8o.database.stopReplications(this.user.name);\r\n                                this._user = new C8oSessionUser();\r\n                                this.c8o.subscriber_session.next(null);\r\n                                resolve(false);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.c8o.database.stopReplications(this.user.name);\r\n                            this._user = new C8oSessionUser();\r\n                            this.c8o.subscriber_session.next(null);\r\n                            resolve(false);\r\n                        }\r\n                    }\r\n                    break;\r\n                case C8oSessionStatus.Disconnected:\r\n                    resolve(false);\r\n                    break;\r\n                case C8oSessionStatus.Ignore:\r\n                    this.ignored = this.ignored + 1;\r\n                    if (this.ignored >= 20) {\r\n                        this._status = C8oSessionStatus.Connected;\r\n                        this.c8o.log._trace(\"[C8oManagerSession] We ingored 20, no setting _status Connected\");\r\n                    }\r\n                    else {\r\n                        this.c8o.log._trace(\"[C8oManagerSession] Ignore this request to analyze loss of session, we ignored \" + this.ignored + \" at total\");\r\n                    }\r\n                    resolve(false);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    async doAuthReachable() {\r\n        if (this.c8o.session.user.authenticated == true) {\r\n            await this.mutex.acquire();\r\n            let err;\r\n            try {\r\n                let user = await this.c8o.httpInterface.getUserServiceStatus();\r\n                if (user.authenticated == false || err != undefined) {\r\n                    if (this.c8o.keepSessionAlive) {\r\n                        let success = await this.loginManager.doLogin();\r\n                        if (success.status == false) {\r\n                            this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                            this.c8o.subscriber_session.next(null);\r\n                            this.mutex.release();\r\n                        }\r\n                        else {\r\n                            this.c8o.database.restartReplications(this.user.name);\r\n                            this.checkSession(null, 0);\r\n                            this.mutex.release();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.sessId = user.session;\r\n                        this.c8o.subscriber_session.next(null);\r\n                        this.mutex.release();\r\n                    }\r\n                }\r\n                else {\r\n                    this.sessId = user.session;\r\n                    this._status = C8oSessionStatus.Connected;\r\n                    this.c8o.database.restartReplications(this.user.name);\r\n                    this.checkSession(null, 0);\r\n                    await this.mutex.release();\r\n                }\r\n            }\r\n            catch (e) {\r\n                this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                this.mutex.release();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * defineSessionStatus\r\n     *\r\n     * if haderStatus is not null => we are connected\r\n     * else if headerStatus is not null and this.id is not null, we has lost session\r\n     * else we were never connected\r\n     *\r\n     * @param response the http header response\r\n     */\r\n    async defineSessionStatus(response, headers, urlReq, parametersReq, headersReq, fromSetInitalState) {\r\n        // get session id sent by header\r\n        let headerStatus = C8oUtilsCore.checkHeaderArgument(response, \"x-convertigo-authenticated\");\r\n        if (headerStatus != null) {\r\n            if (this.id != null && this.id != \"\" && this.id != headerStatus) {\r\n                this.c8o.database.stopReplications(this.user.name);\r\n                this._user = new C8oSessionUser();\r\n                if (!fromSetInitalState) {\r\n                    this.loginManager.setRequestLogin(urlReq, parametersReq, headersReq, this.sessId);\r\n                }\r\n                this._status = C8oSessionStatus.HasBeenConnectedToAnother;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.HasBeenConnectedToAnother;\r\n            }\r\n            if (this.id != null || this._status == C8oSessionStatus.HasBeenConnected) {\r\n                this._status = C8oSessionStatus.Connected;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.Connected;\r\n            }\r\n            else {\r\n                if (!fromSetInitalState) {\r\n                    this.loginManager.setRequestLogin(urlReq, parametersReq, headersReq, this.sessId);\r\n                }\r\n                this._status = C8oSessionStatus.HasBeenConnected;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.HasBeenConnected;\r\n            }\r\n        }\r\n        else {\r\n            if (this.id != null) {\r\n                let cancel = false;\r\n                if (this._status == C8oSessionStatus.HasBeenConnected) {\r\n                    let user;\r\n                    try {\r\n                        user = await this.c8o.httpInterface.getUserServiceStatus();\r\n                        cancel = user != undefined ? user.authenticated : false;\r\n                        this.sessId = user.session;\r\n                    }\r\n                    catch (e) {\r\n                        cancel = false;\r\n                    }\r\n                }\r\n                if (!cancel) {\r\n                    this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                    this.id = headerStatus;\r\n                    return C8oSessionStatus.HasBeenDisconnected;\r\n                }\r\n                else {\r\n                    return C8oSessionStatus.Ignore;\r\n                }\r\n            }\r\n            else {\r\n                this._status = C8oSessionStatus.Disconnected;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.Disconnected;\r\n            }\r\n        }\r\n    }\r\n    async checkUser(fromSetInitalState) {\r\n        let user = this._user;\r\n        try {\r\n            if (fromSetInitalState) {\r\n                user = fromSetInitalState.body;\r\n            }\r\n            else {\r\n                user = await this.c8o.httpInterface.getUserServiceStatus();\r\n            }\r\n            if (this._user.name != user.user && this._user.name != \"anonymous\") {\r\n                // remove & stop all replications for older user\r\n                this.c8o.database.removeReplications(this._user.name);\r\n            }\r\n            this._user = new C8oSessionUser(user);\r\n        }\r\n        catch (e) {\r\n            if (fromSetInitalState) {\r\n                this._status = C8oSessionStatus.Disconnected;\r\n            }\r\n            else {\r\n                this._status = C8oSessionStatus.HasBeenDisconnected;\r\n            }\r\n        }\r\n        finally {\r\n            return user;\r\n        }\r\n    }\r\n    async checkSession(headers, time, resolve = null, fromSetInitalState) {\r\n        if (resolve == null) {\r\n            resolve = (() => { });\r\n        }\r\n        clearTimeout(this.checker);\r\n        this.checker = setTimeout(async () => {\r\n            let user;\r\n            user = await this.checkUser(fromSetInitalState);\r\n            let _status = user != undefined ? user.authenticated : false;\r\n            // if we are not anymore loggedin\r\n            if (!_status) {\r\n                this.c8o.log._debug(\"[C8oSessionManager] Session is not authenticated\");\r\n                // if we want to keepAlive session and we are not called from setInitalState\r\n                if (this.c8o.keepSessionAlive && fromSetInitalState) {\r\n                    // try to login\r\n                    await this.mutex.acquire();\r\n                    await this.mutex.release();\r\n                    if (this._status == C8oSessionStatus.Connected || this._status == C8oSessionStatus.HasBeenConnected) {\r\n                        resolve(true);\r\n                    }\r\n                    else {\r\n                        let success = await this.loginManager.doLogin();\r\n                        if (success.status == false) {\r\n                            this.c8o.database.stopReplications(this.user.name);\r\n                            this._user = new C8oSessionUser();\r\n                            this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                            this.c8o.subscriber_session.next(null);\r\n                            resolve();\r\n                        }\r\n                        else {\r\n                            this.checkSession(headers, 0, resolve);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.c8o.database.stopReplications(this.user.name);\r\n                    this._user = new C8oSessionUser();\r\n                    // if we called this function from setInitalState\r\n                    if (fromSetInitalState) {\r\n                        this._status = C8oSessionStatus.Disconnected;\r\n                    }\r\n                    else {\r\n                        this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                        this.c8o.subscriber_session.next(null);\r\n                    }\r\n                    resolve();\r\n                }\r\n            }\r\n            else {\r\n                // if we are still connected\r\n                this._status = C8oSessionStatus.Connected;\r\n                this.loginManager.setRequestLogin(null, null, null, user.session);\r\n                var funclistener = () => {\r\n                    this.c8o.httpInterface.p1 = new Promise((resolve) => { });\r\n                    this.c8o.httpInterface.firstCall = true;\r\n                    // safe delete previous Checker\r\n                    try {\r\n                        clearTimeout(this.checker);\r\n                    }\r\n                    catch (e) {\r\n                    }\r\n                    setTimeout(async () => {\r\n                        this.mutex.acquire();\r\n                        this.c8o.log.debug(\"[C8oSessionManager]: onResume checking user status\");\r\n                        let user = await this.checkUser();\r\n                        let _status = user != undefined ? user.authenticated : false;\r\n                        // if we are not anymore loggedin\r\n                        if (!_status) {\r\n                            this.c8o.log.debug(\"[C8oSessionManager]: onResume user is no longer logged\");\r\n                            if (this.c8o.keepSessionAlive) {\r\n                                this.c8o.log.debug(\"[C8oSessionManager]: onResume keepAlive session activated, we will try to autologin\");\r\n                                this.c8o.session.status = C8oSessionStatus.HasBeenDisconnected;\r\n                                // try to login\r\n                                let success = await this.loginManager.doLogin();\r\n                                if (success.status == false) {\r\n                                    this.c8o.log.debug(\"[C8oSessionManager]: onResume autologin failed\");\r\n                                    this.c8o.database.stopReplications(this.user.name);\r\n                                    this._user = new C8oSessionUser();\r\n                                    this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                                    this.c8o.subscriber_session.next(null);\r\n                                    this.mutex.release();\r\n                                    this.c8o.httpInterface.p1 = Promise.resolve(true);\r\n                                    resolve();\r\n                                }\r\n                                else {\r\n                                    this.c8o.log.debug(\"[C8oSessionManager]: onResume autologin worked\");\r\n                                    this.mutex.release();\r\n                                    this.checkSession(headers, 0, resolve);\r\n                                    this.c8o.httpInterface.p1 = Promise.resolve(true);\r\n                                }\r\n                            }\r\n                            else {\r\n                                this.c8o.log.debug(\"[C8oSessionManager]: onResume stopping replications\");\r\n                                this.c8o.database.stopReplications(this.user.name);\r\n                                this._user = new C8oSessionUser();\r\n                                this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                                this.c8o.subscriber_session.next(null);\r\n                                this.mutex.release();\r\n                                resolve();\r\n                            }\r\n                        }\r\n                        else {\r\n                            this._status = C8oSessionStatus.Connected;\r\n                            this.mutex.release();\r\n                        }\r\n                    }, 0);\r\n                };\r\n                try {\r\n                    if (this.resumeListener != undefined) {\r\n                        document.removeEventListener(\"resume\", this.resumeListener, false);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n                this.resumeListener = funclistener;\r\n                document.addEventListener(\"resume\", funclistener, false);\r\n                this.c8o.database.restartReplications(this.user.name);\r\n                let timeR = +user['maxInactive'] * 0.95 * 1000;\r\n                if (this.c8o.keepSessionAlive) {\r\n                    this.c8o.log._debug(\"[C8oSessionManager] Pooling for session, next check will be in \" + timeR + \"ms\");\r\n                    this.checkSession(headers, timeR);\r\n                    resolve();\r\n                }\r\n                else {\r\n                    if (this.checker != undefined) {\r\n                        try {\r\n                            clearTimeout(this.checker);\r\n                        }\r\n                        catch (e) {\r\n                        }\r\n                    }\r\n                    this.checker =\r\n                        setTimeout(async () => {\r\n                            this.c8o.database.stopReplications(this.user.name);\r\n                            this._status = C8oSessionStatus.Disconnected;\r\n                            this.c8o.subscriber_session.next(null);\r\n                        }, timeR);\r\n                    resolve();\r\n                }\r\n            }\r\n        }, time);\r\n    }\r\n}\n\n/**\r\n * Allows to send requests to a Convertigo Server (or Studio), these requests are called c8o calls.<br/>\r\n * C8o calls are done thanks to a HTTP request or a CouchbaseLite usage.<br/>\r\n * An instance of C8o is connected to only one Convertigo and can't change it.<br/>\r\n * To use it, you have to first initialize the C8o instance with the Convertigo endpoint, then use call methods with Convertigo variables as parameter.\r\n */\r\n// @dynamic\r\nclass C8oCore extends C8oBase {\r\n    /**\r\n     * This is the base object representing a Convertigo Server end point. This object should be instantiated\r\n     * when the apps starts and be accessible from any class of the app. Although this is not common , you may have\r\n     * several C8o objects instantiated in your app.\r\n     *\r\n     * @param http\r\n     *\r\n     * @throws C8oException In case of invalid parameter or initialization failure.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.lastChangeTimeStamp = 0;\r\n        this.lastChangeSetTimeout = null;\r\n        this.threshold = 50;\r\n        this.observanleHandleFullSyncLive = new Subject();\r\n        this._automaticRemoveSplashsCreen = true;\r\n        this.lives = [];\r\n        this.livesDb = [];\r\n        this._reply = new Subject();\r\n        this._couchUrl = null;\r\n        this.xsrfUsed = false;\r\n        //noinspection JSUnusedLocalSymbols\r\n        this.handleFullSyncLive = new C8oFullSyncChangeListener((changes) => {\r\n            console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.observanleHandleFullSyncLive.next(changes);\r\n            /*console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.debounce(()=>this.executeHandleFullSyncLive());\r\n            /*console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            _.debounce(\r\n                this.executeHandleFullSyncLive,\r\n                window[\"threshold\"] != undefined ? window[\"threshold\"] : this.threshold,\r\n                window[\"options\"] != undefined ? window[\"options\"] : {}\r\n            )();*/\r\n            /*let localLastChangeTimeStamp = new Date().getTime();\r\n            if(22)\r\n            this.lastChangeTimeStamp = localLastChangeTimeStamp;\r\n            console.log(\"Executing from handleFullSyncLive. \\nthis.lastChangeTimeStamp=\"+ this.lastChangeTimeStamp)\r\n            this.lastChangeSetTimeout = setTimeout(()=>{\r\n                let execution_time = new Date().getTime();\r\n                let sub = execution_time - this.lastChangeTimeStamp;\r\n                console.log(\"Executing from handleFullSyncLive into setTimeout. \\nthis.lastChangeTimeStamp=\"+ this.lastChangeTimeStamp+\"\\nexecution_time=\"+execution_time+\"\\nsub=\"+sub+\"\\nthreshold=\"+this.threshold);\r\n                if( sub >= this.threshold){\r\n                    console.log(\"Executing from handleFullSyncLive into setTimeout reloading lives\");\r\n                    for (const task in this.lives) {\r\n                        (this.lives[task] as C8oCallTask).executeFromLive();\r\n                    }\r\n                }\r\n                else{\r\n                    console.log(\"Executing from handleFullSyncLive into setTimeout donot reloading lives\");\r\n                }\r\n            }, this.threshold);*/\r\n        });\r\n        this.data = null;\r\n        this.c8oLogger = new C8oLogger(this, true);\r\n        this.subscriber_session = new Subject();\r\n        this.subscriber_session_changed = new Subject();\r\n        this.subscriber_network = new Subject();\r\n        this.subscriber_login = new Subject();\r\n        this.subscriber_database_reset = new Subject();\r\n        this.network = new C8oManagerNetwork(this);\r\n        this.database = new C8oManagerDatabase(this);\r\n        this.session = new C8oManagerSession(this);\r\n        this.promiseManagerNetwork = this.network.init();\r\n        this.observanleHandleFullSyncLive\r\n            .pipe(debounce(() => timer(100)))\r\n            .subscribe((val) => {\r\n            this.executeHandleFullSyncLive();\r\n        });\r\n    }\r\n    get couchUrl() {\r\n        return this._couchUrl;\r\n    }\r\n    set couchUrl(value) {\r\n        this._couchUrl = value;\r\n    }\r\n    get logC8o() {\r\n        return this._logC8o;\r\n    }\r\n    set logC8o(value) {\r\n        this._logC8o = value;\r\n    }\r\n    get logRemote() {\r\n        return this._logRemote;\r\n    }\r\n    set logRemote(value) {\r\n        this._initalLogLevel = value;\r\n        this._logRemote = value;\r\n    }\r\n    get logLevelLocal() {\r\n        return this._logLevelLocal;\r\n    }\r\n    set logLevelLocal(value) {\r\n        this._logLevelLocal = value;\r\n    }\r\n    get log() {\r\n        return this.c8oLogger;\r\n    }\r\n    toString() {\r\n        return \"C8o[\" + this._endpoint + \"]\";\r\n    }\r\n    get endpoint() {\r\n        return this._endpoint;\r\n    }\r\n    set endpoint(value) {\r\n        this._endpoint = value;\r\n    }\r\n    get endpointConvertigo() {\r\n        return this._endpointConvertigo;\r\n    }\r\n    set endpointConvertigo(value) {\r\n        this._endpointConvertigo = value;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get endpointIsSecure() {\r\n        return this._endpointIsSecure;\r\n    }\r\n    set endpointIsSecure(value) {\r\n        this._endpointIsSecure = value;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get endpointHost() {\r\n        return this._endpointHost;\r\n    }\r\n    set endpointHost(value) {\r\n        this._endpointHost = value;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get endpointPort() {\r\n        return this._endpointPort;\r\n    }\r\n    set endpointPort(value) {\r\n        this._endpointPort = value;\r\n    }\r\n    get endpointProject() {\r\n        return this._endpointProject;\r\n    }\r\n    set endpointProject(value) {\r\n        this._endpointProject = value;\r\n    }\r\n    get deviceUUID() {\r\n        return new Promise((resolve) => {\r\n            if (window[\"cordova\"] != undefined) {\r\n                document.addEventListener(\"deviceready\", () => {\r\n                    if (C8oCore.deviceUUID == undefined) {\r\n                        C8oCore.deviceUUID = C8oUtilsCore.getNewGUIDString();\r\n                    }\r\n                    resolve(C8oCore.deviceUUID);\r\n                }, false);\r\n            }\r\n            else {\r\n                if (C8oCore.deviceUUID == undefined) {\r\n                    C8oCore.deviceUUID = C8oUtilsCore.getNewGUIDString();\r\n                }\r\n                resolve(C8oCore.deviceUUID);\r\n            }\r\n        });\r\n    }\r\n    get httpPublic() {\r\n        return this._http;\r\n    }\r\n    get resetBase() {\r\n        return this._resetBase;\r\n    }\r\n    set resetBase(resetBase) {\r\n        this._resetBase = resetBase;\r\n    }\r\n    get prefixBase() {\r\n        return this._prefixBase;\r\n    }\r\n    set prefixBase(resetBase) {\r\n        this._prefixBase = resetBase;\r\n    }\r\n    get coreVersion() {\r\n        return \"1.0.7\"; //require(\"../../package.json\").version;\r\n    }\r\n    importLoginState(c8o) {\r\n        let session = c8o.session;\r\n        this.session = session;\r\n    }\r\n    extractendpoint() {\r\n        if (!C8oUtilsCore.isValidUrl(this.endpoint)) {\r\n            throw new C8oException(C8oExceptionMessage.illegalArgumentInvalidURL(this.endpoint).toString());\r\n        }\r\n        const matches = C8oCore.RE_ENDPOINT.exec(this.endpoint.toString());\r\n        if (matches === null) {\r\n            throw new C8oException(C8oExceptionMessage.illegalArgumentInvalidEndpoint(this.endpoint.toString()));\r\n        }\r\n        this.endpointConvertigo = matches[0].substring(0, (matches[0].indexOf(\"/projects\")));\r\n        this.endpointIsSecure = matches[1] != null;\r\n        this.endpointHost = matches[2];\r\n        this.endpointPort = matches[3];\r\n        this.endpointProject = matches[4];\r\n    }\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters.<br/>\r\n     * To not use a C8oExceptionListener you can set the parameter to null\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters - Contains c8o variables\r\n     * @param c8oResponseListener - Define the behavior with the c8o call response\r\n     * @param c8oExceptionListener - Define the behavior when there is an exception during execution\r\n     */\r\n    call(requestable, parameters = null, c8oResponseListener = null, c8oExceptionListener = null) {\r\n        try {\r\n            if (requestable === null || requestable === undefined) {\r\n                //noinspection ExceptionCaughtLocallyJS\r\n                throw new C8oException(C8oExceptionMessage.illegalArgumentNullParameter(\"resquestable\"));\r\n            }\r\n            if (parameters === null || parameters === undefined) {\r\n                parameters = {};\r\n            }\r\n            else {\r\n                if (this._normalizeParameters == true) {\r\n                    try {\r\n                        parameters = (JSON.parse(JSON.stringify(parameters)));\r\n                    }\r\n                    catch (error) {\r\n                        this.log.debug(\"[C8o] can't normalize parameters due to cyclic error. We will use parameters non normalized\");\r\n                    }\r\n                }\r\n            }\r\n            const regex = C8oCore.RE_REQUESTABLE.exec(requestable);\r\n            if (regex === null || regex === undefined) {\r\n                //noinspection ExceptionCaughtLocallyJS\r\n                throw new C8oException(C8oExceptionMessage.InvalidArgumentInvalidEndpoint(this._endpoint));\r\n            }\r\n            if (regex[1] !== \"\") {\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROJECT.toString()] = regex[1];\r\n            }\r\n            if (regex[2] != null) {\r\n                parameters[C8oCore.ENGINE_PARAMETER_SEQUENCE.toString()] = regex[2];\r\n            }\r\n            else {\r\n                parameters[C8oCore.ENGINE_PARAMETER_CONNECTOR.toString()] = regex[3];\r\n                parameters[C8oCore.ENGINE_PARAMETER_TRANSACTION.toString()] = regex[4];\r\n            }\r\n            return this._call(parameters, c8oResponseListener, c8oExceptionListener);\r\n        }\r\n        catch (error) {\r\n            this.handleCallException(c8oExceptionListener, parameters, error);\r\n        }\r\n        finally {\r\n        }\r\n    }\r\n    /**\r\n     * Makes a c8o call with c8o requestable in parameters ('__project' and ('__sequence' or ('__connector' and '__transaction'))).<br/>\r\n     * To not use a C8oExceptionListener you can set the parameter to null.\r\n     *\r\n     * @param parameters - Contains c8o variables\r\n     * @param c8oResponseListener - Define the behavior with the c8o call response\r\n     * @param c8oExceptionListener - Define the behavior when there is an exception during execution\r\n     */\r\n    _call(parameters = null, c8oResponseListener = null, c8oExceptionListener = null) {\r\n        // IMPORTANT: all c8o calls have to end here !\r\n        Promise.all([this.promiseFinInit, this.promiseManagerNetwork]).then(() => {\r\n            try {\r\n                this.c8oLogger.logMethodCall(\"call\", parameters, c8oResponseListener, c8oExceptionListener);\r\n                if (parameters == null) {\r\n                    parameters = {};\r\n                }\r\n                else {\r\n                    if (this._normalizeParameters == true) {\r\n                        try {\r\n                            parameters = (JSON.parse(JSON.stringify(parameters)));\r\n                        }\r\n                        catch (error) {\r\n                            this.log.debug(\"[C8o] can't normalize parameters due to cyclic error. We will use parameters non normalized\");\r\n                        }\r\n                    }\r\n                }\r\n                const task = new C8oCallTask(this, parameters, c8oResponseListener, c8oExceptionListener);\r\n                task.run();\r\n            }\r\n            catch (error) {\r\n                this.handleCallException(c8oExceptionListener, parameters, error);\r\n            }\r\n            finally {\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters, expecting a JSON response through a C8oPromise.<br/>\r\n     * The C8oPromise allow to register response handler with .then and .thenUI,\r\n     * error handler with .fail and failUI,\r\n     * replication handler with .progress\r\n     * and synchronous response with .sync().\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters: Object - Contains c8o variables as key/value pair in the Map\r\n     * @return A C8oPromise that can deliver the JSON response\r\n     */\r\n    callJsonObject(requestable, parameters) {\r\n        this.removeNull(parameters);\r\n        const promise = new C8oPromise(this);\r\n        this.call(requestable, parameters, new C8oResponseJsonListener((response, requestParameters) => {\r\n            if (requestParameters == null) {\r\n                requestParameters = {};\r\n            }\r\n            if (response == null && requestParameters[C8oCore.ENGINE_PARAMETER_PROGRESS]) {\r\n                promise.onProgress(requestParameters[C8oCore.ENGINE_PARAMETER_PROGRESS]);\r\n            }\r\n            else {\r\n                promise.onResponse(response, requestParameters);\r\n            }\r\n        }), new C8oExceptionListener((exception, data) => {\r\n            promise.onFailure(exception, data);\r\n        }));\r\n        return promise;\r\n    }\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters, expecting a JSON response through a C8oPromise.<br/>\r\n     * The C8oPromise allow to register response handler with .then and .thenUI,\r\n     * error handler with .fail and failUI,\r\n     * replication handler with .progress\r\n     * and synchronous response with .sync().\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters - Contains c8o variables as key/value\r\n     * @return A C8oPromise that can deliver the JSON response\r\n     */\r\n    callJson(requestable, ...parameters) {\r\n        return this.callJsonObject(requestable, C8oCore.toParameters(parameters));\r\n    }\r\n    /**\r\n     * Transforms siblings values as key/value of a Map.\r\n     *\r\n     * @param parameters pair of values to transform a object\r\n     * @return a Map that contains all parameters\r\n     */\r\n    static toParameters(parameters) {\r\n        const newParameters = {};\r\n        if (0 !== parameters.length % 2) {\r\n            throw new C8oException(\"Incorrect number of parameters\");\r\n        }\r\n        for (let i = 0; i < parameters.length; i += 2) {\r\n            newParameters[parameters[i]] = parameters[i + 1];\r\n        }\r\n        return newParameters;\r\n    }\r\n    /**\r\n     * Remove null value from parameters\r\n     *\r\n     * @param parameters an object\r\n     * @return a Map that contains all parameters\r\n     */\r\n    removeNull(parameters) {\r\n        for (let val in parameters) {\r\n            if (parameters[val] == null) {\r\n                delete parameters[val];\r\n                this.log._trace(\"remove parameters \" + val + \" since its value is null or undefined\");\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the exception listener callback if it is not null, else prints the exception stack trace.\r\n     *\r\n     * @param c8oExceptionListener\r\n     * @param requestParameters\r\n     * @param exception\r\n     */\r\n    handleCallException(c8oExceptionListener, requestParameters, exception) {\r\n        this.c8oLogger.warn(\"Handle a call exception\", exception);\r\n        if (c8oExceptionListener != null) {\r\n            c8oExceptionListener.onException(exception, requestParameters);\r\n        }\r\n    }\r\n    /**\r\n     * Return an subject that call next if session has been lost\r\n     */\r\n    handleSessionLost() {\r\n        this.subscriber_session.subscribe((res) => {\r\n            this.c8oLogger.debug(\"[C8o][handleSessionLost] Handle a session lost\");\r\n            /*            (this.c8oFullSync as C8oFullSyncCbl).canceled = false;\r\n                        (this.c8oFullSync as C8oFullSyncCbl).cancelActiveReplications();\r\n              */\r\n        });\r\n        return this.subscriber_session;\r\n    }\r\n    /**\r\n     * Return an subject that call next if session authenticated user change\r\n     */\r\n    handleSessionAuthenticatedUserChanged() {\r\n        this.subscriber_session_changed.subscribe((res) => {\r\n            this.c8oLogger.debug(\"[C8o][handleSessionLost] Handle a session change of authenticated user\");\r\n        });\r\n        return this.subscriber_session_changed;\r\n    }\r\n    /**\r\n     * Return an subject that call next if network has change\r\n     */\r\n    handleNetworkEvents() {\r\n        return this.subscriber_network;\r\n    }\r\n    /**\r\n     * Return an subject that call next if autologin is triggered with its result\r\n     */\r\n    handleAutoLoginResponse() {\r\n        return this.subscriber_login;\r\n    }\r\n    /**\r\n     * Return an subject that call next if database has been reset\r\n     */\r\n    handleResetDatabase() {\r\n        return this.subscriber_database_reset;\r\n    }\r\n    ;\r\n    /**\r\n     * get an attachment for a given object\r\n     *\r\n     * @param id: string\r\n     * @param attachment_name: string\r\n     *\r\n     * @returns a promise containing a buffer\r\n     */\r\n    async get_attachment(id, attachment_name, database_name) {\r\n        return new Promise(async (resolve, reject) => {\r\n            if (database_name == null) {\r\n                database_name = this.defaultDatabaseName;\r\n            }\r\n            if (this.c8oFullSync != undefined) {\r\n                const fullsyncdb = await this.c8oFullSync.getOrCreateFullSyncDatabase(database_name);\r\n                fullsyncdb.getdatabase.getAttachment(id, attachment_name).then((buffer) => {\r\n                    resolve(buffer);\r\n                }).catch((err) => {\r\n                    reject(err);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Add a listener to monitor all changes of the 'db'.\r\n     *\r\n     * @param db the name of the fullsync database to monitor. Use the default database for a blank or a null value.\r\n     * @param listener the listener to trigger on change.\r\n     */\r\n    addFullSyncChangeListener(db, listener, parameters = {}) {\r\n        this.c8oFullSync.addFullSyncChangeListener(db, listener, parameters);\r\n    }\r\n    /**\r\n     * Remove a listener for changes of the 'db'.\r\n     *\r\n     * @param db the name of the fullsync database to monitor. Use the default database for a blank or a null value.\r\n     * @param listener the listener instance to remove.\r\n     */\r\n    removeFullSyncChangeListener(db, listener) {\r\n        this.c8oFullSync.removeFullSyncChangeListener(db, listener);\r\n    }\r\n    addLive(liveid, db, task) {\r\n        this.cancelLive(liveid);\r\n        this.lives[liveid] = task;\r\n        this.livesDb[liveid] = db;\r\n        this.addFullSyncChangeListener(db, this.handleFullSyncLive);\r\n    }\r\n    cancelLive(liveid) {\r\n        if (this.livesDb[liveid] !== undefined) {\r\n            let db = this.livesDb[liveid];\r\n            delete this.livesDb[liveid];\r\n            if (this.livesDb[db] !== undefined) {\r\n                db = null;\r\n            }\r\n            if (db !== null) {\r\n                this.removeFullSyncChangeListener(db, this.handleFullSyncLive);\r\n            }\r\n        }\r\n        delete this.lives[liveid];\r\n    }\r\n    executeHandleFullSyncLive() {\r\n        console.log(\"Executing from handleFullSyncLive into debounce\");\r\n        for (const task in this.lives) {\r\n            this.lives[task].executeFromLive();\r\n        }\r\n    }\r\n    doAlog() {\r\n        console.log(\"Executing from handleFullSyncLive into debounce\");\r\n    }\r\n    debounce(func, timeout = 300) {\r\n        let timer;\r\n        return (...args) => {\r\n            clearTimeout(timer);\r\n            timer = setTimeout(() => { func.apply(this, args); }, timeout);\r\n        };\r\n    }\r\n    truc() {\r\n        for (var i = 0; i < 10; i++) {\r\n            console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.debounce(() => this.doAlog());\r\n        }\r\n    }\r\n    /**\r\n     * This is the base object representing a Convertigo Server end point. This object should be instantiated\r\n     * when the apps starts and be accessible from any class of the app. Although this is not common , you may have\r\n     * several C8o objects instantiated in your app.\r\n     *\r\n     * @param c8oSettings Initialization options.<br/>\r\n     *                    Example: new C8oSettings().setLogRemote(false).setDefaultDatabaseName(\"sample\")\r\n     *\r\n     * @throws C8oException In case of invalid parameter or initialization failure.\r\n     */\r\n    init(c8oSettings) {\r\n        let nullableEndpoint = true;\r\n        if (c8oSettings !== undefined) {\r\n            if (c8oSettings.endpoint != null) {\r\n                nullableEndpoint = false;\r\n            }\r\n        }\r\n        if (nullableEndpoint) {\r\n            this.promiseConstructor = new Promise((resolve) => {\r\n                // if project is running into web browser served by convertigo\r\n                // get the url from window.location\r\n                if (window.location.href.startsWith(\"http\") && window.location.href.indexOf(\"/DisplayObjects\") != -1) {\r\n                    let n = window.location.href.indexOf(\"/DisplayObjects\");\r\n                    this.endpoint = window.location.href.substring(0, n);\r\n                    resolve();\r\n                }\r\n                // else if project is running on device or serve by ionic serve\r\n                // get the uri from env.json\r\n                else {\r\n                    let uri = \"\";\r\n                    if (window.location.href.startsWith(\"file://\")) {\r\n                        uri = (window.location.href.substring(0, window.location.href.indexOf(\"/index.html\"))) + \"/env.json\";\r\n                    }\r\n                    else {\r\n                        uri = window.location.origin + \"/env.json\";\r\n                    }\r\n                    this.httpGetObservable(uri)\r\n                        .subscribe(data => {\r\n                        this.data = data;\r\n                        //noinspection TypeScriptUnresolvedVariable\r\n                        let remoteBase = data[\"remoteBase\"].toString();\r\n                        let n = remoteBase.indexOf(\"/_private\");\r\n                        this.endpoint = remoteBase.substring(0, n);\r\n                        this._automaticRemoveSplashsCreen = data[\"splashScreenRemoveMode\"] !== \"manual\";\r\n                        resolve();\r\n                    }, error => {\r\n                        alert(\"Missing env.json file\");\r\n                        let errMsg;\r\n                        if (error instanceof Error) {\r\n                            errMsg = error.message;\r\n                        }\r\n                        else {\r\n                            errMsg = `${error.status} - ${error.statusText || \"\"} ${error}`;\r\n                        }\r\n                        //@ts-ignore\r\n                        if (throwError != undefined) {\r\n                            //@ts-ignore\r\n                            return throwError(errMsg);\r\n                        }\r\n                        else {\r\n                            //@ts-ignore\r\n                            return Observable.throw(errMsg);\r\n                        }\r\n                    });\r\n                }\r\n            }).then(() => {\r\n                this.extractendpoint();\r\n            });\r\n        }\r\n        else {\r\n            this.promiseConstructor = new Promise((resolve) => {\r\n                this.endpoint = c8oSettings.endpoint;\r\n                this.extractendpoint();\r\n                resolve();\r\n            });\r\n        }\r\n        this.promiseInit = Promise.all([this.promiseConstructor]).then(() => {\r\n            return new Promise(async (resolve) => {\r\n                this.copy(c8oSettings);\r\n                this.initC8oHttInterface();\r\n                try {\r\n                    await this.session.setInitalState();\r\n                }\r\n                catch (e) {\r\n                    console.error(\"Error calling setInitalState\", e);\r\n                }\r\n                this.c8oLogger.affect_val(this, false);\r\n                try {\r\n                    await this.c8oLogger.logRemoteInit();\r\n                }\r\n                catch (e) {\r\n                    console.error(\"Error calling logRemoteInit\", e);\r\n                }\r\n                this.c8oLogger.logMethodCall(\"C8o Constructor\");\r\n                this.c8oFullSync = new C8oFullSyncCbl(this);\r\n                resolve();\r\n            });\r\n        });\r\n        return this.promiseInit;\r\n    }\r\n    /**\r\n     * This should be called OnPlatform Ready to remove splashscreen if necessary\r\n     *\r\n     */\r\n    finalizeInit() {\r\n        if (this.promiseFinInit != null) {\r\n            return this.promiseFinInit;\r\n        }\r\n        else {\r\n            this.promiseFinInit = new Promise((resolve) => {\r\n                Promise.all([this.promiseInit]).then(() => {\r\n                    /**\r\n                     * Looking for splashScreen timeOut\r\n                     */\r\n                    if (this._automaticRemoveSplashsCreen) {\r\n                        if (navigator[\"splashscreen\"] !== undefined) {\r\n                            navigator[\"splashscreen\"].hide();\r\n                        }\r\n                    }\r\n                    /**\r\n                     * Looking for wkWebView\r\n                     */\r\n                    if (window[\"wkWebView\"] != undefined) {\r\n                        window[\"wkWebView\"].injectCookie(this.endpointConvertigo);\r\n                        this.log.debug(\"[C8O] wkWebView detected: We will inject Cookie for endpoint: \" + this.endpointConvertigo);\r\n                    }\r\n                    /**\r\n                     * Looking for cblite\r\n                     */\r\n                    if (window[\"cblite\"] != undefined) {\r\n                        window[\"cblite\"].getURL((err, url) => {\r\n                            if (err) {\r\n                                //this.checkReachable()\r\n                                resolve();\r\n                            }\r\n                            else {\r\n                                url = url.replace(new RegExp(\"/$\"), \"\");\r\n                                this.couchUrl = url;\r\n                                //this.checkReachable()\r\n                                resolve();\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        //this.checkReachable()\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n            return this.promiseFinInit;\r\n        }\r\n    }\r\n}\r\n// Log:\r\n// - VERBOSE (v): methods parameters,\r\n// - DEBUG (d): methods calls,\r\n// - INFO (i):\r\n// - WARN (w):\r\n// - ERROR (e):\r\n/*** Regular expression ***/\r\n/**\r\n * The regex used to handle the c8o requestable syntax (\"&lt;project&gt;.&lt;sequence&gt;\" or \"&lt;project&gt;.&lt;connector&gt;.&lt;transaction&gt;\")\r\n */\r\nC8oCore.RE_REQUESTABLE = /^([^.]*)\\.(?:([^.]+)|(?:([^.]+)\\.([^.]+)))$/;\r\n/**\r\n * The regex used to get the part of the endpoint before '/projects/...'\r\n */\r\nC8oCore.RE_ENDPOINT = /^(https?:\\/\\/([^:/]+)(:[0-9]+)?\\/?.*?)\\/projects\\/([^\\/]+)$/;\r\n/**\r\n *  Engine reserved parameters\r\n */\r\nC8oCore.ENGINE_PARAMETER_PROJECT = \"__project\";\r\nC8oCore.ENGINE_PARAMETER_SEQUENCE = \"__sequence\";\r\nC8oCore.ENGINE_PARAMETER_CONNECTOR = \"__connector\";\r\nC8oCore.ENGINE_PARAMETER_TRANSACTION = \"__transaction\";\r\nC8oCore.ENGINE_PARAMETER_ENCODED = \"__encoded\";\r\nC8oCore.ENGINE_PARAMETER_DEVICE_UUID = \"__uuid\";\r\nC8oCore.ENGINE_PARAMETER_PROGRESS = \"__progress\";\r\nC8oCore.ENGINE_PARAMETER_FROM_LIVE = \"__fromLive\";\r\n/**\r\n * FULLSYNC parameters\r\n */\r\nC8oCore.use_merge_prefix = \"_use_merge\";\r\n/**\r\n * Constant to use as a parameter for a Call of \"fs://.post\" and must be followed by a FS_POLICY_* constant.\r\n * <pre>{@code\r\n * c8o.callJson(\"fs://.post\",\r\n *   C8o.FS_POLICY, C8o.FS_POLICY_MERGE,\r\n *   \"docid\", myid,\r\n *   \"mykey\", myvalue\r\n * ).sync();\r\n * }</pre>\r\n */\r\nC8oCore.FS_POLICY = \"_use_policy\";\r\n/**\r\n Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n This is the default post policy that don't alter the document before the CouchbaseLite's insertion.\r\n */\r\nC8oCore.FS_POLICY_NONE = \"none\";\r\n/**\r\n Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n This post policy remove the \"_id\" and \"_rev\" of the document before the CouchbaseLite's insertion.\r\n */\r\nC8oCore.FS_POLICY_CREATE = \"create\";\r\n/**\r\n Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n This post policy inserts the document in CouchbaseLite even if a document with the same \"_id\" already exists.\r\n */\r\nC8oCore.FS_POLICY_OVERRIDE = \"override\";\r\n/**\r\n Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n This post policy merge the document with an existing document with the same \"_id\" before the CouchbaseLite's insertion.\r\n */\r\nC8oCore.FS_POLICY_MERGE = \"merge\";\r\n/**\r\n Use it with \"fs://.post\". Default value is \".\".\r\n\r\n This key allow to override the sub key separator in case of document depth modification.\r\n */\r\nC8oCore.FS_SUBKEY_SEPARATOR = \"_use_subkey_separator\";\r\n/**\r\n Use it with \"project.sequence\". Default value is \".\".\r\n\r\n This key allow to disable autologin feature for a given callJson\r\n */\r\nC8oCore.SEQ_AUTO_LOGIN_OFF = \"__disableAutologin\";\r\n/**\r\n * Use it with \"fs://\" request as parameter to enable the live request feature.<br/>\r\n * Must be followed by a string parameter, the 'liveid' that can be use to cancel the live\r\n * request using c8o.cancelLive(liveid) method.<br/>\r\n * A live request automatically recall the then or thenUI handler when the database changed.\r\n */\r\nC8oCore.FS_LIVE = \"__live\";\r\n/** Local cache keys **/\r\nC8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE = \"response\";\r\nC8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE = \"responseType\";\r\nC8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE = \"expirationDate\";\r\nC8oCore.LOCAL_CACHE_DATABASE_NAME = \"c8olocalcache\";\r\n/** Response type **/\r\nC8oCore.RESPONSE_TYPE_XML = \"pxml\";\r\nC8oCore.RESPONSE_TYPE_JSON = \"json\";\r\n// @dynamic\r\nclass FullSyncPolicy {\r\n    constructor(value, action) {\r\n        this.value = value;\r\n        this.action = action;\r\n    }\r\n    static values() {\r\n        return [this.NONE, this.CREATE, this.OVERRIDE, this.MERGE];\r\n    }\r\n    static getFullSyncPolicy(value) {\r\n        if (value != null) {\r\n            const fullSyncPolicyValues = FullSyncPolicy.values();\r\n            for (const fullSyncPolicy of fullSyncPolicyValues) {\r\n                if (fullSyncPolicy.value === value) {\r\n                    return fullSyncPolicy;\r\n                }\r\n            }\r\n        }\r\n        return this.NONE;\r\n    }\r\n}\r\nFullSyncPolicy.NONE = new FullSyncPolicy(C8oCore.FS_POLICY_NONE, (database, newProperties) => {\r\n    let documentId = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n    if (documentId === \"\") {\r\n        documentId = null;\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        database.post(newProperties).then((createdDocument) => {\r\n            resolve(createdDocument);\r\n        }).catch((error) => {\r\n            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n        });\r\n    });\r\n});\r\nFullSyncPolicy.CREATE = new FullSyncPolicy(C8oCore.FS_POLICY_CREATE, (database, newProperties) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n            delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n            database.post(newProperties).then((createdDocument) => {\r\n                resolve(createdDocument);\r\n            });\r\n        }\r\n        catch (error) {\r\n            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n        }\r\n    });\r\n});\r\nFullSyncPolicy.OVERRIDE = new FullSyncPolicy(C8oCore.FS_POLICY_OVERRIDE, (database, newProperties) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const documentId = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n            delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n            delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n            if (documentId == null) {\r\n                database.post(newProperties).then((createdDocument) => {\r\n                    resolve(createdDocument);\r\n                });\r\n            }\r\n            else {\r\n                database.get(documentId).then((doc) => {\r\n                    newProperties[\"_id\"] = documentId;\r\n                    newProperties[\"_rev\"] = doc._rev;\r\n                    return database.put(newProperties);\r\n                }).then((createdDocument) => {\r\n                    resolve(createdDocument);\r\n                }).catch((error) => {\r\n                    if (error.status === \"404\" || error.status === 404) {\r\n                        newProperties[\"_id\"] = documentId;\r\n                        return database.post(newProperties);\r\n                    }\r\n                    else {\r\n                        reject(error);\r\n                    }\r\n                }).then((createdDocument) => {\r\n                    resolve(createdDocument);\r\n                });\r\n            }\r\n        }\r\n        catch (error) {\r\n            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n        }\r\n    });\r\n});\r\nFullSyncPolicy.MERGE = new FullSyncPolicy(C8oCore.FS_POLICY_MERGE, (database, newProperties, subPolicy = null) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const documentId = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n            // delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n            delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n            // copy newProperties object to be able to apply subPolicy merge\r\n            let copyNewProperties = C8oFullSyncCbl.deepCloneObject(newProperties);\r\n            if (documentId == null) {\r\n                // Apply subPolicy for merge (here can only be delete since, there is no previous doc)\r\n                C8oFullSyncCbl.applySubPolicyForMerge(false, copyNewProperties, newProperties, subPolicy);\r\n                // Put document\r\n                database.put(newProperties)\r\n                    .then((createdDocument) => {\r\n                    resolve(createdDocument);\r\n                }).catch((error) => {\r\n                    reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                });\r\n            }\r\n            else {\r\n                database.get(documentId)\r\n                    .then((doc) => {\r\n                    // Apply Policy merge\r\n                    C8oFullSyncCbl.mergeProperties(newProperties, doc);\r\n                    // Apply subPolicy for merge\r\n                    C8oFullSyncCbl.applySubPolicyForMerge(true, copyNewProperties, newProperties, subPolicy);\r\n                    // Put document\r\n                    database.put(newProperties)\r\n                        .then((createdDocument) => {\r\n                        resolve(createdDocument);\r\n                    })\r\n                        .catch((error) => {\r\n                        reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                    });\r\n                }).catch((error) => {\r\n                    if (error.status === 404) {\r\n                        // Apply subPolicy for merge (here can only be delete since, there is no previous doc)\r\n                        C8oFullSyncCbl.applySubPolicyForMerge(false, copyNewProperties, newProperties, subPolicy);\r\n                        // Put document\r\n                        database.put(newProperties)\r\n                            .then((createdDocument) => {\r\n                            resolve(createdDocument);\r\n                        })\r\n                            .catch((error) => {\r\n                            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                        });\r\n                    }\r\n                    else {\r\n                        reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        catch (error) {\r\n            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n        }\r\n    });\r\n});\r\nclass FullSyncPostDocumentParameter {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n    static values() {\r\n        const array = [];\r\n        array.push(this.POLICY, this.SUBKEY_SEPARATOR);\r\n        return array;\r\n    }\r\n}\r\nFullSyncPostDocumentParameter.POLICY = new FullSyncPostDocumentParameter(C8oCore.FS_POLICY);\r\nFullSyncPostDocumentParameter.SUBKEY_SEPARATOR = new FullSyncPostDocumentParameter(C8oCore.FS_SUBKEY_SEPARATOR);\n\nclass C8oHttpInterfaceCore {\r\n    constructor(c8o, js = true) {\r\n        this.firstCall = true;\r\n        this._isCordova = null;\r\n        this.js = true;\r\n        this.session = \"\";\r\n        /**\r\n         * As we must support Angular 5.x, 6.x and 7.x, they need as peerDependencies diffrent versions of Rxjs.\r\n         * We alson need rxjs, but switch version of rxjs methods and paths to import are diffrents.\r\n         * So we test presence or not of module in some paths into rxjs to define in which version we are and execute the good import.\r\n        */\r\n        let rxjs = rxjs0; //require('rxjs');\r\n        if (rxjs != undefined) {\r\n            if (rxjs.from != undefined) {\r\n                this.from = rxjs.from;\r\n                c8o.log._trace(\"[C8oHttpInterfaceCore] Detect rxjs 6.x\");\r\n            }\r\n            else {\r\n                rxjs = rxjs1; //require('rxjs/observable/fromPromise');\r\n                c8o.log._trace(\"[C8oHttpInterfaceCore] Detect rxjs 5.x\");\r\n                if (rxjs != undefined) {\r\n                    // @ts-ignore\r\n                    this.from = rxjs.fromPromise;\r\n                }\r\n            }\r\n        }\r\n        this.c8o = c8o;\r\n        this.timeout = this.c8o.timeout;\r\n        this.firstcheckSessionR = false;\r\n        this._notifySessionLost = false;\r\n        /**\r\n         *  As this package will be used in two diffrent library, wee need to test in which platform we are,\r\n         *  to perform diffrent platform specific actions.\r\n         */\r\n        this.js = js;\r\n    }\r\n    forceInit() {\r\n        this.firstcheckSessionR = false;\r\n        this._notifySessionLost = false;\r\n    }\r\n    /**\r\n     * Method to bastract http get\r\n     * @param uri the uri for given request\r\n     */\r\n    httpGetObservable(uri, param1 = null, param2 = null) {\r\n        if (this.js) {\r\n            if (param1 == null) {\r\n                return this.from(this.c8o.httpPublic.get(uri));\r\n            }\r\n            else if (param2 == null) {\r\n                return this.from(this.c8o.httpPublic.get(uri, param1));\r\n            }\r\n            else {\r\n                return this.from(this.c8o.httpPublic.get(uri, param1, param2));\r\n            }\r\n        }\r\n        else {\r\n            if (param1 == null) {\r\n                return this.c8o.httpPublic.get(uri);\r\n            }\r\n            else if (param2 == null) {\r\n                return this.c8o.httpPublic.get(uri, param1);\r\n            }\r\n            else {\r\n                return this.c8o.httpPublic.get(uri, param1, param2);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Method to bastract http post\r\n     * @param uri the uri for given request\r\n     */\r\n    httpPostObservable(uri, param1, param2) {\r\n        if (this.js) {\r\n            return this.from(this.c8o.httpPublic.post(uri, param1, param2));\r\n        }\r\n        else {\r\n            return this.c8o.httpPublic.post(uri, param1, param2);\r\n        }\r\n    }\r\n    /**\r\n     * Call user service\r\n     * @param headers headers for request\r\n     */\r\n    getUserServiceStatus(observe) {\r\n        return new Promise((resolve, reject) => {\r\n            let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n            Object.assign(headersObject, this.c8o.headers);\r\n            let params = {\r\n                headers: this.getHeaders(headersObject),\r\n                withCredentials: true,\r\n            };\r\n            if (observe) {\r\n                params[\"observe\"] = \"response\";\r\n            }\r\n            this.httpPostObservable(this.c8o.endpointConvertigo + \"/services/user.Get\", {}, params)\r\n                .pipe(retry(1))\r\n                .subscribe(response => {\r\n                resolve(response);\r\n            }, error => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n    * Make an http post\r\n    * @param {string} url\r\n    * @param {Object} parameters\r\n    * @return {Promise<any>}\r\n    */\r\n    httpPost(url, parameters) {\r\n        parameters = this.transformRequest(parameters);\r\n        let headersObject = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"x-convertigo-sdk\": this.c8o.sdkVersion, headers: { 'Accept-Encoding': 'gzip' } };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        let headers = this.getHeaders(headersObject);\r\n        if (this.firstCall) {\r\n            this.p1 = new Promise((resolve, reject) => {\r\n                this.firstCall = false;\r\n                this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n            });\r\n            return this.p1;\r\n        }\r\n        else {\r\n            return new Promise((resolve, reject) => {\r\n                Promise.all([this.p1]).then(() => {\r\n                    this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n                }).catch((error) => {\r\n                    this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n                });\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Execute http Posts\r\n     * @param url\r\n     * @param parameters\r\n     * @param headers\r\n     * @param resolve\r\n     * @param reject\r\n     */\r\n    execHttpPosts(url, parameters, headers, resolve, reject, headers_return = false, doLogin = false) {\r\n        let _timeout = this.c8o.timeout;\r\n        if (parameters[\"_c8oTimeout\"] != undefined) {\r\n            _timeout = +parameters[\"_c8oTimeout\"];\r\n        }\r\n        this.httpPostObservable(url, parameters, {\r\n            headers: headers,\r\n            withCredentials: true,\r\n            observe: 'response'\r\n        })\r\n            .pipe(timeout(_timeout))\r\n            .pipe(retry(1))\r\n            .subscribe(response => {\r\n            this.handleResponseHttpPost(response, headers, resolve, url, parameters, headers, headers_return, reject, doLogin);\r\n        }, error => {\r\n            this.handleErrorHttpPost(error, reject, url);\r\n        });\r\n    }\r\n    /**\r\n     * Handle response of http Posts\r\n     * @param response\r\n     * @param headers\r\n     * @param resolve\r\n     */\r\n    handleResponseHttpPost(response, headers, resolve, urlReq, parametersReq, headersReq, returns_header = false, reject = null, doLogin = false) {\r\n        //this.checkReachable();\r\n        //this.triggerSessionCheck(response, headers, urlReq, parametersReq, headersReq);\r\n        if (urlReq.indexOf(\".json\") != -1) {\r\n            if (doLogin == true) {\r\n                resolve({ body: response[\"body\"], headers: response[\"headers\"] });\r\n            }\r\n            else {\r\n                this.c8o.session.sort(response, headers, urlReq, parametersReq, headersReq)\r\n                    .then((res) => {\r\n                    if (res != true || parametersReq[C8oCore.SEQ_AUTO_LOGIN_OFF] === true) {\r\n                        if (returns_header) {\r\n                            resolve({ body: response[\"body\"], headers: response[\"headers\"] });\r\n                        }\r\n                        else {\r\n                            resolve(response.body);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.execHttpPosts(urlReq, parametersReq, headersReq, resolve, reject, returns_header);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            resolve(response.body);\r\n        }\r\n    }\r\n    /**\r\n     * Handle errors of http Posts\r\n     * @param error\r\n     * @param reject\r\n     */\r\n    handleErrorHttpPost(error, reject, url = undefined) {\r\n        if (url != undefined) {\r\n            if (url.indexOf(\".Add\") == -1) {\r\n                this.c8o.network.init();\r\n            }\r\n        }\r\n        reject((new C8oHttpRequestException(C8oExceptionMessage.runHttpRequest(), error)));\r\n    }\r\n    /**\r\n     * Check type of file given in parameters\r\n     * 0 : No file to upload\r\n     * 1 : FileList Or File\r\n     * 2 : url when running in cordova\r\n     * @param {Object} parameters\r\n     * @return {number}\r\n     */\r\n    checkFile(parameters) {\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    //noinspection JSUnfilteredForInLoop\r\n                    if (parameters[p][p1] instanceof FileList || parameters[p][p1] instanceof File || parameters[p][p1] instanceof Blob) {\r\n                        return 1;\r\n                    }\r\n                    else if (this.isCordova()) {\r\n                        if (parameters[p][p1] instanceof URL) {\r\n                            return 2;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof FileList || parameters[p] instanceof File || parameters[p] instanceof Blob) {\r\n                    return 1;\r\n                }\r\n                else if (this.isCordova()) {\r\n                    if (parameters[p] instanceof URL) {\r\n                        return 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * Check if we are in cordova environment\r\n     * @return {boolean}\r\n     */\r\n    isCordova() {\r\n        if (this._isCordova == null) {\r\n            if (window[\"cordova\"] != undefined) {\r\n                this._isCordova = true;\r\n            }\r\n            else {\r\n                this._isCordova = false;\r\n            }\r\n        }\r\n        return this._isCordova;\r\n    }\r\n    /**\r\n     * Url encode parameters\r\n     * @param {Object} parameters\r\n     * @return {string}\r\n     */\r\n    transformRequest(parameters) {\r\n        let str = [];\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    //noinspection JSUnfilteredForInLoop\r\n                    str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(parameters[p][p1]));\r\n                }\r\n            }\r\n            else {\r\n                str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(parameters[p]));\r\n            }\r\n        }\r\n        let query = str.join(\"&\");\r\n        // Add this to instruct Convertigo server to remove any name space in the jSON keys\r\n        // to prevent keys like this:  'namespace:key'\r\n        return (query + \"&__removeNamespaces=true\");\r\n    }\r\n    /**\r\n     * Transform FormData parameters\r\n     * @param {Object} parameters\r\n     * @return {FormData}\r\n     */\r\n    transformRequestformdata(parameters) {\r\n        let formdata = new FormData();\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    if (parameters[p][p1] instanceof FileList) {\r\n                        for (var i = 0; i < parameters[p][p1].length; i++) {\r\n                            formdata.append(p, parameters[p][p1][i], parameters[p][p1][i].name);\r\n                        }\r\n                    }\r\n                    else if (parameters[p][p1] instanceof File || parameters[p][p1] instanceof Blob) {\r\n                        formdata.append(p, parameters[p][p1], parameters[p][p1].name);\r\n                    }\r\n                    else {\r\n                        formdata.append(p, parameters[p][p1]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof FileList) {\r\n                    for (var j = 0; j < parameters[p].length; j++) {\r\n                        formdata.append(p, parameters[p][j], parameters[p][j].name);\r\n                    }\r\n                }\r\n                else if (parameters[p] instanceof File || parameters[p] instanceof Blob) {\r\n                    formdata.append(p, parameters[p], parameters[p].name);\r\n                }\r\n                else {\r\n                    formdata.append(p, parameters[p]);\r\n                }\r\n            }\r\n        }\r\n        return formdata;\r\n    }\r\n    /**\r\n     * Extract file from parameters and return and array containing a file and params\r\n     * @param {Object} parameters\r\n     * @return {any}\r\n     */\r\n    transformRequestfileNative(parameters) {\r\n        let file = new Array();\r\n        let params = new Object();\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    if (parameters[p][p1] instanceof URL) {\r\n                        file.push([p1, parameters[p][p1]]);\r\n                    }\r\n                    else {\r\n                        params[p1] = parameters[p][p1][\"href\"];\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof URL) {\r\n                    file.push([p, parameters[p][\"href\"]]);\r\n                }\r\n                else {\r\n                    params[p] = parameters[p];\r\n                }\r\n            }\r\n        }\r\n        return [file, params];\r\n    }\r\n    /**\r\n     * Handle the request\r\n     * @param {string} url\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    async handleRequest(url, parameters, c8oResponseListener) {\r\n        if (parameters[\"__sequence\"] !== undefined) {\r\n            if (parameters[\"__sequence\"].indexOf(\"#\") !== -1) {\r\n                parameters[\"__sequence\"] = parameters[\"__sequence\"].substring(0, parameters[\"__sequence\"].indexOf(\"#\"));\r\n            }\r\n        }\r\n        switch (this.checkFile(parameters)) {\r\n            case 0: {\r\n                return this.httpPost(url, parameters);\r\n            }\r\n            case 1: {\r\n                let form = this.transformRequestformdata(parameters);\r\n                return this.uploadFileHttp(url, form, parameters, c8oResponseListener);\r\n            }\r\n            case 2: {\r\n                return this.uploadFilePluginNative(url, parameters, c8oResponseListener);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Upload file with native plugin\r\n     * @param {string} url\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    uploadFilePluginNative(url, parameters, c8oResponseListener) {\r\n        let progress = new C8oProgress();\r\n        progress.pull = false;\r\n        let varNull = null;\r\n        let data = this.transformRequestfileNative(parameters);\r\n        let files = data[0];\r\n        let options = new window[\"FileUploadOptions\"]();\r\n        options.fileKey = files[0][0];\r\n        options.fileName = files[0][1].substr(files[0][1].lastIndexOf('/') + 1);\r\n        options.params = data[1];\r\n        let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        options.headers = headersObject;\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all([this.p1]).then(() => {\r\n                var ft = new window[\"FileTransfer\"]();\r\n                ft.onprogress = (progressEvent) => {\r\n                    if (progressEvent.lengthComputable) {\r\n                        this.handleProgress(progressEvent, progress, parameters, c8oResponseListener, varNull);\r\n                    }\r\n                };\r\n                ft.upload(files[0][1], encodeURI(url), ((resp => {\r\n                    resolve(resp);\r\n                })), ((err) => {\r\n                    reject(err);\r\n                }), options);\r\n            })\r\n                .catch(() => {\r\n                var ft = new window[\"FileTransfer\"]();\r\n                ft.onprogress = (progressEvent) => {\r\n                    if (progressEvent.lengthComputable) {\r\n                        this.handleProgress(progressEvent, progress, parameters, c8oResponseListener, varNull);\r\n                    }\r\n                };\r\n                ft.upload(files[0][1], encodeURI(url), ((resp => {\r\n                    resolve(resp);\r\n                })), ((err) => {\r\n                    reject(err);\r\n                }), options);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Upload File using an Http client\r\n     * @param {string} url\r\n     * @param {FormData} form\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    uploadFileHttp(url, form, parameters, c8oResponseListener) {\r\n        let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        let progress = new C8oProgress();\r\n        progress.pull = false;\r\n        let varNull = null;\r\n        if (this.firstCall) {\r\n            this.p1 = new Promise((resolve) => {\r\n                this.firstCall = false;\r\n                this.getuploadRequester(url, form, headersObject)\r\n                    .subscribe(event => {\r\n                    this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                }, error => {\r\n                    this.handleErrorFileUpload(error, resolve);\r\n                });\r\n            });\r\n            return this.p1;\r\n        }\r\n        else {\r\n            return new Promise((resolve, reject) => {\r\n                Promise.all([this.p1]).then(() => {\r\n                    this.getuploadRequester(url, form, headersObject)\r\n                        .subscribe(event => {\r\n                        this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                    }, error => {\r\n                        this.handleErrorFileUpload(error, resolve);\r\n                    });\r\n                })\r\n                    .catch(() => {\r\n                    this.getuploadRequester(url, form, headersObject)\r\n                        .subscribe(event => {\r\n                        this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                    }, error => {\r\n                        this.handleErrorFileUpload(error, resolve);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * handle FileuploadResponses\r\n     * @param event\r\n     * @param progress\r\n     * @param parameters\r\n     * @param c8oResponseListener\r\n     * @param varNull\r\n     * @param resolve\r\n     */\r\n    handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve) {\r\n        if (!this.js) {\r\n            if (event.type === 1) {\r\n                this.handleProgress(event, progress, parameters, c8oResponseListener, varNull);\r\n            }\r\n            else if (this.isHttpResponse(event)) {\r\n                resolve(event.body);\r\n            }\r\n        }\r\n        else {\r\n            if (event.type == \"progress\") {\r\n                this.handleProgress(event.response, progress, parameters, c8oResponseListener, varNull);\r\n            }\r\n            else {\r\n                resolve(event.response);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Handle errors for file upload\r\n     * @param error\r\n     * @param resolve\r\n     */\r\n    handleErrorFileUpload(error, resolve) {\r\n        resolve({ \"error\": (new C8oHttpRequestException(C8oExceptionMessage.runHttpRequest(), error)) });\r\n    }\r\n    /**\r\n     * Handle progress\r\n     * @param event\r\n     * @param {C8oProgress} progress\r\n     * @param parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @param {JSON} varNull\r\n     */\r\n    handleProgress(event, progress, parameters, c8oResponseListener, varNull) {\r\n        progress.current = event.loaded;\r\n        progress.total = event.total;\r\n        if (event.loaded != event.total) {\r\n            progress.finished = false;\r\n        }\r\n        else {\r\n            progress.finished = true;\r\n        }\r\n        parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n        c8oResponseListener.onJsonResponse(varNull, parameters);\r\n    }\r\n}\n\n/**\r\n * Contains optional parameters of a C8o class instantiation.<br/>\r\n * Note that setters return the setting instance thereby C8oSettings can be instantiate like that:<br/>\r\n * new C8oSettings().setTimeout(5000).setTrustAllCertificates(true).setUseEncryption(true);\r\n *\r\n */\r\nclass C8oSettings extends C8oBase {\r\n    constructor(c8oSettings = null) {\r\n        super();\r\n        if (c8oSettings != null) {\r\n            if (c8oSettings != null) {\r\n                this.copy(c8oSettings);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Clone C8osettings object\r\n     * @return {C8oSettings}\r\n     */\r\n    clone() {\r\n        return new C8oSettings(this);\r\n    }\r\n    /**\r\n     * Sets the normalizeParameters. define if we normalize parameters of every calls using JSON.parse(JSON.stringify(parameters))<br/>\r\n     * @param normalize boolean.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setUseWorker(worker) {\r\n        this._useworker = worker;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the normalizeParameters. define if we normalize parameters of every calls using JSON.parse(JSON.stringify(parameters))<br/>\r\n     * @param normalize boolean.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setNormalizeParameters(normalize) {\r\n        this._normalizeParameters = normalize;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the if session has to be maintain alive<br/>\r\n     * @param keepAlive if session has to be keep Alive\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setKeepSessionAlive(keepAlive) {\r\n        this._keepSessionAlive = keepAlive;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets if the error convertigo is throw in fail or not<br/>\r\n     * @param errorConvertigoIntoFail boolean\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setErrorConvertigoIntoFail(errorConvertigoIntoFail) {\r\n        this._errorConvertigoIntoFail = errorConvertigoIntoFail;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the if base has to be reseted on dectecting diffrent versions<br/>\r\n     * @param resetBase if you to able reset base\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setDisableResetBase(resetBase) {\r\n        this._resetBase = resetBase;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the if base has to be prefixed by user name<br/>\r\n     * @param prefixBase if you to able prefix base\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setEnablePrefixBase(prefixBase) {\r\n        this._prefixBase = prefixBase;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the endpoint (override env.json).<br/>\r\n     * @param endpoint The endpoint.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setEndPoint(endpoint) {\r\n        this._endpointSettings = endpoint;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the connection timeout to Convertigo in milliseconds. A value of zero means the timeout is not used.<br/>\r\n     * Default is <b>0</b>.\r\n     * @param timeout The timeout.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setTimeout(timeout) {\r\n        if (timeout <= 0) {\r\n            timeout = -1;\r\n        }\r\n        this._timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Add a header\r\n     * @param name The name of header.\r\n     * @param value The value of header.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    addHeader(name, value) {\r\n        this._headers[name] = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * addClientCertificate\r\n     * @param anyCertificate\r\n     * @param {string} password\r\n     * @return {C8oSettings}\r\n     */\r\n    addClientCertificate(anyCertificate, password) {\r\n        if (typeof anyCertificate === \"string\") {\r\n            if (this._clientCertificateFiles == null) {\r\n                this._clientCertificateFiles = {};\r\n            }\r\n            this._clientCertificateFiles[anyCertificate] = password;\r\n        }\r\n        else if (typeof anyCertificate === \"number\") {\r\n            if (this._clientCertificateBinaries == null) {\r\n                this._clientCertificateBinaries = {};\r\n            }\r\n            this._clientCertificateBinaries[anyCertificate] = password;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Add a new cookie to the initial cookies send to the Convertigo server.\r\n     * @param name The name of the new cookie.\r\n     * @param value The value of the new cookie.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    addCookie(name, value) {\r\n        if (this._cookies == null) {\r\n            this._cookies = {};\r\n        }\r\n        this._cookies[name] = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a value indicating if logs are sent to the Convertigo server.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setLogRemote(logRemote) {\r\n        this._logRemote = logRemote;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a value indicating the log level you want in the device console\r\n     * 0: ALL, 1: NONE, 2: TRACE, 3: DEBUG, 4: INFO, 5: WARN, 6: ERROR, 7: FATAL\r\n     * or use the android.util.Log constants\r\n     * Default is <b>0</b>.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setLogLevelLocal(logLevelLocal) {\r\n        this._logLevelLocal = logLevelLocal;\r\n        return this;\r\n    }\r\n    /**\r\n     * setLogC8o\r\n     * @param {boolean} logC8o\r\n     * @return {C8oSettings}\r\n     */\r\n    setLogC8o(logC8o) {\r\n        this._logC8o = logC8o;\r\n        return this;\r\n    }\r\n    /**\r\n     * setLogOnFail\r\n     * @param {(exception: Error, parameters: Object) => void} logOnFail\r\n     * @return {C8oSettings}\r\n     */\r\n    setLogOnFail(logOnFail) {\r\n        this._logOnFail = logOnFail;\r\n        return this;\r\n    }\r\n    /**\r\n     * Specify the default FullSync database name. Must match a Convertigo Server\r\n     * FullSync connector name\r\n     *\r\n     * @param defaultDatabaseName: string\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setDefaultDatabaseName(defaultDatabaseName) {\r\n        this._defaultDatabaseName = defaultDatabaseName;\r\n        return this;\r\n    }\r\n    /**\r\n     * setAuthenticationCookieValue\r\n     * @param {string} authenticationCookieValue\r\n     * @return {C8oSettings}\r\n     */\r\n    setAuthenticationCookieValue(authenticationCookieValue) {\r\n        this._authenticationCookieValue = authenticationCookieValue;\r\n        return this;\r\n    }\r\n    /**\r\n     * setFullSyncServerUrl\r\n     * @param {string} fullSyncServerUrl\r\n     * @return {C8oSettings}\r\n     */\r\n    setFullSyncServerUrl(fullSyncServerUrl) {\r\n        this._fullSyncServerUrl = fullSyncServerUrl;\r\n        return this;\r\n    }\r\n    /**\r\n     * setFullSyncUsername\r\n     * @param {string} fullSyncUsername\r\n     * @return {C8oSettings}\r\n     */\r\n    setFullSyncUsername(fullSyncUsername) {\r\n        this._fullSyncUsername = fullSyncUsername;\r\n        return this;\r\n    }\r\n    /**\r\n     * setFullSyncPassword\r\n     * @param {string} fullSyncPassword\r\n     * @return {C8oSettings}\r\n     */\r\n    setFullSyncPassword(fullSyncPassword) {\r\n        this._fullSyncPassword = fullSyncPassword;\r\n        return this;\r\n    }\r\n    /**\r\n     * setFullSyncLocalSuffix\r\n     * @param {string} fullSyncLocalSuffix\r\n     * @return {C8oSettings}\r\n     */\r\n    setFullSyncLocalSuffix(fullSyncLocalSuffix) {\r\n        this._fullSyncLocalSuffix = fullSyncLocalSuffix;\r\n        return this;\r\n    }\r\n    /**\r\n     * Set if c8o calls variables are encrypted or not\r\n     *\r\n     * @param useEncryption\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setUseEncryption(useEncryption) {\r\n        this._useEncryption = useEncryption;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * Defines whether the response should be retrieved from local cache or from Convertigo server when the device can access the network.<br/>\r\n * When the device has no network access, the local cache response is used, if existing.\r\n */\r\nclass Priority {\r\n    constructor(isAvailable) {\r\n        this.isAvailable = isAvailable;\r\n    }\r\n}\r\n//noinspection JSUnusedLocalSymbols\r\nPriority.SERVER = new Priority(false);\r\n//noinspection JSUnusedLocalSymbols\r\nPriority.LOCAL = new Priority(true);\n\nclass C8oHttpInterface extends C8oHttpInterfaceCore {\r\n    constructor(c8o) {\r\n        super(c8o, false);\r\n    }\r\n    /**\r\n     * get headers;\r\n     * @param object headers object\r\n     */\r\n    getHeaders(object) {\r\n        return new HttpHeaders(object);\r\n    }\r\n    /**\r\n     * Angular implementation to post with progress\r\n     * @param url the url to post\r\n     * @param form the form data to post\r\n     * @param headersObject Headers to use\r\n     */\r\n    getuploadRequester(url, form, headersObject) {\r\n        let headers = new HttpHeaders(headersObject);\r\n        const httpRequest = new HttpRequest('POST', url, form, { reportProgress: true, withCredentials: true, headers: headers });\r\n        return this.c8o.httpPublic.request(httpRequest);\r\n    }\r\n    /**\r\n     * test type of request\r\n     * @param event any\r\n     */\r\n    isHttpResponse(event) {\r\n        return (event instanceof HttpResponse);\r\n    }\r\n}\n\nclass C8o extends C8oCore {\r\n    constructor(http) {\r\n        super();\r\n        this.http = http;\r\n        this._http = http;\r\n    }\r\n    /**\r\n     * get current sdk version\r\n     */\r\n    get sdkVersion() {\r\n        return \"3.0.16-beta49\";\r\n    }\r\n    /**\r\n     * Method to bastract http get\r\n     * @param uri the uri for given request\r\n     */\r\n    httpGetObservable(uri) {\r\n        return this.httpPublic.get(uri);\r\n    }\r\n    /**\r\n     * Init http interface in client sdk\r\n     */\r\n    initC8oHttInterface() {\r\n        this.httpInterface = new C8oHttpInterface(this);\r\n    }\r\n}\r\nC8o.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8o, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\r\nC8o.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8o });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8o, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass C8oUtils extends C8oUtilsCore {\r\n    constructor(http) {\r\n        super();\r\n        this.http = http;\r\n        this.http = http;\r\n    }\r\n}\r\nC8oUtils.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8oUtils, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\r\nC8oUtils.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8oUtils });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8oUtils, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass HttpXsrfInterceptor {\r\n    constructor(tokenExtractor, c8o) {\r\n        this.tokenExtractor = tokenExtractor;\r\n        this.c8o = c8o;\r\n        this.headerName = \"x-xsrf-token\";\r\n        this.fetch = \"Fetch\";\r\n        this.c8o.xsrfUsed = true;\r\n    }\r\n    intercept(req, next) {\r\n        // get stored headerValue or fetch if the is no stored headerValue\r\n        const headerValue = window.localStorage.getItem(this.headerName) != undefined ? window.localStorage.getItem(this.headerName) : this.fetch;\r\n        // clone request adding xsrf header\r\n        req = req.clone({ headers: req.headers.set(this.headerName, headerValue) });\r\n        // re-execute request, and get HttResponses or HttpErrorResponses\r\n        return next.handle(req)\r\n            .pipe(filter(event => event instanceof HttpResponse || event instanceof HttpErrorResponse), tap((event) => {\r\n            // get and store new xsrf value\r\n            const xsrfResponseHeader = event[\"headers\"][\"get\"](this.headerName);\r\n            xsrfResponseHeader != undefined ? window.localStorage.setItem(this.headerName, xsrfResponseHeader) : null;\r\n        }));\r\n    }\r\n}\r\nHttpXsrfInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i1.HttpXsrfTokenExtractor }, { token: C8o }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHttpXsrfInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: HttpXsrfInterceptor });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i1.HttpXsrfTokenExtractor }, { type: C8o }]; } });\n\n/*\r\n * Public API Surface of c8osdkangular\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { C8o, C8oAlldocsLocal, C8oBase, C8oCallTask, C8oCore, C8oCouchBaseLiteException, C8oException, C8oExceptionListener, C8oExceptionMessage, C8oFullSync, C8oFullSyncCbl, C8oFullSyncChangeListener, C8oFullSyncDatabase, C8oFullSyncTranslator, C8oHttpInterface, C8oHttpInterfaceCore, C8oHttpRequestException, C8oLocalCache, C8oLocalCacheResponse, C8oLogLevel, C8oLogger, C8oManagerDatabase, C8oManagerLogin, C8oManagerNetwork, C8oManagerSession, C8oNetworkStatus, C8oProgress, C8oPromise, C8oReplicationStatus, C8oResponseJsonListener, C8oResponseProgressListener, C8oRessourceNotFoundException, C8oSessionStatus, C8oSessionUser, C8oSettings, C8oTranslator, C8oUnavailableLocalCacheException, C8oUtils, C8oUtilsCore, FullSyncAbstractResponse, FullSyncAttachmentParameter, FullSyncDefaultResponse, FullSyncDeleteDocumentParameter, FullSyncDocumentOperationResponse, FullSyncGetDocumentParameter, FullSyncGetViewParameter, FullSyncPolicy, FullSyncPostDocumentParameter, FullSyncReplication, FullSyncRequestable, FullSyncResponse, HttpXsrfInterceptor, Priority, Queue, Semaphore };\n//# sourceMappingURL=c8osdkangular.mjs.map\n","map":{"version":3,"file":"c8osdkangular.mjs","sources":["../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oLogLevel.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oBase.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oUtilsCore.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oException.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oExceptionMessage.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oLogger.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oFullSyncTranslator.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oLocalCacheResponse.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oResponse.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oCouchBaseLiteException.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oRessourceNotFoundException.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oUnavailableLocalCacheException.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oProgress.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncReplication.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oload.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncDatabase.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncDeleteDocumentParameter.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncAttachmentParameter.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncGetDocumentParameter.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncGetViewParameter.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncRequestable.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncResponse.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oAlldocsLocal.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oFullSync.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oLocalCache.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oTranslator.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oHttpRequestException.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oCallTask.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oFullSyncChangeListener.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oPromise.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oExceptionListener.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oNetworkStatus.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oManagerNetwork.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oSessionStatus.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/C8oReplicationStatus.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oManagerDatabase.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oManagerLogin.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/C8oSessionUser.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oManagerSession.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oCore.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oHttpInterfaceCore.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oSettings.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/priority.service.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/lib/c8oHttpInterface.service.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/lib/c8o.service.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/lib/c8oUtils.service.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/lib/c8oHttpxsrfInterceptor.service.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/public_api.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdkangular.ts"],"sourcesContent":["export class C8oLogLevel {\r\n    // private static JSON_KEY_REMOTE_LOG_LEVEL: string = \"remoteLogLevel\";\r\n\r\n    public static NULL: C8oLogLevel = new C8oLogLevel(\"\", 0);\r\n    public static NONE: C8oLogLevel = new C8oLogLevel(\"none\", 1);\r\n    public static TRACE: C8oLogLevel = new C8oLogLevel(\"trace\", 2);\r\n    public static DEBUG: C8oLogLevel = new C8oLogLevel(\"debug\", 3);\r\n    public static INFO: C8oLogLevel = new C8oLogLevel(\"info\", 4);\r\n    public static WARN: C8oLogLevel = new C8oLogLevel(\"warn\", 5);\r\n    public static ERROR: C8oLogLevel = new C8oLogLevel(\"error\", 6);\r\n    public static FATAL: C8oLogLevel = new C8oLogLevel(\"fatal\", 7);\r\n\r\n    public static C8O_LOG_LEVELS = [C8oLogLevel.NULL, C8oLogLevel.NONE, C8oLogLevel.TRACE, C8oLogLevel.DEBUG, C8oLogLevel.INFO, C8oLogLevel.WARN, C8oLogLevel.ERROR, C8oLogLevel.FATAL];\r\n\r\n    public name: string;\r\n    public priority: number;\r\n\r\n    constructor(name: string, priority: number) {\r\n        this.name = name;\r\n        this.priority = priority;\r\n    }\r\n\r\n    public static getC8oLogLevel(name: string): C8oLogLevel {\r\n        for (let i = 0; i <= C8oLogLevel.C8O_LOG_LEVELS.length; i++) {\r\n            if (C8oLogLevel.C8O_LOG_LEVELS[i].name === name) {\r\n                return C8oLogLevel.C8O_LOG_LEVELS[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import {C8oLogLevel} from \"./c8oLogLevel\";\r\n\r\nexport class C8oBase {\r\n    /*HTTP*/\r\n    protected _endpointSettings: string;\r\n    protected _timeout: number = 3600000;\r\n    // protected _trustAllCertificates: boolean = false;\r\n    protected _cookies: Object = {};\r\n    protected _clientCertificateFiles: Object;\r\n    protected _clientCertificateBinaries: Object;\r\n\r\n    /*Log*/\r\n    protected _logRemote: boolean = true;\r\n    protected _initialLogRemote: boolean = true;\r\n    protected _logLevelLocal: C8oLogLevel = C8oLogLevel.NONE;\r\n    protected _logC8o: boolean = false;\r\n    protected _logOnFail: (exception: Error, parameters: Object) => void;\r\n\r\n    /* FullSync */\r\n    protected _defaultDatabaseName: string = null;\r\n    protected _authenticationCookieValue: string = null;\r\n    protected _fullSyncLocalSuffix: string = null;\r\n    protected _fullSyncServerUrl: string = \"http://localhost:5984\";\r\n    protected _fullSyncUsername: string;\r\n    protected _fullSyncPassword: string;\r\n\r\n    /* Encryption */\r\n    protected _useEncryption: boolean = false;\r\n    protected _disableSSL: boolean = false;\r\n    //noinspection JSUnusedGlobalSymbols\r\n    protected _keyStorePassword: string;\r\n    //noinspection JSUnusedGlobalSymbols\r\n    protected _trustStorePassword: string;\r\n\r\n    //Dates\r\n    protected _normalizeParameters: boolean;\r\n\r\n    //Dates\r\n    protected _useworker: boolean = false;\r\n\r\n    protected _keepSessionAlive: boolean = true;\r\n\r\n    protected _errorConvertigoIntoFail: boolean = false;\r\n\r\n    protected _resetBase: boolean = true;\r\n    \r\n    protected _prefixBase: boolean = false;\r\n\r\n    protected _headers: Object = {};\r\n    \r\n    protected _initalLogLevel: Boolean;\r\n    /** Getters **/\r\n\r\n    /**\r\n     * Gets if normalize parameters.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The timeout.\r\n     */\r\n     public get usewroker(): boolean {\r\n        return this._useworker;\r\n    }\r\n\r\n    /**\r\n     * Gets if normalize parameters.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The timeout.\r\n     */\r\n    public get normalizeParameters(): boolean {\r\n        return this._normalizeParameters;\r\n    }\r\n    /**\r\n     * Gets if session has to be keep alive.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The KeepSessionAlive status.\r\n     */\r\n    public get keepSessionAlive(): boolean {\r\n        return this._keepSessionAlive;\r\n    }\r\n\r\n    /**\r\n     * Gets if error convertigo are thrown into fail.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The errorConvertigoIntoFail status.\r\n     */\r\n    public get errorConvertigoIntoFail(): boolean {\r\n        return this._errorConvertigoIntoFail;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Gets if reset database is disabled.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The disable reset base status.\r\n     */\r\n    public get resetBase(): boolean {\r\n        return this._resetBase;\r\n    }\r\n\r\n    /**\r\n     * Gets if we have to prefix databases with user name.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The prefix base status.\r\n     */\r\n    public get prefixBase(): boolean {\r\n        return this._prefixBase;\r\n    }\r\n    \r\n    /**\r\n     * Gets the connection timeout to Convertigo in milliseconds. A value of zero means the timeout is not used.<br/>\r\n     * Default is <b>0</b>.\r\n     * @returns The timeout.\r\n     */\r\n    public get timeout(): number {\r\n        return this._timeout;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating whether https calls trust all certificates or not.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns <b>true</b> if https calls trust all certificates; otherwise, <b>false</b>.\r\n     */\r\n    /*public get trustAllCertificates(): boolean {\r\n        return this._trustAllCertificates;\r\n    }*/\r\n\r\n    /**\r\n     * Gets initial cookies to send to the Convertigo server.<br/>\r\n     * Default is <b>null</b>.\r\n     * @returns List of cookies.\r\n     */\r\n    public get cookies(): Object {\r\n        return this._cookies;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating if logs are sent to the Convertigo server.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns <b>true</b> if logs are sent to the Convertigo server; otherwise, <b>false</b>.\r\n     */\r\n    public get logRemote(): boolean {\r\n        return this._logRemote;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating logs level local\r\n     *\r\n     * @returns C8oLogLevel object\r\n     */\r\n    public get logLevelLocal(): C8oLogLevel {\r\n        return this._logLevelLocal;\r\n    }\r\n\r\n    public get logC8o(): boolean {\r\n        return this._logC8o;\r\n    }\r\n\r\n    public get defaultDatabaseName(): string {\r\n        return this._defaultDatabaseName;\r\n    }\r\n\r\n    public get authenticationCookieValue(): string {\r\n        return this._authenticationCookieValue;\r\n    }\r\n\r\n    public get fullSyncLocalSuffix(): string {\r\n        return this._fullSyncLocalSuffix;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get fullSyncServerUrl(): string {\r\n        return this._fullSyncServerUrl;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get fullSyncUsername(): string {\r\n        return this._fullSyncUsername;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get fullSyncPassword(): string {\r\n        return this._fullSyncPassword;\r\n    }\r\n\r\n    public get logOnFail(): (exception: Error, parameters: Object) => void {\r\n        return this._logOnFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint define in C8oSettings<br/>\r\n     * @returns The current <b>endpoint</b>, if defined by c8oSettings.\r\n     */\r\n    public get endpoint(): string {\r\n        return this._endpointSettings;\r\n    }\r\n\r\n    public get headers(): Object {\r\n        return this._headers;\r\n    }\r\n\r\n    public copy(c8oBase: C8oBase) {\r\n        if (c8oBase !== undefined) {\r\n            /** HTTP **/\r\n            this._timeout = c8oBase._timeout;\r\n            // this._trustAllCertificates = c8oBase._trustAllCertificates;\r\n            if (this.cookies == null) {\r\n                this._cookies = {};\r\n            }\r\n            if (c8oBase.cookies !== null) {\r\n                this._cookies = c8oBase._cookies;\r\n            }\r\n\r\n            /** Log **/\r\n            this._logRemote = c8oBase.logRemote;\r\n            this._initialLogRemote = c8oBase.logRemote;\r\n            this._logLevelLocal = c8oBase.logLevelLocal;\r\n            this._logC8o = c8oBase.logC8o;\r\n            this._logOnFail = c8oBase.logOnFail;\r\n\r\n            /** FullSync **/\r\n            this._defaultDatabaseName = c8oBase.defaultDatabaseName;\r\n            this._authenticationCookieValue = c8oBase.authenticationCookieValue;\r\n            this._fullSyncLocalSuffix = c8oBase.fullSyncLocalSuffix;\r\n\r\n            this._fullSyncServerUrl = c8oBase.fullSyncServerUrl;\r\n            this._fullSyncUsername = c8oBase.fullSyncUsername;\r\n            this._fullSyncPassword = c8oBase.fullSyncPassword;\r\n            this._headers = c8oBase._headers;\r\n\r\n            /** Date **/\r\n            this._normalizeParameters = c8oBase._normalizeParameters;\r\n\r\n            /**Keep ALive */\r\n            this._keepSessionAlive = c8oBase._keepSessionAlive;\r\n\r\n            /** Reset base */\r\n            this._resetBase = c8oBase._resetBase;\r\n            /** Reset base */\r\n            this._prefixBase = c8oBase._prefixBase;\r\n            this._errorConvertigoIntoFail = c8oBase._errorConvertigoIntoFail;\r\n            this._useworker = c8oBase.usewroker;\r\n            \r\n        }\r\n    }\r\n}\r\n","// @dynamic\r\n\r\nexport class C8oUtilsCore {\r\n\r\n    /** FullSync parameters prefix. **/\r\n    private static USE_PARAMETER_IDENTIFIER: string = \"_use_\";\r\n    public data: JSON;\r\n\r\n    public constructor() {\r\n    }\r\n\r\n    /**\r\n     * Returns the class name of the object as a String, if the object is null then returns the String \"null\".\r\n     *\r\n     * @param object\r\n     * @returns string\r\n     */\r\n    public static getObjectClassName(object: any) {\r\n        return typeof object;\r\n    }\r\n\r\n    public static isValidUrl(url: string): boolean {\r\n        return /^(http|https):\\/\\/[^ \"]+$/.test(url.toString());\r\n    }\r\n\r\n    /**\r\n     * returns 128 bits hash using MD5 algo \r\n     * @param str any string\r\n     */\r\n    public static MD5(str: string):string{\r\n        const MD5 = (d) => {var r = M(V(Y(X(d),8*d.length)));return r.toLowerCase()};function M(d){for(var _,m=\"0123456789ABCDEF\",f=\"\",r=0;r<d.length;r++)_=d.charCodeAt(r),f+=m.charAt(_>>>4&15)+m.charAt(15&_);return f}function X(d){for(var _=Array(d.length>>2),m=0;m<_.length;m++)_[m]=0;for(m=0;m<8*d.length;m+=8)_[m>>5]|=(255&d.charCodeAt(m/8))<<m%32;return _}function V(d){for(var _=\"\",m=0;m<32*d.length;m+=8)_+=String.fromCharCode(d[m>>5]>>>m%32&255);return _}function Y(d,_){d[_>>5]|=128<<_%32,d[14+(_+64>>>9<<4)]=_;for(var m=1732584193,f=-271733879,r=-1732584194,i=271733878,n=0;n<d.length;n+=16){var h=m,t=f,g=r,e=i;f=md5_ii(f=md5_ii(f=md5_ii(f=md5_ii(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_ff(f=md5_ff(f=md5_ff(f=md5_ff(f,r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+0],7,-680876936),f,r,d[n+1],12,-389564586),m,f,d[n+2],17,606105819),i,m,d[n+3],22,-1044525330),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+4],7,-176418897),f,r,d[n+5],12,1200080426),m,f,d[n+6],17,-1473231341),i,m,d[n+7],22,-45705983),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+8],7,1770035416),f,r,d[n+9],12,-1958414417),m,f,d[n+10],17,-42063),i,m,d[n+11],22,-1990404162),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+12],7,1804603682),f,r,d[n+13],12,-40341101),m,f,d[n+14],17,-1502002290),i,m,d[n+15],22,1236535329),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+1],5,-165796510),f,r,d[n+6],9,-1069501632),m,f,d[n+11],14,643717713),i,m,d[n+0],20,-373897302),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+5],5,-701558691),f,r,d[n+10],9,38016083),m,f,d[n+15],14,-660478335),i,m,d[n+4],20,-405537848),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+9],5,568446438),f,r,d[n+14],9,-1019803690),m,f,d[n+3],14,-187363961),i,m,d[n+8],20,1163531501),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+13],5,-1444681467),f,r,d[n+2],9,-51403784),m,f,d[n+7],14,1735328473),i,m,d[n+12],20,-1926607734),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+5],4,-378558),f,r,d[n+8],11,-2022574463),m,f,d[n+11],16,1839030562),i,m,d[n+14],23,-35309556),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+1],4,-1530992060),f,r,d[n+4],11,1272893353),m,f,d[n+7],16,-155497632),i,m,d[n+10],23,-1094730640),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+13],4,681279174),f,r,d[n+0],11,-358537222),m,f,d[n+3],16,-722521979),i,m,d[n+6],23,76029189),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+9],4,-640364487),f,r,d[n+12],11,-421815835),m,f,d[n+15],16,530742520),i,m,d[n+2],23,-995338651),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+0],6,-198630844),f,r,d[n+7],10,1126891415),m,f,d[n+14],15,-1416354905),i,m,d[n+5],21,-57434055),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+12],6,1700485571),f,r,d[n+3],10,-1894986606),m,f,d[n+10],15,-1051523),i,m,d[n+1],21,-2054922799),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+8],6,1873313359),f,r,d[n+15],10,-30611744),m,f,d[n+6],15,-1560198380),i,m,d[n+13],21,1309151649),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+4],6,-145523070),f,r,d[n+11],10,-1120210379),m,f,d[n+2],15,718787259),i,m,d[n+9],21,-343485551),m=safe_add(m,h),f=safe_add(f,t),r=safe_add(r,g),i=safe_add(i,e)}return Array(m,f,r,i)}function md5_cmn(d,_,m,f,r,i){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,i)),r),m)}function md5_ff(d,_,m,f,r,i,n){return md5_cmn(_&m|~_&f,d,_,r,i,n)}function md5_gg(d,_,m,f,r,i,n){return md5_cmn(_&f|m&~f,d,_,r,i,n)}function md5_hh(d,_,m,f,r,i,n){return md5_cmn(_^m^f,d,_,r,i,n)}function md5_ii(d,_,m,f,r,i,n){return md5_cmn(m^(_|~f),d,_,r,i,n)}function safe_add(d,_){var m=(65535&d)+(65535&_);return(d>>16)+(_>>16)+(m>>16)<<16|65535&m}function bit_rol(d,_){return d<<_|d>>>32-_}\r\n        return MD5(str);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param str any string\r\n     */\r\n    public static MD5ArrayBuffer(str): any{\r\n        const MD5str = C8oUtilsCore.MD5(str);\r\n        return Buffer.from(MD5str, 'utf-8').slice(0,16);\r\n    }\r\n    \r\n    public static getNewGUIDString(): string {\r\n        if(window[\"device\"] != undefined){\r\n            let platform: string = window[\"device\"][\"platform\"];\r\n            platform = platform.substring(0,3);\r\n            let uuid = platform +\"-\"+ window[\"device\"][\"uuid\"];\r\n            return uuid;\r\n        }\r\n        else{\r\n            let uuidStored: string = localStorage.getItem(\"__c8o_uuid\");\r\n\r\n            if(uuidStored != undefined && uuidStored != \"\"){\r\n                return uuidStored;\r\n            }\r\n            else{\r\n                let platform: string = \"web-\";\r\n                let d = new Date().getTime();\r\n                let uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\r\n                    const r = (d + Math.random() * 16) % 16 | 0;\r\n                    d = Math.floor(d / 16);\r\n                    return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\r\n                });\r\n                uuid = platform + uuid;\r\n                localStorage.setItem(\"__c8o_uuid\", uuid);\r\n                return uuid;\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    /** TAG Parameter **/\r\n\r\n    public static getParameter(parameters: Object, name: string, useName: boolean): any {\r\n        for (let _i = 0; _i < Object.keys(parameters).length; _i++) {\r\n            const parameterName = Object.keys(parameters)[_i];\r\n            if ((name === parameterName) || (useName && name === this.USE_PARAMETER_IDENTIFIER + parameterName)) {\r\n                const obj = {};\r\n                obj[Object.keys(parameters)[_i]] = parameters[Object.keys(parameters)[_i]];\r\n                return obj;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Searches in the list the parameter with this specific name (or the same name with the prefix '_use_') and returns it.<br/>\r\n     * Returns null if the parameter is not found.\r\n     *\r\n     * @param parameters\r\n     * @param name\r\n     * @param useName\r\n     * @returns string\r\n     */\r\n    public static getParameterStringValue(parameters: Object, name: string, useName: boolean): string {\r\n        const parameter = C8oUtilsCore.getParameter(parameters, name, useName);\r\n        if (parameter != null) {\r\n            return \"\" + parameter[name];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static getParameterObjectValue(parameters: Object, name: string, useName: boolean = false): any {\r\n        //noinspection UnnecessaryLocalVariableJS\r\n        const parameters2 = parameters;\r\n        const parameter = C8oUtilsCore.getParameter(parameters2, name, useName);\r\n        if (parameter != null) {\r\n            return parameter[name];\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    public static peekParameterStringValue(parameters: Object, name: string, exceptionIfMissing: boolean): string {\r\n        //noinspection UnnecessaryLocalVariableJS\r\n        const parameters2 = parameters;\r\n        const value: string = this.getParameterStringValue(parameters2, name, false);\r\n        if (value == null) {\r\n            if (exceptionIfMissing) {\r\n                throw new Error(\"The parameter '\" + name + \"' is missing\");\r\n            }\r\n        } else {\r\n            delete parameters[name];\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public static peekParameterObjectValue(parameters: Object, name: string, exceptionIfMissing: boolean): string {\r\n        const parameters2 = parameters;\r\n        const value: string = this.getParameterObjectValue(parameters2, name, false);\r\n        if (value == null) {\r\n            if (exceptionIfMissing) {\r\n                throw new Error(\"The parameter '\" + name + \"' is missing\");\r\n            }\r\n        } else {\r\n            delete parameters2[name];\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Serializes a c8o call request thanks to its parameters and response type.\r\n     *\r\n     * @param parameters\r\n     * @param responseType\r\n     * @returns string\r\n     * @throws C8oException\r\n     */\r\n    public static identifyC8oCallRequest(parameters: Object, responseType: string): string {\r\n        return responseType + JSON.stringify(parameters);\r\n    }\r\n\r\n    public static checkHeaderArgument(response, argument){\r\n        return response.headers.get(argument);\r\n    }\r\n}\r\n\r\nexport class Queue<T> {\r\n    public _store: T[] = [];\r\n\r\n    public push(val: T) {\r\n        this._store.push(val);\r\n    }\r\n\r\n    public pop(): T {\r\n        return this._store.shift();\r\n    }\r\n\r\n    public count(): number {\r\n        return this._store.length;\r\n    }\r\n}\r\n\r\n\r\nexport class Semaphore {\r\n    private max: number;\r\n    private counter = 0;\r\n    private waiting = [];\r\n\r\n    constructor(max){\r\n        this.max = max;\r\n    }\r\n    \r\n    \r\n    public take () {\r\n      if (this.waiting.length > 0 && this.counter < this.max){\r\n        this.counter++;\r\n        let promise = this.waiting.shift();\r\n        promise.resolve();\r\n      }\r\n    }\r\n    \r\n    public acquire () {\r\n      if(this.counter < this.max) {\r\n        this.counter++\r\n        return new Promise<void>(resolve => {\r\n        resolve();\r\n      });\r\n      } else {\r\n        return new Promise((resolve, err) => {\r\n          this.waiting.push({resolve: resolve, err: err});\r\n        });\r\n      }\r\n    }\r\n      \r\n    public release (arg = null) {\r\n     this.counter--;\r\n     this.take();\r\n    }\r\n    \r\n    public purge () {\r\n      let unresolved = this.waiting.length;\r\n    \r\n      for (let i = 0; i < unresolved; i++) {\r\n        this.waiting[i].err('Task has been purged.');\r\n      }\r\n    \r\n      this.counter = 0;\r\n      this.waiting = [];\r\n      \r\n      return unresolved;\r\n    }\r\n  }\r\n","/**\r\n * Thrown specific exceptions to Convertigo.\r\n */\r\nexport class C8oException extends Error {\r\n\r\n    public override message: string;\r\n    protected _cause: Error;\r\n\r\n    constructor(message: string);\r\n    constructor(message: string, cause: Error);\r\n    constructor(message: string, cause: Error, all: boolean);\r\n    //noinspection JSUnusedLocalSymbols\r\n    constructor(message: string, cause: Error = null, all: boolean = false) {\r\n        if (cause == null) {\r\n            super(message);\r\n            this.message = message;\r\n            // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n            Object.setPrototypeOf(this, C8oException.prototype);\r\n        }\r\n        else {\r\n            super(message);\r\n            this.message = message;\r\n            this._cause = cause;\r\n            // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n            Object.setPrototypeOf(this, C8oException.prototype);\r\n        }\r\n    }\r\n    public get cause(): Error{\r\n        return this._cause;\r\n    }\r\n\r\n    public toJSON(){\r\n        var alt = {};\r\n        Object.getOwnPropertyNames(this).forEach(function (key) {\r\n            alt[key] = this[key];\r\n        }, this);\r\n        return alt;\r\n    }\r\n    \r\n    public override toString(){\r\n        var alt = {};\r\n        Object.getOwnPropertyNames(this).forEach(function (key) {\r\n            alt[key] = this[key];\r\n        }, this);\r\n        return alt;\r\n    }\r\n}","import {C8oResponseListener} from \"../c8oResponse\";\r\nimport {C8oUtilsCore} from \"../c8oUtilsCore\";\r\n/**\r\n * Contains static Functions returning the exception messages\r\n * in order to make simpler their modification and avoid duplication.\r\n */\r\nexport class C8oExceptionMessage {\r\n\r\n    /** TAG Illegal argument **/\r\n    static notImplementedFullSyncInterface(): string {\r\n        return \"You are using the default FullSyncInterface which is not implemented\";\r\n    }\r\n\r\n    static invalidParameterValue(parameterName: string, details: string = null): string {\r\n        let errorMessage: string = \"The parameter '\" + parameterName + \"' is invalid\";\r\n        if (details != null) {\r\n            errorMessage += \", \" + details;\r\n        }\r\n        return errorMessage;\r\n    }\r\n    static illegalArgumentInvalidEndpoint(endpoint: string): string {\r\n        return \"'\" + endpoint + \"' is not a valid Convertigo endpoint\";\r\n    }\r\n\r\n    static wrongListener(c8oListener: C8oResponseListener): string {\r\n        return \"The C8oListener class \" + C8oUtilsCore.getObjectClassName(c8oListener) + \" is not handled\";\r\n    }\r\n\r\n    static illegalArgumentNullParameter(parameterName: string): string {\r\n        return parameterName + \" must be not null\";\r\n    }\r\n\r\n    static  missingValue(valueName: string): string {\r\n        return \"The \" + valueName + \" is missing\";\r\n    }\r\n\r\n    static  unknownValue(valueName: string, value: string): string {\r\n        return \"The \" + valueName + \" value \" + value + \" is unknown\";\r\n    }\r\n\r\n    static  unknownType(variableName: string, variable: Object): string {\r\n        return \"The \" + variableName + \" type \" + C8oUtilsCore.getObjectClassName(variable) + \"is unknown\";\r\n    }\r\n\r\n    static  ressourceNotFound(ressourceName: string): string {\r\n        return \"The \" + ressourceName + \" was not found\";\r\n    }\r\n\r\n    /** TAG Illegal argument */\r\n\r\n    static  illegalArgumentInvalidFullSyncDatabaseUrl(fullSyncDatabaseUrlStr: string): string {\r\n        return \"The fullSync database url '\" + fullSyncDatabaseUrlStr + \"' is not a valid url\";\r\n    }\r\n\r\n    static  FullSyncDatabaseInitFailed(databaseName: string): string {\r\n        return \"Failed to initialize the FullSync database '\" + databaseName + \"'\";\r\n    }\r\n\r\n    static  MissParameter(parameterName: string): string {\r\n        return \"The parameter '\" + parameterName + \"' is missing\";\r\n    }\r\n\r\n    /* private static  illegalArgumentInvalidParameterValue(parameterName: string, parameterValue: string): string {\r\n     return \"'\" + parameterValue + \"' is not a valid value for the parameter '\" + parameterName + \"'\"\r\n     } */\r\n\r\n    static illegalArgumentInvalidURL(urlStr: string): string {\r\n        return \"'\" + urlStr + \"' is not a valid URL\";\r\n    }\r\n\r\n    static  InvalidArgumentInvalidURL(urlStr: string): string {\r\n        return \"'\" + urlStr + \"' is not a valid URL\";\r\n    }\r\n\r\n    static  UnknownFullSyncPolicy(policy: any): string {\r\n        return \"Unknown the FullSync policy '\" + policy + \"'\";\r\n    }\r\n\r\n    static InvalidArgumentInvalidEndpoint(endpoint: string): string {\r\n        return \"'\" + endpoint + \"' is not a valid Convertigo endpoint\";\r\n    }\r\n\r\n    static  InvalidRequestable(requestable: string): string {\r\n        return \"'\" + requestable + \"' is not a valid requestable.\";\r\n    }\r\n\r\n    static  InvalidParameterType(parameterName: string, wantedParameterType: string, actualParameterType: string): string {\r\n        return \"The parameter '\" + parameterName + \"' must be of type '\" + wantedParameterType + \"' and not '\" + actualParameterType + \"'\";\r\n    }\r\n\r\n    static  illegalArgumentIncompatibleListener(listenerType: string, responseType: string): string {\r\n        return \"The listener type '\" + listenerType + \"' is incompatible with the response type '\" + responseType + \"'\";\r\n    }\r\n\r\n    static  InvalidArgumentNullParameter(parameterName: string): string {\r\n        return parameterName + \" must be not null\";\r\n    }\r\n\r\n    /** TAG Initialization */\r\n    static  InitError(): string {\r\n        return \"Unable to initialize\";\r\n    }\r\n\r\n    static  InitRsainternalKey(): string {\r\n        return \"Unable to initialize the RSA internal key\";\r\n    }\r\n\r\n    static  InitCouchManager(): string {\r\n        return \"Unable to initialize the fullSync databases manager\";\r\n    }\r\n\r\n    static  InitSslSocketFactory(): string {\r\n        return \"Unable to initialize the ssl socket factory\";\r\n    }\r\n\r\n    static  InitDocumentBuilder(): string {\r\n        return \"Unable to initialize the XML document builder\";\r\n    }\r\n\r\n    /** TAG Parse */\r\n\r\n    static  ParseStreamToJson(): string {\r\n        return \"Unable to parse the input stream to a json document\";\r\n    }\r\n\r\n    static  ParseStreamToXml(): string {\r\n        return \"Unable to parse the input stream to an xml document\";\r\n    }\r\n\r\n    static  parseInputStreamToString(): string {\r\n        return \"Unable to parse the input stream to a string\";\r\n    }\r\n\r\n    static  parseXmlToString(): string {\r\n        return \"Unable to parse the xml document to a string\";\r\n    }\r\n\r\n    static  parseRsainternalKey(): string {\r\n        return \"Unable to parse the RSA internal key\";\r\n    }\r\n\r\n    static  parseQueryEnumeratorToJson(): string {\r\n        return \"Unable to parse the query to a json document\";\r\n    }\r\n\r\n    static  parseLogsToJson(): string {\r\n        return \"Unable to parse logs to a json document\";\r\n    }\r\n\r\n    static  parseLogsStreamToJson(): string {\r\n        return \"Unable to parse stream containing logs response to a json document\";\r\n    }\r\n\r\n    static  parseC8oReplicationResultToJson(): string {\r\n        return \"Unable to parse the replication result to a json document\";\r\n    }\r\n\r\n    static  parseFullSyncDefaultResponseToJson(): string {\r\n        return \"Unable to parse the default fullSync result to a json document\";\r\n    }\r\n\r\n    static  parseFullSyncPostDocumentResponseToJson(): string {\r\n        return \"Unable to parse the post document fullSync result to a json document\";\r\n    }\r\n\r\n    static  parseStringToJson(): string {\r\n        return \"Unable to parse the string to a JSON document\";\r\n    }\r\n\r\n    static  ParseStringToObject(type: any/*type*/): string {\r\n        return \"Unable to parse the string (JSON):string to an object of type \"; // + type\r\n    }\r\n\r\n    static  StringToJsonValue(str: string): string {\r\n        return \"Unable to translate the string '\" + str + \"' to a JSON value\";\r\n    }\r\n\r\n    /** TAG HTTP */\r\n\r\n    static  retrieveRsainternalKey(): string {\r\n        return \"Error during http request to get the RSA internal key\";\r\n    }\r\n\r\n    static  httpLogs(): string {\r\n        return \"Error during http request to send logs to the Convertigo server\";\r\n    }\r\n\r\n    /** TAG Couch */\r\n\r\n    static  couchRequestGetView(): string {\r\n        return \"Unable to run the view query\";\r\n    }\r\n\r\n    static couchRequestCreateIndex(): string {\r\n        return \"Unable to create the index\";\r\n    }\r\n    static couchRequestFind(): string {\r\n        return \"Unable to run the query find\";\r\n    }\r\n\r\n    static couchRequestExplain(): string {\r\n        return \"Unable to run the query explain\";\r\n    }\r\n\r\n    static couchRequestGetIndexes(): string {\r\n        return \"Unable to run the query getIndexes\";\r\n    }\r\n\r\n    static couchRequestDeleteIndex(): string {\r\n        return \"Unable to run the query deleteIndex\";\r\n    }\r\n\r\n    static couchRequestSearch(): string {\r\n        return \"Unable to run the query search\";\r\n    }\r\n    \r\n\r\n    static  couchRequestAllDocuments(): string {\r\n        return \"Unable to run the all query\";\r\n    }\r\n\r\n    static  couchRequestResetDatabase(): string {\r\n        return \"Unable to run the reset query\";\r\n    }\r\n\r\n    static  couchRequestDeleteDocument(): string {\r\n        return \"Unable to run the delete document query\";\r\n    }\r\n\r\n    static  couchRequestInvalidRevision(): string {\r\n        return \"The revision is invalid\";\r\n    }\r\n\r\n    static  couchRequestPostDocument(): string {\r\n        return \"Unable to run the post document query\";\r\n    }\r\n\r\n    static  unableToGetFullSyncDatabase(databaseName: string): string {\r\n        return \"Unable to get the fullSync database '\" + databaseName + \"' from the manager\";\r\n    }\r\n\r\n    static  couchNullResult(): string {\r\n        return \"An error occured during the fullSync request, its result is null\";\r\n    }\r\n\r\n    static  couchFullSyncNotActive(): string {\r\n        return \"Unable to use fullSync because it was not activated at the initialization\";\r\n    }\r\n\r\n    static  CouchDeleteFailed(): string {\r\n        return \"Delete the Couch document failed\";\r\n    }\r\n\r\n    static  fullSyncPutProperties(properties: Object): string {\r\n        return \"Unable to put the following properties in the fullSync Document: \" + JSON.stringify(properties);\r\n    }\r\n\r\n    static  fullSyncGetOrCreateDatabase(databaseName: string): string {\r\n        return \"Unable to get or create the fullSync database '\" + databaseName + \"'\";\r\n    }\r\n\r\n    static  fullSyncHandleResponse(): string {\r\n        return \"Error while handling the fullSync response\";\r\n    }\r\n\r\n    /** TAG Certificate */\r\n\r\n    static  loadKeyStore(): string {\r\n        return \"Failed to load key store\";\r\n    }\r\n\r\n    static  trustAllCertificates(): string {\r\n        return \"Unable to load a key store trusting all certificates\";\r\n    }\r\n\r\n    static  clientKeyStore(): string {\r\n        return \"Unable to load the client key store\";\r\n    }\r\n\r\n    static  serverKeyStore(): string {\r\n        return \"Unable to load the server key store\";\r\n    }\r\n\r\n    /** TAG Not found */\r\n\r\n    static  illegalArgumentNotFoundFullSyncView(viewName: string, databaseName: string): string {\r\n        return \"Cannot found the view '\" + viewName + \"' in database '\" + databaseName + \"'\";\r\n    }\r\n\r\n    /** TAG Other */\r\n\r\n    static  unhandledResponseType(responseType: string): string {\r\n        return \"The response type '\" + responseType + \"' is not handled\";\r\n    }\r\n\r\n    static  unhandledListenerType(listenerType: string): string {\r\n        return \"The listener type '\" + listenerType + \"' is not handled\";\r\n    }\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    static  WrongListener(c8oListener: C8oResponseListener): string {\r\n        return \"wrong listener\"; // \"The C8oListener class \" + C8oUtils.GetObjectClassName(c8oListener) + \" is not handled\"\r\n    }\r\n\r\n    static  wrongResult(result: any): string {\r\n        return \"The response class \" + C8oUtilsCore.getObjectClassName(result) + \" is not handled\";\r\n    }\r\n\r\n\r\n    static  unhandledFullSyncRequestable(fullSyncRequestableValue: string): string {\r\n        return \"The fullSync requestable '\" + fullSyncRequestableValue + \"' is not handled\";\r\n    }\r\n\r\n    static  closeInputStream(): string {\r\n        return \"Unable to close the input stream\";\r\n    }\r\n\r\n    static  deserializeJsonObjectFromString(str: string): string {\r\n        return \"Unable to deserialize the JSON object from the following string: '\" + str + \"'\";\r\n    }\r\n\r\n    static  postDocument(): string {\r\n        return \"Unable to post document\";\r\n    }\r\n\r\n    static  getNameValuePairObjectValue(name: string): string {\r\n        return \"Unable to get the object value from the NameValuePair named '\" + name + \"'\";\r\n    }\r\n\r\n    static  queryEnumeratorToJSON(): string {\r\n        return \"Unable to parse the QueryEnumerator to a JSON document\";\r\n    }\r\n\r\n    static  queryEnumeratorToXML(): string {\r\n        return \"Unable to parse the QueryEnumerator to a XML document\";\r\n    }\r\n\r\n    static  addparametersToQuery(): string {\r\n        return \"Unable to add parameters to the fullSync query\";\r\n    }\r\n\r\n    static  putJson(): string {\r\n        return \"Failed to put data in JSON ...\";\r\n    }\r\n\r\n    static  changeEventToJson(): string {\r\n        return \"Failed to parse ChangeEvent to JSON document\";\r\n    }\r\n\r\n    static  initC8oSslSocketFactory(): string {\r\n        return \"Failed to initialize C8oSslSocketFactory\";\r\n    }\r\n\r\n    static  createSslContext(): string {\r\n        return \"failed to create a new SSL context\";\r\n    }\r\n\r\n    static  keyManagerFactoryInstance(): string {\r\n        return \"Failed to instanciate KeyManagerFactory\";\r\n    }\r\n\r\n    static  initKeyManagerFactory(): string {\r\n        return \"Failed to initialize the key manager factory\";\r\n    }\r\n\r\n    static  InitHttpInterface(): string {\r\n        return \"Failed to initialize the secure HTTP Interface\";\r\n    }\r\n\r\n    static  trustManagerFactoryInstance(): string {\r\n        return \"Failed to instanciate KeyManagerFactory\";\r\n    }\r\n\r\n    static  initTrustManagerFactory(): string {\r\n        return \"Failed to initialize the key manager factory\";\r\n    }\r\n\r\n    static  initSslContext(): string {\r\n        return \"Failed to initialize the SSL context\";\r\n    }\r\n\r\n    static  initCipher(): string {\r\n        return \"Failed to initialize the cipher\";\r\n    }\r\n\r\n    static  urlEncode(): string {\r\n        return \"Failed to URL encode parameters\";\r\n    }\r\n\r\n    static  getParametersStringBytes(): string {\r\n        return \"Failed to get parameters string bytes\";\r\n    }\r\n\r\n    static  encodeParameters(): string {\r\n        return \"Failed to encode parameters\";\r\n    }\r\n\r\n    static  RunHttpRequest(): string {\r\n        return \"Failed to run the HTTP request\";\r\n    }\r\n\r\n    static  generateRsainternalKey(): string {\r\n        return \"Failed to generate RSA internal key\";\r\n    }\r\n\r\n    static  keyFactoryInstance(): string {\r\n        return \"Failed to get KeyFactory instance\";\r\n    }\r\n\r\n    static  getCipherInstance(): string {\r\n        return \"Failed to get Cipher instance\";\r\n    }\r\n\r\n    static  entryNotFound(entryKey: string): string {\r\n        return \"Entry key '\" + entryKey + \"' not found\";\r\n    }\r\n\r\n    static  c8oCallRequestToJson(): string {\r\n        return \"Failed to parse c8o call request to JSON\";\r\n    }\r\n\r\n    static  getJsonKey(key: string): string {\r\n        return \"Failed to get the JSON key '\" + key + \"'\";\r\n    }\r\n\r\n    static  jsonValueToXML(): string {\r\n        return \"Failed to parse JSON value to XML\";\r\n    }\r\n\r\n    static  inputStreamToXML(): string {\r\n        return \"Failed to parse InputStream to an XML document\";\r\n    }\r\n\r\n    static  inputStreamReaderEncoding(): string {\r\n        return \"Failed to instanciate the InputStreamReader\";\r\n    }\r\n\r\n    static  readLineFromBufferReader(): string {\r\n        return \"Failed to read line from the BufferReader\";\r\n    }\r\n\r\n    static  GetLocalCacheParameters(): string {\r\n        return \"Failed to get local cache parameters\";\r\n    }\r\n\r\n    static  GetLocalCachePolicy(policy: string): string {\r\n        return \"Failed to get local cache policy: \" + policy;\r\n    }\r\n\r\n    static  fullSyncJsonToXML(): string {\r\n        return \"Failed to translate full sync JSON to XML\";\r\n    }\r\n\r\n    static  takeLog(): string {\r\n        return \"Failed to take a log line in the list\";\r\n    }\r\n\r\n    static  remoteLogHttpRequest(): string {\r\n        return \"Failed while running the HTTP request sending logs to the Convertigo server\";\r\n    }\r\n\r\n    static  getInputStreamFromHttpResponse(): string {\r\n        return \"Failed to get InputStream from the HTTP response\";\r\n    }\r\n\r\n    static  inputStreamToJSON(): string {\r\n        return \"Failed to translate the input stream to a JSON document\";\r\n    }\r\n\r\n    static  httpInterfaceInstance(): string {\r\n        return \"Failed to instanciate the HTTP interface\";\r\n    }\r\n\r\n    static  FullSyncInterfaceInstance(): string {\r\n        return \"Failed to instanciate the FullSync interface\";\r\n    }\r\n\r\n    static  getDocumentFromDatabase(documentId: string): string {\r\n        return \"Failed to get fullSync document '\" + documentId + \"' from the database\";\r\n    }\r\n\r\n    static  FullSyncReplicationFail(databaseName: string, way: string): string {\r\n        return \"Failed to '\" + way + \"' replicate the '\" + databaseName + \"' database\";\r\n    }\r\n\r\n    static  localCachePolicyIsDisable(): string {\r\n        return \"Depending to the network state the local cache is disabled\";\r\n    }\r\n\r\n    static  localCacheDocumentJustCreated(): string {\r\n        return \"The local cache document is just created (empty):string\";\r\n    }\r\n\r\n    static  illegalArgumentInvalidLocalCachePolicy(localCachePolicyString: string): string {\r\n        return \"The local cache policy '\" + localCachePolicyString + \"' is invalid\";\r\n    }\r\n\r\n    static  timeToLiveExpired(): string {\r\n        return \"The time to live expired\";\r\n    }\r\n\r\n    static  InvalidLocalCacheResponseInformation(): string {\r\n        return \"Local cache response informations are invalid\";\r\n    }\r\n\r\n    static  overrideDocument(): string {\r\n        return \"Failed to override the fullSync document\";\r\n    }\r\n\r\n    static  handleFullSyncRequest(): string {\r\n        return \"Failed while running the fullSync request\";\r\n    }\r\n\r\n    static  serializeC8oCallRequest(): string {\r\n        return \"Fails to serialize the Convertigo call request\";\r\n    }\r\n\r\n    static  getResponseFromLocalCache(): string {\r\n        return \"Failed to get response from the local cache\";\r\n    }\r\n\r\n    static  getResponseFromLocalCacheDocument(): string {\r\n        return \"Failed to get response form the local cache document\";\r\n    }\r\n\r\n    static  handleC8oCallRequest(): string {\r\n        return \"Failed while running the c8o call request\";\r\n    }\r\n    public static runHttpRequest(): string {\r\n        return \"Failed to run the HTTP request\";\r\n    }\r\n\r\n    static  saveResponseToLocalCache(): string {\r\n        return \"Failed to save the response to the local cache\";\r\n    }\r\n\r\n    static  RemoteLogFail(): string {\r\n        return \"Failed to send log to the Convertigo server: disabling remote logging\";\r\n    }\r\n\r\n    static  FullSyncRequestFail(): string {\r\n        return \"Failed to process the fullsync request\";\r\n    }\r\n\r\n    static  MissingLocalCacheResponseDocument(): string {\r\n        return \"Missing local cache response document\";\r\n    }\r\n}","import {C8oCore} from \"./c8oCore\";\r\nimport {C8oLogLevel} from \"./c8oLogLevel\";\r\nimport {Queue} from \"./c8oUtilsCore\";\r\nimport {C8oException} from \"./Exception/c8oException\";\r\nimport {C8oExceptionMessage} from \"./Exception/c8oExceptionMessage\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nexport class C8oLogger {\r\n\r\n    // *** Constants ***//\r\n    // private static LOG_TAG: string = \"c8o\";\r\n    private static LOG_INTERNAL_PREFIX: string = \"[c8o] \";\r\n\r\n    public static REMOTE_LOG_LIMIT: number = 100;\r\n\r\n    private static JSON_KEY_REMOTE_LOG_LEVEL: string = \"remoteLogLevel\";\r\n    private static JSON_KEY_TIME: string = \"time\";\r\n    private static JSON_KEY_LEVEL: string = \"level\";\r\n    private static JSON_KEY_MESSAGE: string = \"msg\";\r\n    private static JSON_KEY_LOGS: string = \"logs\";\r\n    private static JSON_KEY_ENV: string = \"env\";\r\n\r\n    /** Attributes */\r\n\r\n    private remoteLogUrl: string;\r\n    private remoteLogs: Queue<JSON>;\r\n    //noinspection JSMismatchedCollectionQueryUpdate\r\n    private alreadyRemoteLogging: boolean[];\r\n    private remoteLogLevel: C8oLogLevel;\r\n    private uidRemoteLogs: string;\r\n    private startTimeRemoteLog: number;\r\n    public initDone: boolean = false;\r\n    private pending_remoteLogs: Queue<JSON>;\r\n    private pending_remoteLogsLevel: Queue<C8oLogLevel>;\r\n\r\n    private c8o: C8oCore;\r\n\r\n    private env: string;\r\n    private pInit: Promise<any>;\r\n    private waitForSending: boolean = false;\r\n    constructor(c8o: C8oCore, first: boolean) {\r\n        this.pInit = this.affect_val(c8o, first);\r\n    }\r\n    public affect_val(c8o: C8oCore, first: boolean) {\r\n        return new Promise<void>(async (resolve)=>{\r\n\r\n            if (first) {\r\n                this.c8o = c8o;\r\n                this.remoteLogUrl = \"\";\r\n                this.remoteLogs = new Queue<JSON>();\r\n                this.pending_remoteLogsLevel = new Queue<C8oLogLevel>();\r\n                this.pending_remoteLogs = new Queue<JSON>();\r\n                this.alreadyRemoteLogging = [];\r\n                this.alreadyRemoteLogging.push(false);\r\n                this.remoteLogLevel = C8oLogLevel.TRACE;\r\n                this.startTimeRemoteLog = new Date().getTime();\r\n                this.uidRemoteLogs = Math.round((new Date().getTime() * Math.random())).toString(36);\r\n                const obj = {};\r\n                obj[\"uid\"] = this.uidRemoteLogs.toUpperCase();\r\n                obj[\"uuid\"] = (await this.c8o.deviceUUID).toUpperCase();\r\n                obj[\"project\"] = \"\";\r\n                this.env = JSON.stringify(obj);\r\n                resolve();\r\n            } else {\r\n                this.c8o = c8o;\r\n    \r\n                this.remoteLogUrl = c8o.endpointConvertigo + \"/admin/services/logs.Add\";\r\n                this.remoteLogs = new Queue<JSON>();\r\n                this.alreadyRemoteLogging = [];\r\n                this.alreadyRemoteLogging.push(false);\r\n    \r\n                this.remoteLogLevel = C8oLogLevel.TRACE;\r\n                this.startTimeRemoteLog = new Date().getTime();\r\n                this.uidRemoteLogs = Math.round((new Date().getTime() * Math.random())).toString(36);\r\n                const obj = {};\r\n                obj[\"uid\"] = this.uidRemoteLogs.toUpperCase();\r\n                obj[\"uuid\"] = (await this.c8o.deviceUUID).toUpperCase();\r\n                obj[\"project\"] = encodeURIComponent(c8o.endpointProject.toString());\r\n                this.env = JSON.stringify(obj);\r\n                resolve();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private isLoggableRemote(logLevel: C8oLogLevel): boolean {\r\n        return this.c8o.logRemote && logLevel != null && C8oLogLevel.TRACE.priority <= this.remoteLogLevel.priority && this.remoteLogLevel.priority <= logLevel.priority;\r\n    }\r\n\r\n    private isLoggableConsole(logLevel: C8oLogLevel): boolean {\r\n        return logLevel != null && C8oLogLevel.TRACE.priority <= this.c8o.logLevelLocal.priority && this.c8o.logLevelLocal.priority <= logLevel.priority;\r\n    }\r\n\r\n    public canLog(logLevel: C8oLogLevel): boolean {\r\n        return this.isLoggableConsole(logLevel) || this.isLoggableRemote(logLevel);\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get isFatal(): boolean {\r\n        return this.canLog(C8oLogLevel.FATAL);\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get isError(): boolean {\r\n        return this.canLog(C8oLogLevel.ERROR);\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get isWarn(): boolean {\r\n        return this.canLog(C8oLogLevel.WARN);\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get isInfo(): boolean {\r\n        return this.canLog(C8oLogLevel.INFO);\r\n    }\r\n\r\n    public get isDebug(): boolean {\r\n        return this.canLog(C8oLogLevel.DEBUG);\r\n    }\r\n\r\n    public get isTrace(): boolean {\r\n        return this.canLog(C8oLogLevel.TRACE);\r\n    }\r\n\r\n    private log(logLevel: C8oLogLevel, message: string, exception: Error) {\r\n        const isLogConsole: boolean = this.isLoggableConsole(logLevel);\r\n        const isLogRemote: boolean = this.isLoggableRemote(logLevel);\r\n        let copyMsg = \"\" + message;\r\n        if (isLogConsole || isLogRemote) {\r\n            if (exception != null) {\r\n                let messageB = false;\r\n                let messageS = false;\r\n                try {\r\n                    if(exception.message != undefined){\r\n                        message += \" : \" + JSON.stringify(exception.message);\r\n                    }\r\n                    else{\r\n                        messageB = true;\r\n                    }\r\n                    if(exception.stack != undefined){\r\n                        message += \"\\n\" + JSON.stringify(exception.stack); \r\n                    }\r\n                    else{\r\n                        messageS = true;\r\n                    }\r\n                }\r\n                catch(e){\r\n                    message += \"\\n\" + exception.toString();\r\n                }\r\n                if(messageB && messageS){\r\n                    try{\r\n                        message += \"\\n\" + JSON.stringify(exception);\r\n                    }\r\n                    catch(e){\r\n                        message += \"\\n\" + exception.toString();\r\n                    }\r\n                }\r\n                \r\n            }\r\n\r\n            const time: string = (((new Date().getTime().valueOf()) - (this.startTimeRemoteLog)) / 1000).toString();\r\n            if (!this.initDone) {\r\n                const obj = {};\r\n                obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n                obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = logLevel.name;\r\n                obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message.toString();\r\n                const objJson: JSON = obj as JSON;\r\n                this.pending_remoteLogs.push(objJson);\r\n                this.pending_remoteLogsLevel.push(logLevel);\r\n            } else {\r\n                if (isLogRemote) {\r\n                    const obj = {};\r\n                    obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n                    obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = logLevel.name;\r\n                    obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message.toString();\r\n                    const objJson: JSON = obj as JSON;\r\n                    this.remoteLogs.push(objJson);\r\n                    this.logRemote();\r\n                }\r\n                if (isLogConsole) {\r\n                    let verb = logLevel.name.toLowerCase();\r\n                    if(logLevel.name == \"FATAL\" || logLevel.name == \"fatal\"){\r\n                        verb = \"error\";\r\n                    }\r\n                    else if(logLevel.name == \"TRACE\" || logLevel.name == \"trace\"){\r\n                        verb = \"debug\";\r\n                    }\r\n                    try{\r\n                        if(exception != undefined){\r\n                            if(exception.message != undefined && exception[\"cause\"] != undefined){\r\n                                console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg, exception.message, exception[\"cause\"]);\r\n                            }\r\n                            else{\r\n                                console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg, exception);\r\n                            }\r\n                        }\r\n                        else{\r\n                            console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg);\r\n                        }\r\n                        \r\n                    }\r\n                    catch(e){\r\n                        console.log(\"(\" + time + \") [\" + logLevel.name + \"] \" + message);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public fatal(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.FATAL, message, exceptions);\r\n    }\r\n\r\n    public error(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.ERROR, message, exceptions);\r\n    }\r\n\r\n    public warn(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.WARN, message, exceptions);\r\n    }\r\n\r\n    public info(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.INFO, message, exceptions);\r\n    }\r\n\r\n    public debug(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.DEBUG, message, exceptions);\r\n    }\r\n\r\n    public trace(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.TRACE, message, exceptions);\r\n    }\r\n\r\n    private _log(logLevel: C8oLogLevel, messages: string, exceptions: Error = null) {\r\n        if (this.c8o.logC8o) {\r\n            this.log(logLevel, C8oLogger.LOG_INTERNAL_PREFIX.toString() + messages.toString(), exceptions);\r\n        }\r\n    }\r\n\r\n    public _fatal(message: string, exceptions: Error = null) {\r\n     this._log(C8oLogLevel.FATAL, message, exceptions);\r\n    }\r\n\r\n    public _error(message: string, exceptions: Error = null) {\r\n     this._log(C8oLogLevel.ERROR, message, exceptions);\r\n    }\r\n\r\n    public _warn(message: string, exceptions: Error = null) {\r\n     this._log(C8oLogLevel.WARN, message, exceptions);\r\n    }\r\n\r\n    public _info(message: string, exceptions: Error = null) {\r\n     this._log(C8oLogLevel.INFO, message, exceptions);\r\n    } \r\n\r\n    public _debug(message: string, exceptions: Error = null) {\r\n        this._log(C8oLogLevel.DEBUG, message, exceptions);\r\n    }\r\n\r\n    public _trace(message: string, exceptions: Error = null) {\r\n        this._log(C8oLogLevel.TRACE, message, exceptions);\r\n    }\r\n\r\n    public async logRemoteInit() {\r\n        this.pInit.then(async()=>{\r\n            this.initDone = true;\r\n\r\n            let count: number = 0;\r\n            const listSize: number = this.pending_remoteLogs.count();\r\n            const logsArray = new Array<any>();\r\n    \r\n            while (count < listSize && count < C8oLogger.REMOTE_LOG_LIMIT) {\r\n                const logLvl = this.pending_remoteLogsLevel.pop();\r\n                const mvar = this.pending_remoteLogs.pop();\r\n    \r\n                if (this.isLoggableConsole(logLvl)) {\r\n                    console.log(\"(\" + mvar[\"time\"] + \") [\" + logLvl.name + \"] \" + mvar[\"msg\"]);\r\n                }\r\n                if (this.isLoggableRemote(logLvl)) {\r\n                    logsArray.push(mvar);\r\n                    count += 1;\r\n                }\r\n    \r\n            }\r\n            //noinspection JSUnusedAssignment\r\n            let canLog: boolean = false;\r\n            canLog = logsArray.length > 0;\r\n            if (canLog) {\r\n                this.alreadyRemoteLogging[0] = true;\r\n            }\r\n            const parameters: Object = {};\r\n            parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify(logsArray);\r\n            parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n            parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n    \r\n            this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                .then((response) => {\r\n                    if (response !== undefined) {\r\n                        if (response.error !== undefined) {\r\n                            this.c8o.logRemote = false;\r\n                            if (this.c8o.logOnFail != null) {\r\n                                this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), response.error), null);\r\n                            }\r\n                        }\r\n                    }\r\n                    const logLevelResponse = response[C8oLogger.JSON_KEY_REMOTE_LOG_LEVEL.toString()];\r\n                    if (logLevelResponse != null) {\r\n                        const logLevelResponseStr: string = logLevelResponse.toString();\r\n                        const c8oLogLevel = C8oLogLevel.getC8oLogLevel(logLevelResponseStr);\r\n                        if (c8oLogLevel != null) {\r\n                            this.remoteLogLevel = c8oLogLevel;\r\n                        }\r\n                        this.alreadyRemoteLogging[0] = false;\r\n                        this.logRemote();\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.c8o.logRemote = false;\r\n                    if (this.c8o.logOnFail != null) {\r\n                        this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), error), null);\r\n                    }\r\n                });\r\n        })\r\n        \r\n    }\r\n\r\n    checkInitDone(resolve = null):Promise<any>{\r\n        if(resolve == null){\r\n            return new Promise<void>((resolve)=>{\r\n                if(!this.initDone){\r\n                    setTimeout(()=>{\r\n                        this.checkInitDone(resolve)\r\n                    }, 100);\r\n                }   \r\n                else{resolve()}\r\n            })\r\n            \r\n        }\r\n        else{\r\n            if(!this.initDone){\r\n                setTimeout(()=>{\r\n                    this.checkInitDone(resolve)\r\n                }, 100);\r\n            }\r\n            else{\r\n                resolve();\r\n            }   \r\n        }\r\n        return null;\r\n        \r\n    }\r\n    public async logTest(): Promise<any>{\r\n        \r\n        await this.checkInitDone()\r\n        return this.logTestAction();\r\n        \r\n            /*if (!this.initDone) {\r\n                setTimeout(()=>{\r\n                    return this.logTest();\r\n                },100)\r\n            }\r\n            else{\r\n                return this.logTestAction();\r\n            } */   \r\n    }\r\n\r\n    private logTestAction(): Promise<any>{\r\n        return new Promise(async (resolve, reject)=>{\r\n                const message = \"[c8o] Testing if endpoint is reachable\";\r\n                const time: string = (((new Date().getTime().valueOf()) - (this.startTimeRemoteLog)) / 1000).toString();\r\n                const obj = {};\r\n                obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n                obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = C8oLogLevel.DEBUG.name;\r\n                obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message;\r\n                const parameters: Object = {};\r\n                parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify([obj]);\r\n                parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n                parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n                this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                .then((response) => {\r\n                    resolve(true);\r\n                })\r\n                .catch((error) => {\r\n                    reject(false);\r\n                });\r\n            });\r\n    }\r\n\r\n    private timeout(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    public async logRemote(wait = 5000) {\r\n        // if sending is already processing\r\n        if(this.waitForSending){\r\n            return;\r\n        }\r\n        //noinspection JSUnusedAssignment\r\n        let canLog: boolean = false;\r\n        canLog = this.remoteLogs.count() > 0;\r\n        if (canLog) {\r\n            this.alreadyRemoteLogging[0] = true;\r\n        }\r\n\r\n        if (canLog) {\r\n            // We're using Angular Http provider to request the data,\r\n            // then on the response it'll map the JSON data to a parsed JS object.\r\n            // Next we process the data and resolve the promise with the new data.\r\n            // \"/admin/services/logs.Add\";\r\n\r\n            // wait 5000 ms to group http request with severals logs and reduce http charge\r\n            if(wait == null){\r\n                wait = 0;\r\n            }\r\n            this.waitForSending = true;\r\n            await this.timeout(wait);\r\n            this.waitForSending = false;\r\n            let count: number = 0;\r\n            const listSize: number = this.remoteLogs.count() as number;\r\n            const logsArray = [];\r\n            while (count < listSize && count < C8oLogger.REMOTE_LOG_LIMIT) {\r\n                logsArray.push(this.remoteLogs.pop());\r\n                count += 1;\r\n            }\r\n            // if there are still los to be pushed after timeout the log them\r\n            if(logsArray.length > 0){\r\n                const parameters: Object = {};\r\n                parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify(logsArray);\r\n                parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n                parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n\r\n                this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                .then((response) => {\r\n                    if (response !== undefined) {\r\n                        if (response.error !== undefined) {\r\n                            this.c8o.logRemote = false;\r\n                            if (this.c8o.logOnFail != null) {\r\n                                this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), response.error), null);\r\n                            }\r\n                        }\r\n                    }\r\n                    const logLevelResponse = response[C8oLogger.JSON_KEY_REMOTE_LOG_LEVEL.toString()];\r\n                    if (logLevelResponse != null) {\r\n                        const logLevelResponseStr: string = logLevelResponse.toString();\r\n                        const c8oLogLevel = C8oLogLevel.getC8oLogLevel(logLevelResponseStr);\r\n                        if (c8oLogLevel != null) {\r\n                            this.remoteLogLevel = c8oLogLevel;\r\n                        }\r\n                        this.alreadyRemoteLogging[0] = false;\r\n                        this.logRemote();\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.c8o.logRemote = false;\r\n                    if (this.c8o.logOnFail != null) {\r\n                        this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), error), null);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    public logMethodCall(methodName: string, ...parameters: any[]) {\r\n        if (this.c8o.logC8o && this.isDebug) {\r\n            let methodCallLogMessage: string = \"Method call: \" + methodName;\r\n            if (parameters == null || Object.keys(parameters).length === 0) {\r\n                this._debug(methodCallLogMessage);\r\n            }\r\n            if (this.isTrace) {\r\n                methodCallLogMessage += \", Parameters: [\";\r\n                for (const param of parameters) {\r\n                    let paramStr = \"null\";\r\n                    if (parameters != null) {\r\n                        try{\r\n                            paramStr = JSON.stringify(param);\r\n                        }\r\n                        catch(error){\r\n                            paramStr = \"cannot view value due to circular reference\";\r\n                        }\r\n                        \r\n                    }\r\n                    methodCallLogMessage += \"\\n\" + paramStr + \", \";\r\n                }\r\n                // Remove the last character\r\n                methodCallLogMessage = methodCallLogMessage.substring(0, methodCallLogMessage.length - 2) + \"]\";\r\n\r\n                this._trace(methodCallLogMessage);\r\n            } else {\r\n                this._debug(methodCallLogMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    public logC8oCall(url: string, parameters: any) {\r\n        if (this.c8o.logC8o && this.isDebug) {\r\n            let c8oCallLogMessage: string = \"C8o call: \" + url;\r\n            if (parameters.length > 0) {\r\n                c8oCallLogMessage += \"\\n\" + String(parameters);\r\n            }\r\n            this._debug(c8oCallLogMessage);\r\n        }\r\n    }\r\n\r\n    public logC8oCallJSONResponse(response: JSON, url: string, parameters: any) {\r\n        this.logC8oCallResponse(JSON.stringify(response), \"JSON\", url, parameters);\r\n    }\r\n\r\n    public logC8oCallXMLResponse(response: Document, url: string, parameters: Object) {\r\n        this.logC8oCallResponse(response.toString(), \"XML\", url, parameters);\r\n    }\r\n\r\n    public logC8oCallResponse(responseStr: string, responseType: string, url: string, parameters: any) {\r\n        if (this.c8o.logC8o && this.isTrace) {\r\n            let c8oCallResponseLogMessage: string;\r\n            if (url == null) {\r\n                c8oCallResponseLogMessage = \"C8o call \" + responseType + \" response: \";\r\n            } else {\r\n                c8oCallResponseLogMessage = \"C8o call \" + responseType + \" response: \" + url;\r\n            }\r\n            if (parameters.count > 0) {\r\n                c8oCallResponseLogMessage += \"\\n\" + parameters.toString();\r\n            }\r\n            c8oCallResponseLogMessage += \"\\n\" + responseStr;\r\n\r\n            this._trace(c8oCallResponseLogMessage);\r\n        }\r\n    }\r\n}\r\n","import {FullSyncAbstractResponse, FullSyncDefaultResponse} from \"./fullSyncResponse\";\r\nexport class C8oFullSyncTranslator {\r\n    public static FULL_SYNC_RESPONSE_KEY_COUNT: string = \"count\";\r\n    public static FULL_SYNC_RESPONSE_KEY_ROWS: string = \"rows\";\r\n    public static FULL_SYNC_RESPONSE_KEY_CURRENT: string = \"current\";\r\n    public static FULL_SYNC_RESPONSE_KEY_DIRECTION: string = \"direction\";\r\n    public static FULL_SYNC_RESPONSE_KEY_TOTAL: string = \"total\";\r\n    public static FULL_SYNC_RESPONSE_KEY_OK: string = \"ok\";\r\n    public static FULL_SYNC_RESPONSE_KEY_STATUS: string = \"status\";\r\n\r\n    public static FULL_SYNC_RESPONSE_VALUE_DIRECTION_PUSH: string = \"push\";\r\n    public static FULL_SYNC_RESPONSE_VALUE_DIRECTION_PULL: string = \"pull\";\r\n\r\n    public static XML_KEY_DOCUMENT: string = \"document\";\r\n    public static XML_KEY_COUCHDB_OUTPUT: string = \"couchdb_output\";\r\n\r\n    public static fullSyncDocumentOperationResponseToJson(fullSyncDocumentOperationResponse: FullSyncAbstractResponse): JSON {\r\n        return fullSyncDocumentOperationResponse.getProperties() as JSON;\r\n    }\r\n\r\n    public static fullSyncDefaultResponseToJson(fullSyncDefaultResponse: FullSyncDefaultResponse): JSON {\r\n        return fullSyncDefaultResponse.getProperties() as JSON;\r\n    }\r\n\r\n}\r\n","export class C8oLocalCacheResponse {\r\n    private response: string;\r\n    private responseType: string;\r\n    private expirationDate: number;\r\n\r\n    constructor(response: string, responseType: string, expirationDate: number) {\r\n        this.response = response;\r\n        this.responseType = responseType;\r\n        this.expirationDate = expirationDate;\r\n    }\r\n\r\n    public isExpired(): boolean {\r\n        if (this.expirationDate <= 0) {\r\n            return false;\r\n        } else {\r\n            const currentDate = new Date().getTime();\r\n            return this.expirationDate < currentDate;\r\n        }\r\n    }\r\n\r\n    public getResponse(): string {\r\n        return this.response;\r\n    }\r\n\r\n    public getResponseType(): string {\r\n        return this.responseType;\r\n    }\r\n\r\n    public getExpirationDate(): number {\r\n        return this.expirationDate;\r\n    }\r\n}\r\n","/**\r\n * Created by charlesg on 10/01/2017.\r\n */\r\nexport interface C8oResponseListener {\r\n}\r\n\r\nexport class C8oResponseJsonListener implements C8oResponseListener {\r\n    /**\r\n     * Called on c8o call JSON responses.\r\n     *\r\n     * @param response - C8o call response\r\n     * @param parameters - C8o call parameters\r\n     */\r\n    public onJsonResponse: (JSON, Object) => void;\r\n\r\n    constructor(onJsonResponse: (JSON, Object) => void) {\r\n        this.onJsonResponse = onJsonResponse;\r\n    }\r\n}\r\n\r\nexport class C8oResponseProgressListener implements C8oResponseListener {\r\n    public onProgressResponse: (C8oProgress, Object) => void;\r\n    constructor(onProgressResponse: (C8oProgress, Object) => void) {\r\n        this.onProgressResponse = onProgressResponse;\r\n    }\r\n}\r\n","import {C8oException}           from \"./c8oException\";\r\n\r\nexport class C8oCouchBaseLiteException extends C8oException {\r\n    constructor(message: string);\r\n    constructor(message: string, cause: Error);\r\n    constructor(message: string, cause: Error = null) {\r\n        super(message, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oCouchBaseLiteException.prototype);\r\n    }\r\n}","import {C8oException} from \"./c8oException\";\r\n\r\nexport class C8oRessourceNotFoundException extends C8oException {\r\n\r\n    constructor(message: string);\r\n    constructor(message: string, cause: Error);\r\n    constructor(message: string, cause: Error = null) {\r\n        super(message, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oRessourceNotFoundException.prototype);\r\n    }\r\n}","import {C8oException} from \"./c8oException\";\r\n\r\n/**\r\n * This Exception is not thrown to the user, it is used to know if the requested response from the local cache is available or no.\r\n */\r\nexport class C8oUnavailableLocalCacheException extends C8oException {\r\n    constructor(detailMessage: string);\r\n    constructor(detailMessage: string, cause: Error);\r\n    constructor(detailMessage: string, cause: Error = null) {\r\n        super(detailMessage, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oUnavailableLocalCacheException.prototype);\r\n    }\r\n}","import {C8oFullSyncTranslator} from \"./c8oFullSyncTranslator\";\r\n\r\nexport class C8oProgress {\r\n    private _changed: boolean = false;\r\n    private _continuous: boolean = false;\r\n    private _finished: boolean = false;\r\n    private _pull: boolean = true;\r\n    private _current: number = -1;\r\n    private _total: number = -1;\r\n    private _status: string = \"\";\r\n    private _taskInfo: string = \"\";\r\n    private _raw: any;\r\n\r\n    // Constructor overload in typescript...\r\n    constructor();\r\n    constructor(progress: C8oProgress);\r\n    constructor(progress?: any) {\r\n        if (progress instanceof C8oProgress) {\r\n            this._changed = false;\r\n            this._continuous = progress._continuous;\r\n            this._finished = progress._finished;\r\n            this._pull = progress._pull;\r\n            this._current = progress._current;\r\n            this._total = progress._total;\r\n            this._status = progress._status;\r\n            this._taskInfo = progress._taskInfo;\r\n            this._raw = progress._raw;\r\n        } else {\r\n            if (progress === undefined) {\r\n                this._raw = null;\r\n            } else {\r\n                throw new Error(`Expected C8oProgress or empty constructor, got '${progress}'.`);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get changed(): boolean {\r\n        return this._changed;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public set changed(value: boolean) {\r\n        this._changed = value;\r\n    }\r\n\r\n    public get continuous(): boolean {\r\n        return this._continuous;\r\n    }\r\n\r\n    public set continuous(value: boolean) {\r\n        this._continuous = value;\r\n        this._changed = true;\r\n    }\r\n\r\n    public get finished(): boolean {\r\n        return this._finished;\r\n    }\r\n\r\n    public set finished(value: boolean) {\r\n        this._finished = value;\r\n        this._changed = true;\r\n    }\r\n\r\n    public get pull(): boolean {\r\n        return this._pull;\r\n    }\r\n\r\n    public set pull(value: boolean) {\r\n        this._pull = value;\r\n        this._changed = true;\r\n    }\r\n\r\n    public get push(): boolean {\r\n        return !this._pull;\r\n    }\r\n\r\n    public get current(): number {\r\n        return this._current;\r\n    }\r\n\r\n    public set current(value: number) {\r\n        this._current = value;\r\n        this._changed = true;\r\n    }\r\n\r\n    public get total(): number {\r\n        return this._total;\r\n    }\r\n\r\n    public set total(value: number) {\r\n        this._total = value;\r\n        this._changed = true;\r\n    }\r\n\r\n    public get direction(): string {\r\n        return this._pull ? C8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PULL : C8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PUSH;\r\n    }\r\n\r\n    public get status(): string {\r\n        return this._status;\r\n    }\r\n\r\n    public set status(value: string) {\r\n        this._changed = true;\r\n        this._status = value;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get taskInfo(): string {\r\n        return this._taskInfo;\r\n    }\r\n\r\n    public set taskInfo(value: string) {\r\n        this._changed = true;\r\n        this._taskInfo = value;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get raw(): any {\r\n        return this._raw;\r\n    }\r\n\r\n    public set raw(value: any) {\r\n        this._changed = true;\r\n        this._raw = value;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.direction + \": \" + this.current + \"/\" + this.total + \" (\" + (this.finished ? (this.continuous ? \"live\" : \"done\") : \"running\") + \")\";\r\n    }\r\n}\r\n","export class FullSyncReplication {\r\n    public pull: boolean;\r\n    public sync: boolean;\r\n    public replication: any;\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public changeListener: Event;\r\n\r\n    constructor(pull: boolean = null) {\r\n        if (pull != null) {\r\n            this.pull = pull;\r\n        } else {\r\n            this.sync = true;\r\n        }\r\n    }\r\n}\r\n","import { C8oCore } from \"./c8oCore\";\r\nexport class C8oLoad {\r\n\r\n    constructor(private c8o: C8oCore) {\r\n        \r\n    }\r\n    public plugin: any = {\r\n        c8oload: function (url, opts, c8o){\r\n            var db = this;\r\n            \r\n            var extend = require('pouchdb-extend');\r\n            var Checkpointer = require('pouchdb-checkpointer');\r\n            var genReplicationId = require('pouchdb-generate-replication-id');\r\n\r\n            let loadString = (db, datastr, opts, resolve, reject, c8o)=>{\r\n                let parsedDump = parseDump(datastr);\r\n                if (parsedDump[\"err\"]) {\r\n                    return reject(parsedDump[\"err\"]);\r\n                }\r\n                let docs = parsedDump[\"docs\"];\r\n                let lastSeq = parsedDump[\"lastSeq\"];\r\n        \r\n        \r\n                db.bulkDocs({docs: docs, new_edits: false})\r\n                .then(()=> {\r\n                    if (!opts.proxy) {\r\n                      resolve({ok:true});\r\n                    }\r\n                    else{\r\n                        writeProxyCheckpoint(db, lastSeq, opts, resolve, reject);\r\n                    }\r\n                    \r\n                  })\r\n                  .catch((err)=>{\r\n                    reject(err);\r\n                  })\r\n            };\r\n\r\n\r\n            let loadUrl = (db, url, opts, resolve, reject, c8o)=>{\r\n                let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': c8o.sdkVersion};\r\n                    Object.assign(headersObject, c8o.headers);\r\n                    let headers =  c8o.httpInterface.getHeaders(headersObject);\r\n        \r\n                    c8o.httpInterface.httpGetObservable(url, {\r\n                        headers: headers,\r\n                        withCredentials: true,\r\n                        responseType: 'text' as 'json'\r\n                    }, {})\r\n                    .subscribe(\r\n                        response => {\r\n                            loadString(db, response, opts, resolve, reject, c8o);\r\n                            \r\n                    },\r\n                    error => {\r\n                        reject(error);\r\n                    })\r\n            };\r\n\r\n            let parseDump = (data)=>{\r\n                var docs = [];\r\n                var lastSeq = 0;\r\n                try {\r\n                  data.split('\\n').forEach(function (line) {\r\n                    if (!line) {\r\n                      return;\r\n                    }\r\n                    line = JSON.parse(line);\r\n                    if (line[\"docs\"]) {\r\n                      docs = docs.concat(line[\"docs\"]);\r\n                    }\r\n                    if (line.seq) {\r\n                      lastSeq = line.seq;\r\n                    }\r\n                  });\r\n                } catch (err) {\r\n                  return {err: err};\r\n                }\r\n                return {docs: docs, lastSeq: lastSeq};\r\n            }\r\n\r\n            let writeProxyCheckpoint = (db, lastSeq, opts, resolve, reject)=>{\r\n                db.info()\r\n                .then((info)=> {\r\n        \r\n                    var src = new db.constructor(opts.proxy,\r\n                      extend(true, {}, {}, opts));\r\n        \r\n        \r\n                    var target = new db.constructor(info.db_name,\r\n                      extend(true, {}, db.__opts, opts));\r\n        \r\n                    var replIdOpts = {};\r\n        \r\n                    if (opts.filter) {\r\n                      replIdOpts[\"filter\"] = opts.filter;\r\n                    }\r\n        \r\n                    if (opts.query_params) {\r\n                      replIdOpts[\"query_params\"] = opts.query_params;\r\n                    }\r\n        \r\n                    if (opts.view) {\r\n                      replIdOpts[\"view\"] = opts.view;\r\n                    }\r\n              \r\n                    genReplicationId.default(src, target, replIdOpts)\r\n                    .then(function (replId) {\r\n                      var state = {\r\n                        cancelled: false\r\n                      };\r\n                      var checkpointer = new Checkpointer.default(src, target, replId, state);\r\n                      checkpointer.writeCheckpoint(lastSeq)\r\n                      .then((response)=>{\r\n                        resolve(response);\r\n                      })\r\n                      .catch((err)=>{\r\n                          reject(err);\r\n                      })\r\n                    })\r\n                    .catch((err)=>{\r\n                        reject(err);\r\n                    })\r\n                  });\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n            return new Promise((resolve, reject)=>{\r\n                \r\n                // if its a dumped string\r\n                if (/^\\s*\\{/.test(url)) {\r\n                    loadString(db, url, opts, resolve, reject, c8o);\r\n                  }\r\n                  else{\r\n                    loadUrl(db, url, opts, resolve, reject, c8o);\r\n                  }\r\n                  \r\n            })\r\n        }\r\n    }\r\n   \r\n      \r\n}","import { C8oCore } from \"./c8oCore\";\r\nimport { C8oProgress } from \"./c8oProgress\";\r\nimport { C8oResponseListener, C8oResponseProgressListener } from \"./c8oResponse\";\r\nimport { FullSyncReplication } from \"./fullSyncReplication\";\r\n\r\nimport PouchDB from \"pouchdb-browser\";\r\nimport PouchDBFind from \"pouchdb-find\";\r\nimport PouchDBQuickSearch from \"pouchdb-quick-search\";\r\nimport PouchDBWorker from \"worker-pouch\";\r\n\r\nimport {C8oLoad} from \"./c8oload\";\r\nimport { C8oUtilsCore } from \"./c8oUtilsCore\";\r\nimport PouchDb from \"pouchdb-core\";\r\n\r\n/**\r\n * Created by charlesg on 10/01/2017.\r\n */\r\nexport class C8oFullSyncDatabase {\r\n\r\n    /**\r\n     * Used to log.\r\n     */\r\n    private c8o: C8oCore;\r\n\r\n    /** TAG Attributes **/\r\n\r\n    /**\r\n     * The fullSync database name.\r\n     */\r\n    private databaseName: string;\r\n    private remotedatabaseName: string;\r\n    private c8oFullSyncDatabaseUrl: string;\r\n    /**\r\n     * The fullSync Database instance.\r\n     */\r\n    private database = null;\r\n    /**\r\n     * Used to make pull replication (uploads changes from the local database to the remote one).\r\n     */\r\n    private pullFullSyncReplication: FullSyncReplication = new FullSyncReplication(true);\r\n    /**\r\n     * Used to make push replication (downloads changes from the remote database to the local one).\r\n     */\r\n    private pushFullSyncReplication: FullSyncReplication = new FullSyncReplication(false);\r\n    /**\r\n     * Used to make pull replication (uploads changes from the local database to the remote one).\r\n     */\r\n    private syncFullSyncReplication: FullSyncReplication = new FullSyncReplication();\r\n\r\n    private manual_canceled = false;\r\n    private remotePouchHeader;\r\n    private _id;\r\n    private to_cancel = [];\r\n\r\n    /**\r\n     * Creates a fullSync database with the specified name and its location.\r\n     *\r\n     * @param c8o\r\n     * @param databaseName\r\n     * @param fullSyncDatabases\r\n     * @param localSuffix\r\n     * @throws C8oException Failed to get the fullSync database.\r\n     */\r\n    constructor(c8o: C8oCore, databaseName: string, fullSyncDatabases: string, localSuffix: string, localPrefix: string) {\r\n        PouchDB.plugin(PouchDBFind);\r\n        PouchDB.plugin(PouchDBQuickSearch);\r\n        var opts = {};\r\n        if(c8o.usewroker){\r\n            //@ts-ignore\r\n            PouchDB.adapter('worker', PouchDBWorker);\r\n            opts[\"adapter\"] = \"worker\";\r\n            c8o.log._debug(\"We will use experimental PouchDBWorker to speed up your requests. \\n fs://.createIndex is not supported\")\r\n        }\r\n        \r\n        let c8oload: C8oLoad = new C8oLoad(c8o);\r\n        window[\"PouchDB\"] =PouchDB;\r\n        this.c8o = c8o;\r\n        const header = {\r\n            \"x-convertigo-sdk\": this.c8o.sdkVersion,\r\n        };\r\n        if(this.c8o.xsrfUsed){\r\n            const headerName = \"x-xsrf-token\";\r\n            const fetch = \"Fetch\";\r\n            header[headerName] = window.localStorage.getItem(headerName) != undefined ? window.localStorage.getItem(headerName) : fetch;\r\n        }      \r\n        Object.assign(header, this.c8o.headers);\r\n        this.remotePouchHeader = {\r\n            fetch: (url, opts) => {\r\n                opts.credentials = 'include';\r\n                for (let key in header) {\r\n                    opts.headers.set(key, header[key]);\r\n                }\r\n                var fecthPouch: Promise<Response> = PouchDB.fetch(url, opts);\r\n                fecthPouch.then((response)=>{\r\n                    this.c8o.session.sort(response,header, null, null, null);\r\n                })\r\n                .catch((e)=>{\r\n                    \r\n                });\r\n                return fecthPouch;\r\n            }\r\n        };\r\n        this.c8oFullSyncDatabaseUrl = fullSyncDatabases + databaseName;\r\n        this.remotedatabaseName = databaseName;\r\n        this.databaseName = localPrefix + databaseName + localSuffix;\r\n        try {\r\n            if (c8o.couchUrl != null) {\r\n                this.database = new PouchDB(c8o.couchUrl + \"/\" + this.databaseName);\r\n                this.c8o.log._debug(\"PouchDb launched on couchbaselite\");\r\n            } else {\r\n                PouchDB.plugin(c8oload.plugin);\r\n\r\n                this.database = new PouchDB(this.databaseName, opts);\r\n                this.c8o.log._debug(\"PouchDb launched normally\");\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public async remoteDatabaseVersion() {\r\n        return new Promise((resolve)=>{\r\n            let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n            Object.assign(headersObject, this.c8o.headers);\r\n            let headers =  this.c8o.httpInterface.getHeaders(headersObject);\r\n\r\n            this.c8o.httpInterface.httpGetObservable(this.c8oFullSyncDatabaseUrl + \"/_design/c8o\", {\r\n                headers: headers,\r\n                withCredentials: true\r\n            }, {})\r\n            .subscribe(\r\n                response => {\r\n                    if (response != undefined && response[\"~c8oDbVersion\"] != null) {\r\n                        this.c8o.log._trace(\"Server support reset database, remote version for \" + this.remotedatabaseName + \" is \" + response[\"~c8oDbVersion\"]);\r\n                        resolve(response[\"~c8oDbVersion\"])\r\n                    }\r\n                    else {\r\n                        resolve(false);\r\n                    }\r\n            },\r\n            error => {\r\n                this.c8o.log._trace(\"Server does not support reset database\");\r\n                resolve(false);\r\n            })\r\n        });\r\n    }\r\n\r\n    public async localDatabaseVersion() {\r\n        try {\r\n            let info = await this.database.info();\r\n            let response = await this.database.get('_design/c8o')\r\n            if (response[\"~c8oDbVersion\"] != null) {\r\n                this.c8o.log._trace(\"Version for local database,  \" + this.databaseName + \" is \" + response[\"~c8oDbVersion\"]);\r\n                return response[\"~c8oDbVersion\"];\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        catch (error) {\r\n            //there is no c8odesing base has been created in local\r\n            return \"_C8O_DO_NOTHING\";\r\n        }\r\n\r\n    }\r\n\r\n    public async checkResetBase() {\r\n        let remoteVersion = await this.remoteDatabaseVersion();\r\n        let localVersion = await this.localDatabaseVersion();\r\n        let reset = false;\r\n        if(localVersion == \"_C8O_DO_NOTHING\"){\r\n            this.c8o.log._trace(\"Local database version do not contains, _design/c8o, it has been created in local, no reset needed\");\r\n        }\r\n        else{\r\n            if (remoteVersion != false) {\r\n                if (localVersion != false) {\r\n                    if (remoteVersion != localVersion) {\r\n                        // reset\r\n                        reset = true;\r\n                    }\r\n                }\r\n                else{\r\n                    reset = true;\r\n                }\r\n            }\r\n            if (reset) {\r\n                this.c8o.log._trace(\"Since remote database version is different from local database, we will reset it\");\r\n                await this.resetMyBase()\r\n            }\r\n            else {\r\n                this.c8o.log._trace(\"Remote database version and local database, had the same version, reset not needed\");\r\n            }\r\n        }\r\n        return reset;\r\n        \r\n    }\r\n\r\n    async resetMyBase() {\r\n        try {\r\n            await this.database.destroy();\r\n            if (this.c8o.couchUrl != null) {\r\n                this.database = new PouchDB(this.c8o.couchUrl + \"/\" + this.databaseName);\r\n                this.c8o.log._debug(\"PouchDb launched on couchbaselite\");\r\n            } else {\r\n                let c8oload: C8oLoad = new C8oLoad(this.c8o);\r\n                PouchDB.plugin(c8oload.plugin)\r\n                this.database = new PouchDB(this.databaseName);\r\n                this.c8o.log._debug(\"PouchDb launched normally\");\r\n            }\r\n            this.c8o.log._debug(\"Database reset successfully\");\r\n            this.c8o.subscriber_database_reset.next({ databaseName: this.databaseName, success: true, error: false });\r\n        } catch (error) {\r\n            this.c8o.subscriber_database_reset.error({ databaseName: this.databaseName, success: false, error: true, nativeError: error });\r\n            this.c8o.log._error(\"error while resetting database\");\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Start pull and push replications.\r\n     * @returns Promise<any>\r\n     */\r\n    public async startAllReplications(parameters: Object, c8oResponseListener: C8oResponseListener, handler: any, id = null, mutex = null): Promise<any> {\r\n        if(this.c8o.resetBase){\r\n            await this.checkResetBase()\r\n        }\r\n        let resp =  await this.c8o.log.logTest();\r\n        return this.startSync(this.syncFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n        \r\n    }\r\n\r\n    /**\r\n     * Start pull replication.\r\n     * @returns Promise<any>\r\n     */\r\n    public async startPullReplication(parameters: Object, c8oResponseListener: C8oResponseListener, handler: any, id = null, mutex = null): Promise<any> {\r\n        if(this.c8o.resetBase){\r\n            await this.checkResetBase()\r\n        }\r\n        let resp =  await this.c8o.log.logTest();\r\n        return this.startReplication(this.pullFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n\r\n    }\r\n\r\n    /**\r\n     * Start push replication.\r\n     * @returns Promise<any>\r\n     */\r\n    public async startPushReplication(parameters: Object, c8oResponseListener: C8oResponseListener, handler: any, id = null, mutex = null): Promise<any> {\r\n        if(this.c8o.resetBase){\r\n            await this.checkResetBase()\r\n        }\r\n        let resp =  await this.c8o.log.logTest();\r\n        return this.startReplication(this.pushFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n\r\n    }\r\n\r\n    private startSync(fullSyncReplication: FullSyncReplication, parameters: Object, c8oResponseListener: C8oResponseListener, handler, id = null, mutex = null): Promise<any> {\r\n        let continuous: boolean = false;\r\n        let cancel: boolean = false;\r\n        const parametersObj: Object = {};\r\n        //stop replication if exists\r\n        if (fullSyncReplication.replication != null) {\r\n            fullSyncReplication.replication.cancel();\r\n        }\r\n        this._id = id;\r\n        //check continuous flag\r\n        if (parameters[\"continuous\"] != null) {\r\n            if (parameters[\"continuous\"] as boolean === true) {\r\n                continuous = true;\r\n            } else {\r\n                continuous = false;\r\n            }\r\n        }\r\n        //check cancel flag\r\n        if (parameters[\"cancel\"] != null) {\r\n            //noinspection RedundantIfStatementJS\r\n            if (parameters[\"cancel\"] as boolean === true) {\r\n                cancel = true;\r\n            } else {\r\n                cancel = false;\r\n            }\r\n        }\r\n        // Set retry true by default...\r\n        parametersObj[\"retry\"] = true;\r\n\r\n        //check parameters to throw to pouchDB\r\n        if (parameters[\"retry\"] != null) {\r\n            parametersObj[\"retry\"] = parameters[\"retry\"];\r\n        }\r\n        if (parameters[\"filter\"] != null) {\r\n            parametersObj[\"filter\"] = parameters[\"filter\"];\r\n        }\r\n        if (parameters[\"doc_ids\"] != null) {\r\n            parametersObj[\"doc_ids\"] = parameters[\"doc_ids\"];\r\n        }\r\n        if (parameters[\"query_params\"] != null) {\r\n            parametersObj[\"query_params\"] = parameters[\"query_params\"];\r\n        }\r\n        if (parameters[\"view\"] != null) {\r\n            parametersObj[\"view\"] = parameters[\"view\"];\r\n        }\r\n        if (parameters[\"since\"] != null) {\r\n            parametersObj[\"since\"] = parameters[\"since\"];\r\n        }\r\n        if (parameters[\"heartbeat\"] != null) {\r\n            parametersObj[\"heartbeat\"] = parameters[\"heartbeat\"];\r\n        }\r\n        if (parameters[\"timeout\"] != null) {\r\n            parametersObj[\"timeout\"] = parameters[\"timeout\"];\r\n        }\r\n        if (parameters[\"batch_size\"] != null) {\r\n            parametersObj[\"batch_size\"] = parameters[\"batch_size\"];\r\n        }\r\n        if (parameters[\"batches_limit\"] != null) {\r\n            parametersObj[\"batches_limit\"] = parameters[\"batches_limit\"];\r\n        }\r\n        if (parameters[\"back_off_function\"] != null) {\r\n            parametersObj[\"back_off_function\"] = parameters[\"back_off_function\"];\r\n        }\r\n        if (parameters[\"checkpoint\"] != null) {\r\n            parametersObj[\"checkpoint\"] = parameters[\"checkpoint\"];\r\n        }\r\n        if (parameters[\"seq_interval\"] != null) {\r\n            parametersObj[\"seq_interval\"] = parameters[\"seq_interval\"];\r\n        }\r\n\r\n        const remoteDB = new PouchDB(this.c8oFullSyncDatabaseUrl, this.remotePouchHeader);\r\n        let rep = fullSyncReplication.replication = this.database.sync(remoteDB, parametersObj);\r\n        const param = parameters;\r\n        const progress: C8oProgress = new C8oProgress();\r\n        progress.raw = rep;\r\n        progress.continuous = false;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            rep.on(\"change\", (info) => {\r\n                progress.finished = false;\r\n                if (info.direction === \"pull\") {\r\n                    progress.pull = true;\r\n                    progress.status = rep.pull.state;\r\n                    progress.finished = rep.pull.state !== \"active\";\r\n                } else if (info.direction === \"push\") {\r\n                    progress.pull = false;\r\n                    progress.status = rep.push.state;\r\n                    progress.finished = rep.push.state !== \"active\";\r\n                }\r\n                progress.total = info.change.docs_read;\r\n                progress.current = info.change.docs_written;\r\n                param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n\r\n            }).on(\"complete\", (info) => {\r\n                progress.finished = true;\r\n                progress.pull = false;\r\n                progress.total = info.push.docs_read;\r\n                progress.current = info.push.docs_written;\r\n                progress.status = info.status;\r\n                progress.finished = true;\r\n                param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                progress.pull = true;\r\n                progress.total = info.pull.docs_read;\r\n                progress.current = info.pull.docs_written;\r\n                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                if(rep.canceled == true && continuous){\r\n                    this.c8o.log._trace(\"Replication is continuous but has been canceled\");\r\n                    rep.cancel();\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    if(!this.manual_canceled){\r\n                        handler();\r\n                    }\r\n                   \r\n                }\r\n                else if (continuous) {\r\n                    rep.cancel();\r\n                    parametersObj[\"live\"] = true;\r\n                    rep = fullSyncReplication.replication = this.database.sync(remoteDB, parametersObj);\r\n                    progress.continuous = true;\r\n                    progress.raw = rep;\r\n                    progress.taskInfo = \"n/a\";\r\n                    progress.pull = true;\r\n                    progress.status = \"live\";\r\n                    progress.finished = false;\r\n                    progress.pull = true;\r\n                    progress.total = 0;\r\n                    progress.current = 0;\r\n                    (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                    progress.pull = false;\r\n                    (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    rep.on(\"change\", (info) => {\r\n                        progress.finished = false;\r\n                        if (info.direction === \"pull\") {\r\n                            progress.pull = true;\r\n                            progress.status = rep.pull.state;\r\n                        } else if (info.direction === \"push\") {\r\n                            progress.pull = false;\r\n                            progress.status = rep.push.state;\r\n                        }\r\n                        progress.total = info.change.docs_read;\r\n                        progress.current = info.change.docs_written;\r\n                        param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                        (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                    })\r\n                        .on(\"paused\", () => {\r\n                            try{\r\n                                if(((<Array<any>>this.c8o.database[\"replications\"]).map(x=>x.id == id)).length > 0){\r\n                                    rep.cancel();\r\n                                }\r\n                            }\r\n                            catch(e){\r\n                                \r\n                            }\r\n                            \r\n                            progress.finished = true;\r\n                            (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                            if (progress.total === 0 && progress.current === 0) {\r\n                                progress.pull = !progress.pull;\r\n                                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                            }\r\n                        })\r\n                        .on(\"error\", (err) => {\r\n                            if (err.message === \"Unexpected end of JSON input\") {\r\n                                progress.finished = true;\r\n                                progress.status = \"live\";\r\n                                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n                            } else {\r\n                                rep.cancel();\r\n                                if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                                    if (parameters[\"force_retry\"] == true) {\r\n                                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Forcing Restarting replication\");\r\n                                        this.database.sync(remoteDB, { timeout: 600000, retry: true });\r\n                                    } else {\r\n                                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Restarting automatically replication\");\r\n                                    }\r\n                                } else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                                    reject(\"NO_NETWORK\");\r\n                                } else {\r\n                                    reject(err);\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                }\r\n                else if (!continuous) {\r\n                    rep.cancel();\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    this.c8o.log._trace(\"Replication is finished, modifying its state\");\r\n                    if(!this.manual_canceled){\r\n                        handler();\r\n                    }\r\n                }\r\n            }).on(\"error\", (err) => {\r\n                rep.cancel();\r\n                if(mutex != undefined){\r\n                    mutex.release();\r\n                }\r\n                if (err.message === \"Unexpected end of JSON input\") {\r\n                    progress.finished = true;\r\n                    progress.status = \"Complete\";\r\n                    (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n                    rep.cancel();\r\n\r\n                } else if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                    if (parameters[\"force_retry\"] == true) {\r\n                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Forcing Restarting replication\");\r\n                        this.database.sync(remoteDB, { timeout: 600000, retry: true });\r\n                    } else {\r\n                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Restarting automatically replication\");\r\n                    }\r\n                } else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                    reject(\"NO_NETWORK\");\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n\r\n            if (cancel) {\r\n                if (rep != null) {\r\n                    this.c8o.log._trace(\"Replication canceled called, modifying its state\");\r\n                    handler();\r\n                    rep.cancel();\r\n                    progress.finished = true;\r\n                    if (c8oResponseListener != null && c8oResponseListener instanceof C8oResponseProgressListener) {\r\n                        c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    }\r\n                }\r\n                if(mutex != undefined){\r\n                    mutex.release();\r\n                }\r\n            }\r\n        }).catch((error) => {\r\n            throw error.toString();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Starts a replication taking into account parameters.<br/>\r\n     * This action does not directly return something but setup a callback raised when the replication raises change events.\r\n     *\r\n     * @param fullSyncReplication\r\n     * @param c8oResponseListener\r\n     * @param parameters\r\n     */\r\n    private startReplication(fullSyncReplication: FullSyncReplication, parameters: Object, c8oResponseListener: C8oResponseListener, handler, id = null, mutex = null): Promise<any> {\r\n        let continuous: boolean = false;\r\n        let cancel: boolean = false;\r\n        const parametersObj: Object = {};\r\n        //stop replication if exists\r\n        if (fullSyncReplication.replication != null) {\r\n            fullSyncReplication.replication.cancel();\r\n        }\r\n        this._id = id;\r\n        //check continuous flag\r\n        if (parameters[\"continuous\"] != null) {\r\n            if (parameters[\"continuous\"] as boolean == true) {\r\n                continuous = true;\r\n            } else {\r\n                continuous = false;\r\n            }\r\n        }\r\n        //check cancel flag\r\n        if (parameters[\"cancel\"] != null) {\r\n            //noinspection RedundantIfStatementJS\r\n            if (parameters[\"cancel\"] as boolean == true) {\r\n                cancel = true;\r\n            } else {\r\n                cancel = false;\r\n            }\r\n        }\r\n        //check parameters to throw to pouchDB\r\n        // Set retry true by default...\r\n        parametersObj[\"retry\"] = true;\r\n        if (parameters[\"retry\"] != null) {\r\n            parametersObj[\"retry\"] = parameters[\"retry\"];\r\n        }\r\n        if (parameters[\"filter\"] != null) {\r\n            parametersObj[\"filter\"] = parameters[\"filter\"];\r\n        }\r\n        if (parameters[\"doc_ids\"] != null) {\r\n            parametersObj[\"doc_ids\"] = parameters[\"doc_ids\"];\r\n        }\r\n        if (parameters[\"query_params\"] != null) {\r\n            parametersObj[\"query_params\"] = parameters[\"query_params\"];\r\n        }\r\n        if (parameters[\"view\"] != null) {\r\n            parametersObj[\"view\"] = parameters[\"view\"];\r\n        }\r\n        if (parameters[\"since\"] != null) {\r\n            parametersObj[\"since\"] = parameters[\"since\"];\r\n        }\r\n        if (parameters[\"heartbeat\"] != null) {\r\n            parametersObj[\"heartbeat\"] = parameters[\"heartbeat\"];\r\n        }\r\n        if (parameters[\"timeout\"] != null) {\r\n            parametersObj[\"timeout\"] = parameters[\"timeout\"];\r\n        }\r\n        if (parameters[\"batch_size\"] != null) {\r\n            parametersObj[\"batch_size\"] = parameters[\"batch_size\"];\r\n        }\r\n        if (parameters[\"batches_limit\"] != null) {\r\n            parametersObj[\"batches_limit\"] = parameters[\"batches_limit\"];\r\n        }\r\n        if (parameters[\"back_off_function\"] != null) {\r\n            parametersObj[\"back_off_function\"] = parameters[\"back_off_function\"];\r\n        }\r\n        if (parameters[\"checkpoint\"] != null) {\r\n            parametersObj[\"checkpoint\"] = parameters[\"checkpoint\"];\r\n        }\r\n        if (parameters[\"seq_interval\"] != null) {\r\n            parametersObj[\"seq_interval\"] = parameters[\"seq_interval\"];\r\n        }\r\n\r\n        const remoteDB = new PouchDB(this.c8oFullSyncDatabaseUrl, this.remotePouchHeader);\r\n        let rep = fullSyncReplication.replication = fullSyncReplication.pull ? this.database.replicate.from(remoteDB, parametersObj) : this.database.replicate.to(remoteDB, parametersObj);\r\n\r\n        const progress: C8oProgress = new C8oProgress();\r\n        progress.raw = rep;\r\n        progress.pull = fullSyncReplication.pull;\r\n        progress.continuous = false;\r\n        return new Promise((resolve, reject) => {\r\n\r\n            rep.on(\"change\", (info) => {\r\n                progress.total = info.docs_read;\r\n                progress.current = info.docs_written;\r\n                progress.status = \"change\";\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n            }).on(\"complete\", (info) => {\r\n                progress.finished = true;\r\n                progress.total = info.docs_read;\r\n                progress.current = info.docs_written;\r\n                progress.status = \"complete\";\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n                if(rep.canceled == true && continuous){\r\n                    this.c8o.log._trace(\"Replication is continuous but has been canceled\");\r\n                    rep.cancel();\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    if(!this.manual_canceled){\r\n                        handler();\r\n                    }\r\n                }\r\n                if (continuous) {\r\n                    rep.cancel();\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    parametersObj[\"live\"] = true;\r\n                    rep = fullSyncReplication.replication = fullSyncReplication.pull ? this.database.replicate.from(remoteDB, parametersObj) : this.database.replicate.to(remoteDB, parametersObj);\r\n                    progress.continuous = true;\r\n                    progress.raw = rep;\r\n                    progress.taskInfo = \"n/a\";\r\n                    rep.on(\"change\", (info) => {\r\n                        progress.finished = false;\r\n                        progress.total = info.docs_read;\r\n                        progress.current = info.docs_written;\r\n                        progress.status = \"change\";\r\n                        parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                        (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n                    })\r\n                    .on(\"paused\", () => {\r\n                        try{\r\n                            if(((<Array<any>>this.c8o.database[\"replications\"]).map(x=>x.id == id)).length > 0){\r\n                                rep.cancel();\r\n                            }\r\n                        }\r\n                        catch(e){\r\n                            \r\n                        }\r\n                    })\r\n                    .on(\"error\", (err) => {\r\n                        if (err.message === \"Unexpected end of JSON input\") {\r\n                            progress.finished = true;\r\n                            progress.status = \"live\";\r\n                            (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n\r\n                        } else {\r\n                            rep.cancel();\r\n                            if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                                reject(\"TIMEOUT\");\r\n                            } else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                                reject(\"NO_NETWORK\");\r\n                            } else {\r\n                                reject(err);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                else if (!continuous) {\r\n                    rep.cancel();\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    this.c8o.log._trace(\"Replication is finished, modifying its state\");\r\n                    if(!this.manual_canceled){\r\n                        handler();\r\n                    }\r\n                }\r\n            }).on(\"error\", (err) => {\r\n                rep.cancel();\r\n                if(mutex != undefined){\r\n                    mutex.release();\r\n                }\r\n                if (err.message === \"Unexpected end of JSON input\") {\r\n                    progress.finished = true;\r\n                    progress.status = \"complete\";\r\n                    parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                    (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n                    rep.cancel();\r\n                } else if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                    reject(\"TIMEOUT\");\r\n                } else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                    reject(\"NO_NETWORK\");\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n\r\n            if (cancel) {\r\n                if(mutex != undefined){\r\n                    mutex.release();\r\n                }\r\n                if (rep != null) {\r\n                    this.c8o.log._trace(\"Replication canceled called, modifying its state\");\r\n                    handler();\r\n                    rep.cancel();\r\n                    progress.finished = true;\r\n                    if (c8oResponseListener != null && c8oResponseListener instanceof C8oResponseProgressListener) {\r\n                        c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }).catch((error) => {\r\n            throw error.toString();\r\n        });\r\n\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get getdatabseName(): string {\r\n        return this.databaseName;\r\n    }\r\n\r\n    public get getdatabase(): any {\r\n        return this.database;\r\n    }\r\n\r\n    public deleteDB(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.database != null) {\r\n                this.database.destroy().then((response) => {\r\n                    this.database = null;\r\n                    resolve(response);\r\n                }).catch((error) => {\r\n                    this.c8o.log._debug(\"Failed to close DB, will retry: \", error.message);\r\n                    this.database.destroy().then((response) => {\r\n                        this.database = null;\r\n                        resolve(response);\r\n                    }).catch((error) => {\r\n                        this.c8o.log._debug(\"Failed to close DB, second attempt has failed \", error.message);\r\n                        reject(error);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * cancel Pull Replication\r\n     */\r\n    public cancelPullReplication(): void {\r\n        if (this.pullFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.pullFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * cancel Push Replication\r\n     */\r\n    public cancelPushReplication(): void {\r\n        if (this.pushFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.pushFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * cancel Sync Replication\r\n     */\r\n    public cancelSyncReplication(): void {\r\n        if (this.syncFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.syncFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * return current pull replication state or false if replication does not exists\r\n     */\r\n\r\n}\r\n\r\nexport interface ReplicationState {\r\n    listener: any;\r\n    parameters: any;\r\n    type: any;\r\n    database: C8oFullSyncDatabase;\r\n    stopped: Boolean\r\n}\r\n","export class FullSyncDeleteDocumentParameter {\r\n    public static DOCID: FullSyncDeleteDocumentParameter = new FullSyncDeleteDocumentParameter(\"docid\");\r\n    public static REV: FullSyncDeleteDocumentParameter = new FullSyncDeleteDocumentParameter(\"rev\");\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","export class FullSyncAttachmentParameter {\r\n    public static DOCID: FullSyncAttachmentParameter = new FullSyncAttachmentParameter(\"docid\");\r\n    public static NAME: FullSyncAttachmentParameter = new FullSyncAttachmentParameter(\"name\");\r\n    public static CONTENT_TYPE: FullSyncAttachmentParameter = new FullSyncAttachmentParameter(\"content_type\");\r\n    public static CONTENT: FullSyncAttachmentParameter = new FullSyncAttachmentParameter(\"content\");\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","export class FullSyncGetDocumentParameter {\r\n    public static DOCID: FullSyncGetDocumentParameter = new FullSyncGetDocumentParameter(\"docid\");\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n}\r\n","export class FullSyncGetViewParameter {\r\n    public static VIEW: FullSyncGetViewParameter = new FullSyncGetViewParameter(\"view\");\r\n    public static DDOC: FullSyncGetViewParameter = new FullSyncGetViewParameter(\"ddoc\");\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","import {C8oCore, FullSyncPolicy, FullSyncPostDocumentParameter} from \"./c8oCore\";\r\nimport {C8oFullSync, C8oFullSyncCbl} from \"./c8oFullSync\";\r\nimport {\r\n    C8oResponseJsonListener,\r\n    C8oResponseListener,\r\n    C8oResponseProgressListener,\r\n} from \"./c8oResponse\";\r\nimport {C8oUtilsCore} from \"./c8oUtilsCore\";\r\nimport {FullSyncAttachmentParameter} from \"./fullSyncAttachmentParameter\";\r\nimport {FullSyncGetDocumentParameter} from \"./fullSyncGetDocumentParameter\";\r\nimport {FullSyncGetViewParameter} from \"./fullSyncGetViewParameter\";\r\n/**\r\n * Created by charlesg on 10/01/2017.\r\n */\r\n// @dynamic\r\nexport class FullSyncRequestable {\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static GET: FullSyncRequestable = new FullSyncRequestable(\"get\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            const docid: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, true);\r\n            resolve(c8oFullSync.handleGetDocumentRequest(databaseName, docid, parameters));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static DELETE: FullSyncRequestable = new FullSyncRequestable(\"delete\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            const docid: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, true);\r\n            c8oFullSync.handleDeleteDocumentRequest(databaseName, docid, parameters).then((result) => {\r\n                resolve(result);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        })\r\n            .catch((error) => {\r\n                throw error;\r\n            });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static POST: FullSyncRequestable = new FullSyncRequestable(\"post\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                const fullSyncPolicyParameter: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncPostDocumentParameter.POLICY.name, false);\r\n                const fullSyncPolicy: FullSyncPolicy = FullSyncPolicy.getFullSyncPolicy(fullSyncPolicyParameter);\r\n                let fullSyncPolicySubMerge = [];\r\n                if(fullSyncPolicyParameter == \"merge\"){\r\n                    for(let elem in parameters){\r\n                        if(elem.indexOf(\"_use_merge\") == 0){\r\n                            let key = elem.substring(11);\r\n                            let value = parameters[elem];\r\n                            fullSyncPolicySubMerge.push({key:key, value: value});\r\n                        }\r\n                    }\r\n                }\r\n                resolve(c8oFullSync.handlePostDocumentRequest(databaseName, fullSyncPolicy, parameters, fullSyncPolicySubMerge));\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static PUT_ATTACHMENT: FullSyncRequestable = new FullSyncRequestable(\"put_attachment\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            const docid: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n            const name: string = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n            const contentType: string = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.CONTENT_TYPE.name, false);\r\n            const content = C8oUtilsCore.getParameterObjectValue(parameters, FullSyncAttachmentParameter.CONTENT.name, false);\r\n            resolve(c8oFullSync.handlePutAttachmentRequest(databaseName, docid, name, contentType, content));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    public static GET_ATTACHMENT: FullSyncRequestable = new FullSyncRequestable(\"get_attachment\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            const docid: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n            const name: string = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n            resolve(c8oFullSync.handleGetAttachmentRequest(databaseName, docid, name, parameters));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static DELETE_ATTACHMENT: FullSyncRequestable = new FullSyncRequestable(\"delete_attachment\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            const docid: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n            const name: string = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n            resolve(c8oFullSync.handleDeleteAttachmentRequest(databaseName, docid, name));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static ALL: FullSyncRequestable = new FullSyncRequestable(\"all\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            c8oFullSync.handleAllDocumentsRequest(databaseName, parameters)\r\n            .then((result) => {\r\n                resolve(result);\r\n            });\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static ALL_LOCAL: FullSyncRequestable = new FullSyncRequestable(\"all_local\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            c8oFullSync.handleAllLocalDocumentsRequest(databaseName, parameters)\r\n            .then((result) => {\r\n                resolve(result);\r\n            });\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static VIEW: FullSyncRequestable = new FullSyncRequestable(\"view\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            const ddoc: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetViewParameter.DDOC.name, false);\r\n            const view: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetViewParameter.VIEW.name, false);\r\n            c8oFullSync.handleGetViewRequest(databaseName, ddoc, view, parameters).then((result) => {\r\n                resolve(result);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static CREATEINDEX: FullSyncRequestable = new FullSyncRequestable(\"createIndex\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n            try{\r\n                const fields: string = C8oUtilsCore.peekParameterObjectValue(parameters, \"fields\", false);\r\n                let result = await c8oFullSync.handleCreateIndexRequest(databaseName, fields, parameters);\r\n                return result;\r\n            }\r\n            catch(e){\r\n                return e;\r\n            }\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static FIND: FullSyncRequestable = new FullSyncRequestable(\"find\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        try{\r\n            const selector: string = C8oUtilsCore.peekParameterObjectValue(parameters, \"selector\", false);\r\n            let result = await c8oFullSync.handleGetFindRequest(databaseName, selector, parameters);\r\n            return result;\r\n        }\r\n        catch(e){\r\n            return e;\r\n        }\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static EXPLAIN: FullSyncRequestable = new FullSyncRequestable(\"explain\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        try{\r\n            const selector: string = C8oUtilsCore.peekParameterObjectValue(parameters, \"selector\", false);\r\n            let result = await c8oFullSync.handleExplainRequest(databaseName, selector, parameters);\r\n            return result;\r\n        }\r\n        catch(e){\r\n            return e;\r\n        }\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static GETINDEXES: FullSyncRequestable = new FullSyncRequestable(\"getIndexes\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        try{\r\n            let result = await c8oFullSync.handleGetIndexesRequest(databaseName, parameters);\r\n            return result;\r\n        }\r\n        catch(e){\r\n            return e;\r\n        }\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static DELETEINDEX: FullSyncRequestable = new FullSyncRequestable(\"deleteIndex\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        try{\r\n            let result = await c8oFullSync.handleDeleteIndexRequest(databaseName, parameters);\r\n            return result;\r\n        }\r\n        catch(e){\r\n            return e;\r\n        }\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static SEARCH: FullSyncRequestable = new FullSyncRequestable(\"search\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        try{\r\n            const query: string = C8oUtilsCore.peekParameterObjectValue(parameters, \"query\", false);\r\n            const fields: string = C8oUtilsCore.peekParameterObjectValue(parameters, \"fields\", false);\r\n            let result = await c8oFullSync.handleSearchRequest(databaseName, query, fields, parameters);\r\n            return result;\r\n        }\r\n        catch(e){\r\n            return e;\r\n        }\r\n    });\r\n\r\n    \r\n    public static SYNC: FullSyncRequestable = new FullSyncRequestable(\"sync\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        let pullFinish: boolean = false;\r\n        let pushFinish: boolean = false;\r\n        return new Promise((resolve, reject) => {\r\n            c8oFullSync.handleSyncRequest(databaseName, parameters, new C8oResponseProgressListener((progress, parameters) => {\r\n                if(parameters[\"cancel\"] == true){\r\n                    resolve({ok: true});\r\n                }\r\n                else{\r\n                    if (!pullFinish && progress.pull && progress.finished) {\r\n                        pullFinish = true;\r\n                        c8oFullSync.c8o.log._debug(\"handleFullSyncRequest pullFinish = true: \" + progress.toString());\r\n                    }\r\n                    if (!pushFinish && progress.push && progress.finished) {\r\n                        pushFinish = true;\r\n                        c8oFullSync.c8o.log._debug(\"handleFullSyncRequest pushFinish = true: \" + progress.toString());\r\n                    }\r\n                    if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                        c8oFullSync.c8o.log._debug(\"handleFullSyncRequest onJsonResponse: \" + progress.toString());\r\n                        const varNull: JSON = null;\r\n                        (c8oResponseListener as C8oResponseJsonListener).onJsonResponse(varNull, parameters);\r\n                    }\r\n                    if (pullFinish || pushFinish) {\r\n                        resolve({ok: true});\r\n                    }\r\n                }\r\n            })).catch((error) => {\r\n                reject(error);\r\n            });\r\n        })\r\n            .catch((error) => {\r\n                throw error;\r\n            });\r\n    });\r\n\r\n    public static REPLICATE_PULL: FullSyncRequestable = new FullSyncRequestable(\"replicate_pull\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            c8oFullSync.handleReplicatePullRequest(databaseName, parameters, new C8oResponseProgressListener((progress, param) => {\r\n                if(parameters[\"cancel\"] == true){\r\n                    resolve({ok: true});\r\n                }\r\n                else{\r\n                    if (progress.finished) {\r\n                        resolve({ok: true});\r\n                    }\r\n                    if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                        const varNull: JSON = null;\r\n                        (c8oResponseListener as C8oResponseJsonListener).onJsonResponse(varNull, param);\r\n                    }\r\n                }\r\n            })).catch((error) => {\r\n                reject(error);\r\n            });\r\n        })\r\n            .catch((error) => {\r\n                throw error;\r\n            });\r\n    });\r\n\r\n    public static REPLICATE_PUSH: FullSyncRequestable = new FullSyncRequestable(\"replicate_push\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            c8oFullSync.handleReplicatePushRequest(databaseName, parameters, new C8oResponseProgressListener((progress, param) => {\r\n                if(parameters[\"cancel\"] == true){\r\n                    resolve({ok: true});\r\n                }\r\n                else{\r\n                    if (progress.finished) {\r\n                        resolve({ok: true});\r\n                    }\r\n                    if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                        const varNull: JSON = null;\r\n                        (c8oResponseListener as C8oResponseJsonListener).onJsonResponse(varNull, param);\r\n                    }\r\n                }\r\n            })).catch((error) => {\r\n                reject(error);\r\n            });\r\n        })\r\n            .catch((error) => {\r\n                throw error;\r\n            });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n    public static RESET: FullSyncRequestable = new FullSyncRequestable(\"reset\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            c8oFullSync.handleResetDatabaseRequest(databaseName).then((response) => {\r\n                c8oFullSync.c8o.subscriber_database_reset.next({ databaseName: databaseName, success: true, error: false });\r\n                resolve(response);\r\n            }).catch((error) => {\r\n                c8oFullSync.c8o.subscriber_database_reset.error({ databaseName: databaseName, success: false, error: true, nativeError: error });\r\n                reject(error);\r\n            });\r\n        })\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n    public static CREATE: FullSyncRequestable = new FullSyncRequestable(\"create\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            resolve(c8oFullSync.handleCreateDatabaseRequest(databaseName));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n    public static BULK: FullSyncRequestable = new FullSyncRequestable(\"bulk\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            resolve(c8oFullSync.handleBulkRequest(databaseName, parameters));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    public static INFO: FullSyncRequestable = new FullSyncRequestable(\"info\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            resolve(c8oFullSync.handleInfoRequest(databaseName));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });    \r\n\r\n\r\n    //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n    public static DESTROY: FullSyncRequestable = new FullSyncRequestable(\"destroy\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            c8oFullSync.handleDestroyDatabaseRequest(databaseName).then((response) => {\r\n                resolve(response);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n\r\n    });\r\n\r\n    private value: string;\r\n    private handleFullSyncRequestOp: (c8oFullSyncCbl: C8oFullSync, str: string, dictionary: Object, c8oResponseListener: C8oResponseListener) => any;\r\n\r\n    constructor(value: string, handleFullSyncRequestOp: (c8oFullSyncCbl: C8oFullSyncCbl, str: string, dictionary: Object, c8oResponseListener: C8oResponseListener) => any) {\r\n        this.value = value;\r\n        this.handleFullSyncRequestOp = handleFullSyncRequestOp;\r\n    }\r\n\r\n    public handleFullSyncRequest(c8oFullSync: C8oFullSync, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.handleFullSyncRequestOp(c8oFullSync, databaseName, parameters, c8oResponseListener).then((result) => {\r\n                resolve(result);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    public static getFullSyncRequestable(value: string): FullSyncRequestable {\r\n        const fullSyncRequestableValues: FullSyncRequestable[] = FullSyncRequestable.values();\r\n        for (let i = 0; i < fullSyncRequestableValues.length; i++) {\r\n            if (fullSyncRequestableValues[i].value === value) {\r\n                return fullSyncRequestableValues[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static values(): FullSyncRequestable[] {\r\n        return [this.GET, this.DELETE, this.POST, this.ALL, this.ALL_LOCAL, this.VIEW, this.SYNC, this.REPLICATE_PULL, this.REPLICATE_PUSH, this.RESET, this.CREATE, this.DESTROY, this.PUT_ATTACHMENT, this.GET_ATTACHMENT,this.DELETE_ATTACHMENT, this.BULK, this.INFO, this.CREATEINDEX, this.FIND, this.DELETEINDEX, this.GETINDEXES, this.EXPLAIN, this.SEARCH];\r\n\r\n    }\r\n}\r\n","export class FullSyncResponse {\r\n\r\n    /**\r\n     * The response key indicating the operation status.\r\n     */\r\n    public static RESPONSE_KEY_OK: string = \"ok\";\r\n    /**\r\n     * The response key indicating the document ID.\r\n     */\r\n    public static RESPONSE_KEY_DOCUMENT_ID: string = \"id\";\r\n    /**\r\n     * The response key indicating the document revision.\r\n     */\r\n    public static RESPONSE_KEY_DOCUMENT_REVISION: string = \"rev\";\r\n}\r\n\r\n/**\r\n * Returned by a fullSync operation without return data.\r\n */\r\nexport class FullSyncAbstractResponse {\r\n    private operationStatus: boolean;\r\n\r\n    constructor(operationStatus: boolean) {\r\n        this.operationStatus = operationStatus;\r\n    }\r\n\r\n    public getProperties(): any {\r\n        const properties: Object = {};\r\n        properties[FullSyncResponse.RESPONSE_KEY_OK] = this.operationStatus;\r\n        return properties;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a default fullSync response.\r\n */\r\nexport class FullSyncDefaultResponse extends FullSyncAbstractResponse {\r\n    constructor(operationStatus: boolean) {\r\n        super(operationStatus);\r\n    }\r\n}\r\n\r\n/**\r\n * Returned by a fullSync document operation without return data.\r\n */\r\nexport class FullSyncDocumentOperationResponse extends FullSyncAbstractResponse {\r\n    public documentId: string;\r\n    public documentRevision: string;\r\n\r\n    constructor(documentId: string, documentRevision: string, operationStatus: boolean) {\r\n        super(operationStatus);\r\n        this.documentId = documentId;\r\n        this.documentRevision = documentRevision;\r\n    }\r\n\r\n    public override getProperties(): Object {\r\n        const properties: Object = super.getProperties();\r\n        properties[FullSyncResponse.RESPONSE_KEY_DOCUMENT_ID] = this.documentId;\r\n        properties[FullSyncResponse.RESPONSE_KEY_DOCUMENT_REVISION] = this.documentRevision;\r\n        return properties;\r\n    }\r\n\r\n}\r\n","import { C8oCore } from \"./c8oCore\";\r\n\r\nexport class C8oAlldocsLocal {\r\n\r\n    constructor(private c8o: C8oCore) {\r\n    }\r\n    private DB_VERSION = 5;\r\n    private LOCAL_STORE = 'local-store';\r\n    private ATTACH_STORE = 'attach-store';\r\n\r\n    public alldocs(opts, db): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            let dbName = db[\"prefix\"] + db[\"name\"];\r\n            opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;\r\n            if (opts.start_key) {\r\n                opts.startkey = opts.start_key;\r\n            }\r\n            if (opts.end_key) {\r\n                opts.endkey = opts.end_key;\r\n            }\r\n            if ('keys' in opts) {\r\n                if (!Array.isArray(opts.keys)) {\r\n                    return reject(new TypeError('options.keys must be an array'));\r\n                }\r\n                var incompatibleOpt =\r\n                    ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {\r\n                        return incompatibleOpt in opts;\r\n                    })[0];\r\n                if (incompatibleOpt) {\r\n                    reject('Some query parameter is invalid' +\r\n                        'Query parameter `' + incompatibleOpt +\r\n                        '` is not compatible with multi-get'\r\n                    );\r\n                    return;\r\n                }\r\n                if (!this.isRemote(db)) {\r\n                    this.allDocsKeysParse(opts);\r\n                    if (opts.keys.length === 0) {\r\n                        let callback = (arg1, arg2, arg3) => {\r\n                            resolve({ arg1: arg1, arg2: arg2, arg3: arg3 })\r\n                        }\r\n                        return this.idbAllDocs({ limit: 0 }, callback, dbName);\r\n                    }\r\n                }\r\n            }\r\n            let callback = (err, result) => {\r\n                if(!err){\r\n                    this.c8o.log._trace(\"[c8oAlldocsLocal], alldocs: ok\" );\r\n                }\r\n                else{\r\n                    this.c8o.log._error(\"[c8oAlldocsLocal], alldocs: an error occured :\", err);\r\n                }\r\n\r\n                resolve({ err: err, result: result})\r\n            }\r\n            return this.idbAllDocs(opts, callback, dbName);\r\n\r\n        });\r\n    }\r\n    private openBase(DB_NAME, resolve = null, reject= null) {\r\n        if(resolve != null){\r\n            this.doOpenBase(DB_NAME, resolve, reject)\r\n        }\r\n        return new Promise((resolve, reject)=>{\r\n            this.doOpenBase(DB_NAME, resolve, reject)\r\n        });\r\n    }\r\n\r\n    private doOpenBase(DB_NAME, resolve = null, reject= null){\r\n        try {\r\n            let req = window.indexedDB.open(DB_NAME, this.DB_VERSION);\r\n            req.onsuccess = (event) => {\r\n                if(req.result.objectStoreNames.length == 0){\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, we need to re-initialized it\");\r\n                    this.restaureDb(DB_NAME)\r\n                    .then(()=>{\r\n                        this.c8o.log._debug(\"[alldocs] database has been re-initialized, we will execute all docs\");\r\n                        this.openBase(DB_NAME, resolve, reject)\r\n                    })\r\n                    .catch((err)=>{\r\n                        reject(err)\r\n                    })\r\n                    \r\n                }\r\n                else{\r\n                    resolve(req.result);\r\n                }\r\n               \r\n           }\r\n        }\r\n        catch(err){\r\n            reject(err);\r\n        }\r\n    }\r\n\r\n    private restaureDb(DB_NAME){\r\n        return new Promise<void>((resolve, reject)=>{\r\n            var dbDeleteRequest = window.indexedDB.deleteDatabase(DB_NAME);\r\n            dbDeleteRequest.onerror = (event)=> {\r\n                this.c8o.log._error(\"[alldocs] database is corrupted, failed to re-initialized database\");\r\n                reject(event)\r\n            };\r\n        \r\n            dbDeleteRequest.onsuccess = (event)=> {\r\n                this.c8o.log._debug(\"[alldocs] database is corrupted, deletion successfull\");\r\n                // Let us open our database\r\n                var DBOpenRequest = window.indexedDB.open(DB_NAME, 5);\r\n        \r\n                DBOpenRequest.onsuccess = (event)=> {\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, creation successfull\");\r\n                    resolve();\r\n                };\r\n        \r\n                DBOpenRequest.onupgradeneeded = (event)=> {\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, database need to be upgraded\");\r\n                };\r\n                DBOpenRequest.onerror = (event: any)=> {\r\n                    this.c8o.log._error(\"[alldocs] database is corrupted, creation errored\", event);\r\n                    reject(event)\r\n                };\r\n            };\r\n        })\r\n        \r\n    }\r\n\r\n    private async idbAllDocs(opts, callback, DB_NAME) {\r\n        let idb = await this.openBase(DB_NAME)\r\n\r\n        var start = 'startkey' in opts ? opts.startkey : false;\r\n        var end = 'endkey' in opts ? opts.endkey : false;\r\n        var key = 'key' in opts ? opts.key : false;\r\n        var keys = 'keys' in opts ? opts.keys : false;\r\n        var skip = opts.skip || 0;\r\n        var limit = typeof opts.limit === 'number' ? opts.limit : -1;\r\n        var inclusiveEnd = opts.inclusive_end !== false;\r\n\r\n        var keyRange;\r\n        var keyRangeError;\r\n        if (!keys) {\r\n            keyRange = this.createKeyRange(start, end, inclusiveEnd, key, opts.descending);\r\n            keyRangeError = keyRange && keyRange.error;\r\n            if (keyRangeError &&\r\n                !(keyRangeError.name === \"DataError\" && keyRangeError.code === 0)) {\r\n                // DataError with error code 0 indicates start is less than end, so\r\n                // can just do an empty query. Else need to throw\r\n                return callback(\"indexed_db_went_bad\" +\r\n                    keyRangeError.name, keyRangeError.message);\r\n            }\r\n        }\r\n\r\n        var stores = [this.LOCAL_STORE];\r\n\r\n        if (opts.attachments) {\r\n            stores.push(this.ATTACH_STORE);\r\n        }\r\n        var txnResult = this.openTransactionSafely(idb, stores, 'readonly');\r\n        if (txnResult[\"error\"]) {\r\n            return callback(txnResult[\"error\"]);\r\n        }\r\n        var txn = txnResult[\"txn\"];\r\n        txn.oncomplete = onTxnComplete;\r\n        txn.onabort = callback;\r\n        var localStore = txn.objectStore(this.LOCAL_STORE);\r\n        var results = [];\r\n        var docCount;\r\n\r\n        var countRequest = localStore.count();\r\n        countRequest.onsuccess = function () {\r\n            docCount = countRequest.result;\r\n        }\r\n\r\n        function allDocsInner(winningRev$$1, metadata) {\r\n            var row = {\r\n                id: metadata.id,\r\n                key: metadata.id,\r\n                value: {\r\n                    rev: winningRev$$1\r\n                }\r\n            };\r\n            var deleted = metadata.deleted;\r\n            if (deleted) {\r\n                if (keys) {\r\n                    results.push(row);\r\n                    // deleted docs are okay with \"keys\" requests\r\n                    row[\"value\"][\"deleted\"] = true;\r\n                    row[\"doc\"] = null;\r\n                }\r\n            } else if (skip-- <= 0) {\r\n                results.push(row);\r\n                if (opts.include_docs) {\r\n                    row[\"doc\"] = metadata[\"_c8o_inlcude\"];\r\n                }\r\n            }\r\n        }\r\n\r\n        let processBatch  = (batchValues) =>{\r\n            for (var i = 0, len = batchValues.length; i < len; i++) {\r\n                if (results.length === limit) {\r\n                    break;\r\n                }\r\n                var batchValue = batchValues[i];\r\n                if (batchValue.error && keys) {\r\n                    // key was not found with \"keys\" requests\r\n                    results.push(batchValue);\r\n                    continue;\r\n                }\r\n                var metadata = this.decodeMetadata(batchValue);\r\n                var winningRev$$1 = metadata[\"winningRev\"];\r\n                metadata[\"_c8o_inlcude\"] = batchValue;\r\n                allDocsInner(winningRev$$1, metadata);\r\n            }\r\n        }\r\n\r\n        function onBatch(batchKeys, batchValues, cursor) {\r\n            if (!cursor) {\r\n                return;\r\n            }\r\n            processBatch(batchValues);\r\n            if (results.length < limit) {\r\n                cursor.continue();\r\n            }\r\n        }\r\n\r\n        function onGetAll(e) {\r\n            var values = e.target.result;\r\n            if (opts.descending) {\r\n                values = values.reverse();\r\n            }\r\n            processBatch(values);\r\n        }\r\n\r\n        function onResultsReady() {\r\n            var returnVal = {\r\n                total_rows: docCount,\r\n                offset: opts.skip,\r\n                rows: results\r\n            };\r\n\r\n            callback(null, returnVal);\r\n        }\r\n\r\n        function onTxnComplete() {\r\n            if (opts.attachments) {\r\n                this.postProcessAttachments(results, opts.binary).then(onResultsReady);\r\n            } else {\r\n                onResultsReady();\r\n            }\r\n        }\r\n\r\n        // don't bother doing any requests if start > end or limit === 0\r\n        if (keyRangeError || limit === 0) {\r\n            return;\r\n        }\r\n        if (keys) {\r\n            return this.allDocsKeys(opts.keys, localStore, onBatch);\r\n        }\r\n        if (limit === -1) { // just fetch everything\r\n            return this.getAll(localStore, keyRange, onGetAll);\r\n        }\r\n        // else do a cursor\r\n        // choose a batch size based on the skip, since we'll need to skip that many\r\n        this.runBatchedCursor(localStore, keyRange, opts.descending, limit + skip, onBatch);\r\n    }\r\n\r\n    private runBatchedCursor(objectStore, keyRange, descending, batchSize, onBatch) {\r\n\r\n        if (batchSize === -1) {\r\n          batchSize = 1000;\r\n        }\r\n      \r\n        // Bail out of getAll()/getAllKeys() in the following cases:\r\n        // 1) either method is unsupported - we need both\r\n        // 2) batchSize is 1 (might as well use IDBCursor)\r\n        // 3) descending – no real way to do this via getAll()/getAllKeys()\r\n      \r\n        var useGetAll = typeof objectStore.getAll === 'function' &&\r\n          typeof objectStore.getAllKeys === 'function' &&\r\n          batchSize > 1 && !descending;\r\n      \r\n        var keysBatch;\r\n        var valuesBatch;\r\n        var pseudoCursor;\r\n      \r\n        function onGetAll(e) {\r\n          valuesBatch = e.target.result;\r\n          if (keysBatch) {\r\n            onBatch(keysBatch, valuesBatch, pseudoCursor);\r\n          }\r\n        }\r\n      \r\n        function onGetAllKeys(e) {\r\n          keysBatch = e.target.result;\r\n          if (valuesBatch) {\r\n            onBatch(keysBatch, valuesBatch, pseudoCursor);\r\n          }\r\n        }\r\n      \r\n        function continuePseudoCursor() {\r\n          if (!keysBatch.length) { // no more results\r\n            return onBatch();\r\n          }\r\n          // fetch next batch, exclusive start\r\n          var lastKey = keysBatch[keysBatch.length - 1];\r\n          var newKeyRange;\r\n          if (keyRange && keyRange.upper) {\r\n            try {\r\n              newKeyRange = IDBKeyRange.bound(lastKey, keyRange.upper,\r\n                true, keyRange.upperOpen);\r\n            } catch (e) {\r\n              if (e.name === \"DataError\" && e.code === 0) {\r\n                return onBatch(); // we're done, startkey and endkey are equal\r\n              }\r\n            }\r\n          } else {\r\n            newKeyRange = IDBKeyRange.lowerBound(lastKey, true);\r\n          }\r\n          keyRange = newKeyRange;\r\n          keysBatch = null;\r\n          valuesBatch = null;\r\n          objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;\r\n          objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;\r\n        }\r\n      \r\n        function onCursor(e) {\r\n          var cursor = e.target.result;\r\n          if (!cursor) { // done\r\n            return onBatch();\r\n          }\r\n          // regular IDBCursor acts like a batch where batch size is always 1\r\n          onBatch([cursor.key], [cursor.value], cursor);\r\n        }\r\n      \r\n        if (useGetAll) {\r\n          pseudoCursor = {\"continue\": continuePseudoCursor};\r\n          objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;\r\n          objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;\r\n        } else if (descending) {\r\n          objectStore.openCursor(keyRange, 'prev').onsuccess = onCursor;\r\n        } else {\r\n          objectStore.openCursor(keyRange).onsuccess = onCursor;\r\n        }\r\n      }\r\n\r\n    private getAll(objectStore, keyRange, onSuccess) {\r\n        if (typeof objectStore.getAll === 'function') {\r\n          // use native getAll\r\n          objectStore.getAll(keyRange).onsuccess = onSuccess;\r\n          return;\r\n        }\r\n        // fall back to cursors\r\n        var values = [];\r\n      \r\n        function onCursor(e) {\r\n          var cursor = e.target.result;\r\n          if (cursor) {\r\n            values.push(cursor.value);\r\n            cursor.continue();\r\n          } else {\r\n            onSuccess({\r\n              target: {\r\n                result: values\r\n              }\r\n            });\r\n          }\r\n        }\r\n        \r\n  objectStore.openCursor(keyRange).onsuccess = onCursor;\r\n}\r\n\r\n    private allDocsKeys(keys, docStore, onBatch) {\r\n        // It's not guaranted to be returned in right order  \r\n        var valuesBatch = new Array(keys.length);\r\n        var count = 0;\r\n        keys.forEach(function (key, index) {\r\n            docStore.get(key).onsuccess = function (event) {\r\n                if (event.target.result) {\r\n                    valuesBatch[index] = event.target.result;\r\n                } else {\r\n                    valuesBatch[index] = { key: key, error: 'not_found' };\r\n                }\r\n                count++;\r\n                if (count === keys.length) {\r\n                    onBatch(keys, valuesBatch, {});\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    \r\n    private decodeMetadata(storedObject) {\r\n        if (!storedObject) {\r\n            return null;\r\n        }\r\n        var metadata = {};\r\n        metadata[\"winningRev\"] = storedObject._rev;\r\n        metadata[\"id\"] = storedObject._id;\r\n        return metadata;\r\n    }\r\n\r\n    private openTransactionSafely(idb, stores, mode) {\r\n        try {\r\n            return {\r\n                txn: idb.transaction(stores, mode)\r\n            };\r\n        } catch (err) {\r\n            return {\r\n                error: err\r\n            };\r\n        }\r\n    }\r\n\r\n    private isRemote(db) {\r\n        if (typeof db._remote === 'boolean') {\r\n            return db._remote;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (typeof db.type === 'function') {\r\n            return db.type() === 'http';\r\n        }\r\n        /* istanbul ignore next */\r\n        return false;\r\n    }\r\n\r\n    private allDocsKeysParse(opts) {\r\n        var keys = ('limit' in opts) ?\r\n            opts.keys.slice(opts.skip, opts.limit + opts.skip) :\r\n            (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;\r\n        opts.keys = keys;\r\n        opts.skip = 0;\r\n        delete opts.limit;\r\n        if (opts.descending) {\r\n            keys.reverse();\r\n            opts.descending = false;\r\n        }\r\n    }\r\n\r\n    private createKeyRange(start, end, inclusiveEnd, key, descending) {\r\n        try {\r\n            if (start && end) {\r\n                if (descending) {\r\n                    return IDBKeyRange.bound(end, start, !inclusiveEnd, false);\r\n                } else {\r\n                    return IDBKeyRange.bound(start, end, false, !inclusiveEnd);\r\n                }\r\n            } else if (start) {\r\n                if (descending) {\r\n                    return IDBKeyRange.upperBound(start);\r\n                } else {\r\n                    return IDBKeyRange.lowerBound(start);\r\n                }\r\n            } else if (end) {\r\n                if (descending) {\r\n                    return IDBKeyRange.lowerBound(end, !inclusiveEnd);\r\n                } else {\r\n                    return IDBKeyRange.upperBound(end, !inclusiveEnd);\r\n                }\r\n            } else if (key) {\r\n                return IDBKeyRange.only(key);\r\n            }\r\n        } catch (e) {\r\n            return { error: e };\r\n        }\r\n        return null;\r\n    }\r\n}","import { C8oBase } from \"./c8oBase\";\r\nimport { C8oCore, FullSyncPolicy } from \"./c8oCore\";\r\nimport { C8oFullSyncChangeListener } from \"./c8oFullSyncChangeListener\";\r\nimport { C8oFullSyncTranslator } from \"./c8oFullSyncTranslator\";\r\nimport { C8oLocalCacheResponse } from \"./c8oLocalCacheResponse\";\r\nimport { C8oResponseJsonListener, C8oResponseListener } from \"./c8oResponse\";\r\nimport { C8oUtilsCore, Semaphore } from \"./c8oUtilsCore\";\r\nimport { C8oCouchBaseLiteException } from \"./Exception/c8oCouchBaseLiteException\";\r\nimport { C8oException } from \"./Exception/c8oException\";\r\nimport { C8oExceptionMessage } from \"./Exception/c8oExceptionMessage\";\r\nimport { C8oRessourceNotFoundException } from \"./Exception/c8oRessourceNotFoundException\";\r\nimport { C8oUnavailableLocalCacheException } from \"./Exception/c8oUnavailableLocalCacheException\";\r\nimport { C8oFullSyncDatabase } from \"./fullSyncDatabase\";\r\nimport { FullSyncDeleteDocumentParameter } from \"./fullSyncDeleteDocumentParameter\";\r\nimport { FullSyncRequestable } from \"./fullSyncRequestable\";\r\nimport { FullSyncDefaultResponse, FullSyncDocumentOperationResponse } from \"./fullSyncResponse\";\r\n\r\nexport class C8oFullSync {\r\n    private static FULL_SYNC_URL_PATH: string = \"/fullsync/\";\r\n    /**\r\n     * The project requestable value to execute a fullSync request.\r\n     */\r\n    public static FULL_SYNC_PROJECT: string = \"fs://\";\r\n    public static FULL_SYNC__ID: string = \"_id\";\r\n    public static FULL_SYNC__REV: string = \"_rev\";\r\n    public static FULL_SYNC__ATTACHMENTS: string = \"_attachments\";\r\n\r\n    public c8o: C8oCore;\r\n    protected fullSyncDatabaseUrlBase: string;\r\n    protected localSuffix: string;\r\n\r\n    public constructor(c8o: C8oCore) {\r\n        this.c8o = c8o;\r\n        this.fullSyncDatabaseUrlBase = c8o.endpointConvertigo + C8oFullSync.FULL_SYNC_URL_PATH;\r\n        this.localSuffix = (c8o.fullSyncLocalSuffix !== null) ? c8o.fullSyncLocalSuffix : \"_device\";\r\n    }\r\n\r\n    /**\r\n     * Handles a fullSync request.<br/>\r\n     * It determines the type of the request thanks to parameters.\r\n     *\r\n     * @param _parameters\r\n     * @param listener\r\n     * @return promise<any>\r\n     * @throws C8oException\r\n     */\r\n    public async handleFullSyncRequest(_parameters: Object, listener: C8oResponseListener): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const parameters = {};\r\n            for (const val in _parameters) {\r\n                if (_parameters[val] instanceof Blob != true && typeof _parameters[val] !== \"function\") {\r\n                    //if it's not a blob then stringify and parse the value to make some values like true case insensitive ( from string to boolean)\r\n                    parameters[val] = JSON.parse(JSON.stringify(_parameters[val]));\r\n                } else {\r\n                    parameters[val] = _parameters[val];\r\n                }\r\n            }\r\n            const projectParameterValue: string = C8oUtilsCore.peekParameterStringValue(parameters, C8oCore.ENGINE_PARAMETER_PROJECT, true);\r\n            if (projectParameterValue.indexOf(C8oFullSync.FULL_SYNC_PROJECT) !== 0) {\r\n                reject(new C8oException(C8oExceptionMessage.invalidParameterValue(projectParameterValue, \"its don't start with\" + C8oFullSync.FULL_SYNC_PROJECT)));\r\n            }\r\n            let fullSyncRequestableValue: string = C8oUtilsCore.peekParameterStringValue(parameters, C8oCore.ENGINE_PARAMETER_SEQUENCE, true);\r\n\r\n            //  get rid of the optional trailing #RouteHint present in the sequence\r\n            if (fullSyncRequestableValue.indexOf(\"#\") !== -1) {\r\n                fullSyncRequestableValue = fullSyncRequestableValue.substring(0, fullSyncRequestableValue.indexOf(\"#\"));\r\n            }\r\n\r\n            const fullSyncRequestable: FullSyncRequestable = FullSyncRequestable.getFullSyncRequestable(fullSyncRequestableValue);\r\n            if (fullSyncRequestable === null) {\r\n                reject(new C8oException(C8oExceptionMessage.invalidParameterValue(C8oCore.ENGINE_PARAMETER_PROJECT, C8oExceptionMessage.unknownValue(\"fullSync requestable\", fullSyncRequestableValue))));\r\n            }\r\n            let databaseName: string = projectParameterValue.substring(C8oFullSync.FULL_SYNC_PROJECT.length);\r\n            if (databaseName.length < 1) {\r\n                databaseName = this.c8o.defaultDatabaseName;\r\n                if (databaseName === null) {\r\n                    reject(new C8oException(C8oExceptionMessage.invalidParameterValue(C8oCore.ENGINE_PARAMETER_PROJECT, C8oExceptionMessage.missingValue(\"fullSync database name\"))));\r\n                }\r\n            }\r\n\r\n            let response: any;\r\n\r\n            fullSyncRequestable.handleFullSyncRequest(this, databaseName, parameters, listener).then((result) => {\r\n                response = result;\r\n                if (response === null || response === undefined) {\r\n                    reject(new C8oException(C8oExceptionMessage.couchNullResult()));\r\n                }\r\n                resolve(this.handleFullSyncResponse(response, listener));\r\n            }).catch((error) => {\r\n                if (error instanceof C8oException) {\r\n                    reject(error);\r\n                } else {\r\n                    reject(new C8oException(C8oExceptionMessage.FullSyncRequestFail(), error));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    /**\r\n     *\r\n     * @param response\r\n     * @param listener\r\n     * @return response\r\n     * @throws C8oException Failed to parse response.\r\n     */\r\n    public handleFullSyncResponse(response: any, listener: C8oResponseListener): any {\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Checks if request parameters correspond to a fullSync request.\r\n     */\r\n    public static isFullSyncRequest(requestParameter: Object): boolean {\r\n        if (C8oUtilsCore.getParameterStringValue(requestParameter, C8oCore.ENGINE_PARAMETER_PROJECT, false) !== null) {\r\n            return C8oUtilsCore.getParameterStringValue(requestParameter, C8oCore.ENGINE_PARAMETER_PROJECT, false).indexOf(C8oFullSync.FULL_SYNC_PROJECT) === 0;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\nimport { ReplicationState } from \"./fullSyncDatabase\"\r\nimport { C8oAlldocsLocal } from './c8oAlldocsLocal';\r\nexport class C8oFullSyncCbl extends C8oFullSync {\r\n    private static ATTACHMENT_PROPERTY_KEY_CONTENT_URL: string = \"content_url\";\r\n    private fullSyncDatabases: Object;\r\n    private fullSyncChangeListeners: C8oFullSyncChangeListener[][] = [];\r\n    private cblChangeListeners: any[] = [];\r\n    public replicationsToRestart: Array<ReplicationState> = [];\r\n    public canceled = false;\r\n\r\n    constructor(c8o: C8oCore) {\r\n        super(c8o);\r\n        this.fullSyncDatabases = {};\r\n        if (window[\"C8oFullSyncCbl\"] == undefined) {\r\n            window[\"C8oFullSyncCbl\"] = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the database with this name in the list.<br/>\r\n     * If it does not already exist yet then creates it and adds it to the list.\r\n     *\r\n     * @param databaseName\r\n     * @return C8oFullSyncDatabase\r\n     * @throws C8oException Failed to create a new fullSync database.\r\n     */\r\n    public async getOrCreateFullSyncDatabase(databaseName: string, isLocalCache = false): Promise<C8oFullSyncDatabase> {\r\n        let mutex = window[\"C8oFullSyncCbl\"][databaseName] == undefined ? window[\"C8oFullSyncCbl\"][databaseName] = new Semaphore(1) : window[\"C8oFullSyncCbl\"][databaseName];\r\n        await mutex.acquire();\r\n        let localDatabaseName: string = databaseName + this.localSuffix;\r\n\r\n        localDatabaseName = this.c8o.database.localName(localDatabaseName, true);\r\n        let prefix = this.c8o.prefixBase == true && isLocalCache == false ? this.c8o.session.user.name + \"_\" : \"\";\r\n\r\n        if (this.fullSyncDatabases[localDatabaseName] == null) {\r\n            this.fullSyncDatabases[localDatabaseName] = new C8oFullSyncDatabase(this.c8o, databaseName, this.fullSyncDatabaseUrlBase, this.localSuffix, prefix);\r\n        }\r\n        mutex.release();\r\n        return this.fullSyncDatabases[localDatabaseName];\r\n    }\r\n\r\n    public override handleFullSyncResponse(response: any, listener: C8oResponseListener): any {\r\n        response = super.handleFullSyncResponse(response, listener);\r\n        if (listener instanceof C8oResponseJsonListener) {\r\n            if (response instanceof FullSyncDocumentOperationResponse) {\r\n                return C8oFullSyncTranslator.fullSyncDocumentOperationResponseToJson(response as FullSyncDocumentOperationResponse);\r\n            } else if (response instanceof FullSyncDefaultResponse) {\r\n                return C8oFullSyncTranslator.fullSyncDefaultResponseToJson(response as FullSyncDefaultResponse);\r\n            } else if (response instanceof Object) {\r\n                return response as JSON;\r\n            } else {\r\n                throw new C8oException(C8oExceptionMessage.illegalArgumentIncompatibleListener(listener.toString(), typeof response));\r\n            }\r\n        }\r\n    }\r\n\r\n    public async handleGetAttachmentUrlRequest(fullSyncDatabaseName: string, docid: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase: C8oFullSyncDatabase = null;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(fullSyncDatabaseName);\r\n        const attachmentName = C8oUtilsCore.getParameterStringValue(parameters, \"attachment_name\", false);\r\n        return new Promise((resolve) => {\r\n            fullSyncDatabase.getdatabase.getAttachment(docid, attachmentName).then((buffer) => {\r\n                resolve(buffer);\r\n            });\r\n        });\r\n    }\r\n\r\n    public async handleGetDocumentRequest(fullSyncDatabaseName: string, docid: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase: C8oFullSyncDatabase = null;\r\n        let param: Object;\r\n        param = parameters[\"attachments\"] ? { attachments: true } : {};\r\n        parameters[\"binary\"] ? param[\"binary\"] = true : {};\r\n\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(fullSyncDatabaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(docid, param).then((document) => {\r\n                if (document == null) {\r\n                    reject(new C8oRessourceNotFoundException((C8oExceptionMessage.ressourceNotFound(\"requested document \\\"\" + docid + \"\\\"\"))));\r\n                }\r\n                if (document === null) {\r\n                    document = {};\r\n                }\r\n                resolve(document);\r\n            })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                });\r\n\r\n        });\r\n    }\r\n\r\n    public async handleDeleteDocumentRequest(DatabaseName: string, docid: string, parameters: Object): Promise<any> {\r\n        return new Promise(async (resolve, reject) => {\r\n            let fullSyncDatabase: C8oFullSyncDatabase = null;\r\n\r\n            fullSyncDatabase = await this.getOrCreateFullSyncDatabase(DatabaseName);\r\n            const revParameterValue: string = C8oUtilsCore.getParameterStringValue(parameters, FullSyncDeleteDocumentParameter.REV.name, false);\r\n            let documentRevision: string;\r\n            if (revParameterValue === null) {\r\n                fullSyncDatabase.getdatabase.get(docid).then((doc) => {\r\n                    if (doc === null) {\r\n                        reject(new C8oRessourceNotFoundException(\"Cannot find document\"));\r\n                    }\r\n                    documentRevision = doc._rev;\r\n                    return fullSyncDatabase.getdatabase.remove(doc);\r\n                }).then((result) => {\r\n                    resolve(new FullSyncDocumentOperationResponse(docid, documentRevision, result.ok));\r\n                }).catch((err) => {\r\n                    reject(new C8oException(C8oExceptionMessage.couchRequestDeleteDocument(), err));\r\n                });\r\n            } else {\r\n\r\n                fullSyncDatabase.getdatabase.remove(docid, revParameterValue)\r\n                    .then((result) => {\r\n                        resolve(new FullSyncDocumentOperationResponse(docid, documentRevision, result.ok));\r\n                    }).catch((err) => {\r\n                        reject(new C8oException(C8oExceptionMessage.couchRequestDeleteDocument(), err));\r\n                    });\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public async handlePostDocumentRequest(databaseName: string, fullSyncPolicy: FullSyncPolicy, parameters: Object, fullsyncPolicySubMerge = null): Promise<any> {\r\n        let fullSyncDatabase: C8oFullSyncDatabase;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let subkeySeparatorParameterValue: string = C8oUtilsCore.getParameterStringValue(parameters, C8oCore.FS_SUBKEY_SEPARATOR, false);\r\n        if (subkeySeparatorParameterValue == null) {\r\n            subkeySeparatorParameterValue = \".\";\r\n        }\r\n        const newProperties = {};\r\n        for (let i = 0; i < Object.keys(parameters).length; i++) {\r\n            let parameterName: string = Object.keys(parameters)[i];\r\n            if (parameterName.indexOf(\"__\") !== 0 && parameterName.indexOf(\"_use_\") !== 0) {\r\n                let objectParameterValue: any = parameters[Object.keys(parameters)[i]];\r\n                const paths: string[] = parameterName.split(subkeySeparatorParameterValue);\r\n                if (paths.length > 1) {\r\n                    parameterName = paths[0];\r\n                    let count = paths.length - 1;\r\n                    while (count > 0) {\r\n                        const tmpObject: Object = {};\r\n                        tmpObject[paths[count]] = objectParameterValue;\r\n                        objectParameterValue = tmpObject;\r\n                        count--;\r\n                    }\r\n                    const existProperty = newProperties[parameterName];\r\n                    if (existProperty != null) {\r\n                        C8oFullSyncCbl.mergeProperties(objectParameterValue, existProperty);\r\n                    }\r\n                }\r\n                newProperties[parameterName] = objectParameterValue;\r\n            }\r\n\r\n\r\n        }\r\n        if (fullsyncPolicySubMerge != null) {\r\n\r\n        }\r\n        const db = fullSyncDatabase.getdatabase;\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncPolicy.action(db, newProperties, { fullsyncPolicySubMerge: fullsyncPolicySubMerge, subkeySeparatorParameterValue: subkeySeparatorParameterValue })\r\n                .then((createdDocument: any) => {\r\n                    const fsDocOpeResp: FullSyncDocumentOperationResponse = new FullSyncDocumentOperationResponse(createdDocument.id, createdDocument.rev, createdDocument.ok);\r\n                    resolve(fsDocOpeResp);\r\n                }).catch((error) => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n\r\n    public async handlePutAttachmentRequest(databaseName: string, docid: string, attachmentName: string, attachmentType: string, attachmentContent: any): Promise<any> {\r\n        let document: any = null;\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(docid).then((result) => {\r\n                document = result;\r\n\r\n                if (document !== null) {\r\n                    fullSyncDatabase.getdatabase.putAttachment(docid, attachmentName, result._rev, attachmentContent, attachmentType)\r\n                        .then((result) => {\r\n                            //  handle result\r\n                            resolve(new FullSyncDocumentOperationResponse(result._id, result._rev, result.ok));\r\n                        }).catch((err) => {\r\n                            reject(new C8oCouchBaseLiteException(\"Unable to put the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n                        });\r\n                } else {\r\n                    reject(new C8oRessourceNotFoundException(\"Cannot find document\"));\r\n                }\r\n\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    public async  handleGetAttachmentRequest(databaseName: string, docid: string, attachmentName: string, parameters: any): Promise<any> {\r\n        let document: any = null;\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.getAttachment(docid, attachmentName, parameters)\r\n                .then((buffer) => {\r\n                    resolve(buffer);\r\n                }).catch((err) => {\r\n                    reject(new C8oCouchBaseLiteException(\"Unable to put the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n                });\r\n        });\r\n\r\n    }\r\n\r\n    public async handleDeleteAttachmentRequest(databaseName: string, docid: string, attachmentName: string): Promise<any> {\r\n        let document: any = null;\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(docid).then((result) => {\r\n                document = result;\r\n            }).then(() => {\r\n                if (document !== null) {\r\n                    fullSyncDatabase.getdatabase.removeAttachment(docid, attachmentName, document._rev).catch((err) => {\r\n                        reject(new C8oCouchBaseLiteException(\"Unable to delete the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n                    });\r\n                } else {\r\n                    reject(new C8oRessourceNotFoundException(\"Document do not exists\"));\r\n                }\r\n                resolve(new FullSyncDocumentOperationResponse(document._id, document._rev, true));\r\n            })\r\n                .catch((err) => {\r\n                    reject(new C8oException(err.message, err));\r\n                })\r\n        });\r\n    }\r\n\r\n    public async handleAllDocumentsRequest(databaseName: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = null;\r\n\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase\r\n                .allDocs(parameters)\r\n                .then((res) => {\r\n                    resolve(res);\r\n                })\r\n                .catch((err) => {\r\n                    reject(new C8oException(err.stack));\r\n                });\r\n        });\r\n    }\r\n    public async handleAllLocalDocumentsRequest(databaseName: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = null;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let c8oAlldocsLocal = new C8oAlldocsLocal(this.c8o);\r\n        return new Promise((resolve, reject) => {\r\n            c8oAlldocsLocal.alldocs(parameters, fullSyncDatabase.database)\r\n                .then((res) => {\r\n                    if (!res.err) {\r\n                        resolve(res.result);\r\n                    }\r\n                    else {\r\n                        if (res[\"err\"][\"stack\"] != undefined) {\r\n                            reject(new C8oException(res[\"err\"][\"stack\"]));\r\n                        }\r\n                        else {\r\n                            reject(new C8oException(JSON.stringify(res[\"err\"])))\r\n                        }\r\n                    }\r\n\r\n                })\r\n                .catch((err) => {\r\n                    if (err[\"err\"][\"stack\"] != undefined) {\r\n                        reject(new C8oException(err[\"err\"][\"stack\"]));\r\n                    }\r\n                    else {\r\n                        reject(new C8oException(JSON.stringify(err[\"err\"])))\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    public async handleGetViewRequest(databaseName: string, ddocName: string, viewName: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = null;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let attachments;\r\n        let binary;\r\n        let include_docs;\r\n        if (parameters[\"attachments\"] && window[\"cblite\"] !== undefined) {\r\n            attachments = C8oUtilsCore.getParameterStringValue(parameters, \"attachments\", false);\r\n            binary = C8oUtilsCore.getParameterStringValue(parameters, \"binary\", false);\r\n            include_docs = C8oUtilsCore.getParameterStringValue(parameters, \"include_docs\", false);\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.query(ddocName + \"/\" + viewName, parameters)\r\n                .then((result) => {\r\n                    if (attachments) {\r\n                        const array: Object[] = [];\r\n                        let len = 0;\r\n                        for (const resp of result.rows) {\r\n                            this.handleGetDocumentRequest(databaseName, resp.id, {\r\n                                attachments: true,\r\n                                binary: true,\r\n                                include_docs: true,\r\n                            }).then((getResult) => {\r\n                                array.push(getResult);\r\n                                len++;\r\n                                if (len === result.rows.length) {\r\n                                    result.rows = array;\r\n                                    resolve(result);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        resolve(result);\r\n                    }\r\n\r\n                }).catch((error) => {\r\n                    reject(new C8oException(C8oExceptionMessage.couchRequestGetView(), error));\r\n                });\r\n        });\r\n\r\n    }\r\n\r\n    public async handleCreateIndexRequest(databaseName: string, fields: any, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            parameters[\"fields\"] = fields;\r\n            var result = await fullSyncDatabase.getdatabase.createIndex({index: parameters});\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestCreateIndex(), err)\r\n        }\r\n    }\r\n\r\n    public async handleGetFindRequest(databaseName: string,selector:any, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            parameters[\"selector\"] = selector;\r\n            var result = await fullSyncDatabase.getdatabase.find(parameters);\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestFind(), err)\r\n        }\r\n    }\r\n\r\n    public async handleExplainRequest(databaseName: string,selector:any, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            parameters[\"selector\"] = selector;\r\n            var result = await fullSyncDatabase.getdatabase.explain(parameters);\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestExplain(), err)\r\n        }\r\n    }\r\n\r\n    public async handleGetIndexesRequest(databaseName: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            var result = await fullSyncDatabase.getdatabase.getIndexes();\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestGetIndexes(), err)\r\n        }\r\n    }\r\n\r\n    public async handleDeleteIndexRequest(databaseName: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            var result = await fullSyncDatabase.getdatabase.deleteIndex(parameters);\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestDeleteIndex(), err)\r\n        }\r\n    }\r\n\r\n    public async handleSearchRequest(databaseName: string, query, fields, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        parameters[\"query\"] = query;\r\n        parameters[\"fields\"] = fields;\r\n        try {\r\n            var result = await fullSyncDatabase.getdatabase.search(parameters);\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestSearch(), err)\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Check network status before starting a replication\r\n     */\r\n    private checkState(): boolean {\r\n        return this.c8o.reachable == undefined ? false : this.c8o.reachable;\r\n    }\r\n\r\n    public async handleSyncRequest(databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"sync\", fullSyncDatabase);\r\n        if (!resp[0]) {\r\n            this.c8o.session.mutexCheckSession.acquire();\r\n            return fullSyncDatabase.startAllReplications(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n        }\r\n        else {\r\n            this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n            return new Promise(() => { });\r\n        }\r\n    }\r\n\r\n    public async handleReplicatePullRequest(databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"pull\", fullSyncDatabase);\r\n        if (!resp[0]) {\r\n            this.c8o.session.mutexCheckSession.acquire();\r\n            return fullSyncDatabase.startPullReplication(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n        }\r\n        else {\r\n            this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n            return new Promise(() => { });\r\n        }\r\n    }\r\n\r\n    public async handleReplicatePushRequest(databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"push\", fullSyncDatabase);\r\n        if (!resp[0]) {\r\n            this.c8o.session.mutexCheckSession.acquire();\r\n            return fullSyncDatabase.startPushReplication(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n        }\r\n        else {\r\n            this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n            return new Promise(() => { });\r\n        }\r\n    }\r\n\r\n    public handleResetDatabaseRequest(databaseName: string): Promise<FullSyncDefaultResponse> {\r\n        return new Promise((resolve, reject) => {\r\n            this.handleDestroyDatabaseRequest(databaseName)\r\n            .then(() => {\r\n                this.handleCreateDatabaseRequest(databaseName).\r\n                    then((res) => {\r\n                        resolve(res);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    })\r\n\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    public async handleCreateDatabaseRequest(databaseName: string): Promise<FullSyncDefaultResponse> {\r\n        await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new FullSyncDefaultResponse(true);\r\n    }\r\n\r\n    public async handleBulkRequest(databaseName: string, parameters: Object): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            const header = {\r\n                \"x-convertigo-sdk\": this.c8o.sdkVersion,\r\n            };\r\n            if(this.c8o.xsrfUsed){\r\n                const headerName = \"x-xsrf-token\";\r\n                const fetch = \"Fetch\";\r\n                header[headerName] = window.localStorage.getItem(headerName) != undefined ? window.localStorage.getItem(headerName) : fetch;\r\n            }\r\n            Object.assign(header, this.c8o.headers);\r\n            fullSyncDatabase.getdatabase.c8oload(parameters[\"data\"],\r\n\r\n                {\r\n                    proxy: this.c8o.endpointConvertigo + \"/fullsync/\" + (fullSyncDatabase.getdatabseName).replace(\"_device\", \"\"),\r\n                    fetch: (url, opts) => {\r\n                        opts.credentials = 'include';\r\n                        for (let key in header) {\r\n                            opts.headers.set(key, header[key]);\r\n                        }\r\n                        return PouchDB.fetch(url, opts);\r\n                    }\r\n                },\r\n                this.c8o\r\n            )\r\n                .then(() => {\r\n                    resolve(new FullSyncDefaultResponse(true));\r\n                }).catch((err) => {\r\n                    //this.c8o.log._error(\"Error loading the \" + parameters[\"data\"] + \" database resource\" + JSON.stringify(err, Object.getOwnPropertyNames(err)))\r\n                    reject(new C8oException(\"Bulk Load failed\", err));\r\n                })\r\n        })\r\n    }\r\n\r\n    public async handleInfoRequest(databaseName: string): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.info()\r\n                .then((response) => {\r\n                    resolve(response);\r\n                }).catch((err) => {\r\n                    //this.c8o.log._error(\"Error loading the \" + parameters[\"data\"] + \" database resource\" + JSON.stringify(err, Object.getOwnPropertyNames(err)))\r\n                    reject(new C8oException(\"Get info failed\", err));\r\n                })\r\n        })\r\n    }\r\n\r\n    public async handleDestroyDatabaseRequest(databaseName: string): Promise<any> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const localDatabaseName = databaseName + this.localSuffix;\r\n            (await this.getOrCreateFullSyncDatabase(databaseName)).deleteDB().then((response) => {\r\n                if (this.fullSyncDatabases[this.c8o.database.localName(localDatabaseName)] != null) {\r\n                    delete this.fullSyncDatabases[this.c8o.database.localName(localDatabaseName)];\r\n                    this.c8o.database.cancelAllForbase(this.fullSyncDatabases[\"databaseName\"]);\r\n                }\r\n                resolve(new FullSyncDefaultResponse(response.ok));\r\n            }).catch((err) => {\r\n                reject(new C8oException(err.name, err));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Allow to clone object whithout reference\r\n     * \r\n     * @param obj Object: object to be cloned \r\n     */\r\n    public static deepCloneObject(obj) {\r\n        if (obj === null || typeof obj !== 'object') {\r\n            return obj;\r\n        }\r\n        var temporarystorage = obj.constructor();\r\n        for (var key in obj) {\r\n            temporarystorage[key] = C8oFullSyncCbl.deepCloneObject(obj[key]);\r\n        }\r\n        return temporarystorage;\r\n    }\r\n\r\n    /**\r\n     * Recursive function that browse object to be modified and apply delete\r\n     * \r\n     * @param objToChange Object: the object to be modified\r\n     * @param path string: The path where to find object to be modified\r\n     * @param index number: index\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    public static applySubPolicyDelete (objToChange, path, index, subPolicy) {\r\n        let arrayPath = path.split(subPolicy.subkeySeparatorParameterValue);\r\n        let length = arrayPath.length;\r\n        if(index + 1 == length){\r\n            // delete key\r\n            delete objToChange[arrayPath[index]];\r\n        }\r\n        else{\r\n            //recursive call to navigate to property\r\n            C8oFullSyncCbl.applySubPolicyDelete(objToChange[arrayPath[index]],path, index + 1, subPolicy);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recursive function that browse object to be modified and apply override\r\n     * \r\n     * @param objToChange Object: the object to be modified\r\n     * @param path string: The path where to find object to be modified\r\n     * @param index number: index\r\n     * @param source Object: the object posted\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    public static applySubPolicyOverride(objToChange, path, index, source, subPolicy) {\r\n        let arrayPath = path.split(subPolicy.subkeySeparatorParameterValue);\r\n        let length = arrayPath.length;\r\n        if(index + 1 == length){\r\n            // change key\r\n            // user has not given object to override\r\n            if(source == undefined){\r\n               \r\n            }\r\n            else if(source[arrayPath[index]] != null){\r\n                objToChange[arrayPath[index]] = source[arrayPath[index]];\r\n            }\r\n        }\r\n        else{\r\n            //recursive call to navigate to property\r\n            if(source != undefined){\r\n                if(objToChange == undefined){\r\n                    objToChange = {};\r\n                }\r\n                C8oFullSyncCbl.applySubPolicyOverride(objToChange[arrayPath[index]],path, index + 1, source[arrayPath[index]], subPolicy);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Global function that will apply sub policy for merge\r\n     * \r\n     * @param override boolean: if we have to perform override sub policy or not\r\n     * @param source Object: the object posted\r\n     * @param objToChange Object: the object to be modified\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    public static applySubPolicyForMerge(override, source, objToChange, subPolicy){\r\n        for(let elem of subPolicy.fullsyncPolicySubMerge){\r\n            switch(elem.value){\r\n                case \"override\":\r\n                    if(override){\r\n                        C8oFullSyncCbl.applySubPolicyOverride(objToChange, elem.key, 0, source, subPolicy);\r\n                    }\r\n                break;\r\n                case \"delete\":\r\n                    C8oFullSyncCbl.applySubPolicyDelete(objToChange,elem.key, 0,subPolicy);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static mergeProperties(newProperties: Object, oldProperties: Object, useMergePolicy = \"none\") {\r\n        for (let i = 0; i < Object.keys(oldProperties).length; i++) {\r\n            const oldPropertyKey = Object.keys(oldProperties)[i];\r\n            const oldPropertyValue = oldProperties[Object.keys(oldProperties)[i]];\r\n            // Checks if the new document contains the same key\r\n            if (newProperties[oldPropertyKey] !== null && newProperties[oldPropertyKey] !== undefined) {\r\n                const newDocumentValue = newProperties[oldPropertyKey];\r\n                if (Object.prototype.toString.call(newDocumentValue) === \"[object Array]\" && Object.prototype.toString.call(oldPropertyValue) === \"[object Array]\") {\r\n                    C8oFullSyncCbl.mergeArrayProperties(newDocumentValue, oldPropertyValue);\r\n                } else if (typeof (newDocumentValue) === \"object\" && typeof (oldPropertyValue) === \"object\") {\r\n                    C8oFullSyncCbl.mergeProperties(newDocumentValue, oldPropertyValue);\r\n                } else {\r\n                    // If the new document has the same key but its value is not the same type than the old one or if their type are \"simple\"\r\n                    // Does nothing cause the right value is the new one\r\n                }\r\n            } else {\r\n                // If the new document does not contain the key then adds it\r\n                newProperties[oldPropertyKey] = oldPropertyValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static mergeArrayProperties(newArray: any, oldArray: any) {\r\n        const newArraySize = newArray.length;\r\n        const oldArraySize = oldArray.length;\r\n        for (let i = 0; i < oldArraySize; i++) {\r\n            let newArrayValue: any = null;\r\n            if (i < newArraySize) {\r\n                newArrayValue = newArray[i];\r\n            }\r\n            const oldArrayValue = oldArray[i];\r\n\r\n            if (newArrayValue !== null) {\r\n                if (newArrayValue instanceof Array && oldArrayValue instanceof Array) {\r\n                    C8oFullSyncCbl.mergeArrayProperties(newArrayValue, oldArrayValue);\r\n                } else if (typeof (newArrayValue) === \"object\" && typeof (oldArrayValue) === \"object\") {\r\n                    C8oFullSyncCbl.mergeProperties(newArrayValue, oldArrayValue);\r\n                } else {\r\n                    // If the new array value is not the same type than the old one or if their type are \"simple\"\r\n                    // Does nothing cause the right value is the new one\r\n                }\r\n            } else {\r\n                // If the new array value is null then it means that it size is reach so we can add objects at its end\r\n                newArray.push(oldArrayValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public async getDocucmentFromDatabase(c8o: C8oCore, databaseName: string, documentId: string): Promise<any> {\r\n        return new Promise(async (resolve, reject) => {\r\n            let c8oFullSyncDatabase: C8oFullSyncDatabase;\r\n            try {\r\n                c8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n            } catch (err) {\r\n                reject(new C8oException(C8oExceptionMessage.fullSyncGetOrCreateDatabase(databaseName), err));\r\n            }\r\n            c8oFullSyncDatabase.getdatabase().get(documentId).then((result) => {\r\n                resolve(result);\r\n            });\r\n        });\r\n    }\r\n\r\n    public async overrideDocument(document: any, properties: Object, databaseName) {\r\n        properties[C8oFullSync.FULL_SYNC__REV] = document._rev;\r\n        let c8oFullSyncDatabase: C8oFullSyncDatabase;\r\n        try {\r\n            c8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.fullSyncGetOrCreateDatabase(databaseName));\r\n        }\r\n\r\n        c8oFullSyncDatabase.getdatabase().put(properties)\r\n            .catch((err) => {\r\n                throw new C8oException(err.message, err);\r\n            });\r\n\r\n    }\r\n\r\n    public async getResponseFromLocalCache(c8oCallRequestIdentifier: string): Promise<any> {\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(C8oCore.LOCAL_CACHE_DATABASE_NAME, true);\r\n        let localCacheDocument = null;\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(c8oCallRequestIdentifier).then((result) => {\r\n                localCacheDocument = result;\r\n\r\n                const response = JSON.stringify(localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE]);\r\n                const responseType = localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE];\r\n                const expirationDate = localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE];\r\n\r\n                let responseString: string = null;\r\n                let responseTypeString: string = null;\r\n                let expirationDateNumber: number = -1;\r\n\r\n                if (response != null) {\r\n                    if (typeof response === \"string\") {\r\n                        responseString = response;\r\n                    } else {\r\n                        reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                    }\r\n                }\r\n                if (responseType != null) {\r\n                    if (typeof responseType === \"string\") {\r\n                        responseTypeString = responseType;\r\n                    } else {\r\n                        reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                    }\r\n                }\r\n                if (expirationDate != null) {\r\n                    if (typeof expirationDate === \"number\") {\r\n                        expirationDateNumber = expirationDate;\r\n                        const currentTime = new Date().getTime();\r\n                        if (expirationDateNumber < currentTime) {\r\n                            reject(new C8oUnavailableLocalCacheException(C8oExceptionMessage.timeToLiveExpired()));\r\n                        }\r\n                    } else {\r\n                        reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                    }\r\n                }\r\n                resolve(new C8oLocalCacheResponse(responseString, responseTypeString, expirationDateNumber));\r\n            }).catch((err) => {\r\n                if (err.status === 404) {\r\n                    resolve(new C8oUnavailableLocalCacheException(C8oExceptionMessage.localCacheDocumentJustCreated(), err));\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    public async saveResponseToLocalCache(c8oCallRequestIdentifier: string, localCacheResponse: C8oLocalCacheResponse): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(C8oCore.LOCAL_CACHE_DATABASE_NAME,true);\r\n        return new Promise((resolve) => {\r\n            fullSyncDatabase.getdatabase.get(c8oCallRequestIdentifier).then((localCacheDocument) => {\r\n                const properties = {};\r\n                properties[C8oFullSync.FULL_SYNC__ID] = c8oCallRequestIdentifier;\r\n                properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE] = localCacheResponse.getResponse();\r\n                properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE] = localCacheResponse.getResponseType();\r\n                if (localCacheResponse.getExpirationDate() > 0) {\r\n                    properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE] = localCacheResponse.getExpirationDate();\r\n                }\r\n                const currentRevision = localCacheDocument._rev;\r\n                if (currentRevision !== null) {\r\n                    properties[C8oFullSyncCbl.FULL_SYNC__REV] = currentRevision;\r\n                }\r\n                fullSyncDatabase.getdatabase.put(properties).then((result) => {\r\n                    resolve(result);\r\n                });\r\n            }).catch((error) => {\r\n                if (error.status === 404) {\r\n                    const properties = {};\r\n                    properties[C8oFullSync.FULL_SYNC__ID] = c8oCallRequestIdentifier;\r\n                    properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE] = localCacheResponse.getResponse();\r\n                    properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE] = localCacheResponse.getResponseType();\r\n                    if (localCacheResponse.getExpirationDate() > 0) {\r\n                        properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE] = localCacheResponse.getExpirationDate();\r\n                    }\r\n                    fullSyncDatabase.getdatabase.put(properties).then((result) => {\r\n                        resolve(result);\r\n                    });\r\n                } else {\r\n                    resolve(error);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public async addFullSyncChangeListener(db: string, listener: C8oFullSyncChangeListener, parameters: Object = {}) {\r\n        if (db === null || db === \"\") {\r\n            db = this.c8o.defaultDatabaseName;\r\n        }\r\n\r\n        const listeners: C8oFullSyncChangeListener[][] = [];\r\n        if (this.fullSyncChangeListeners[db] != null) {\r\n            listeners[0] = this.fullSyncChangeListeners[db];\r\n        } else {\r\n            listeners[0] = [];\r\n            this.fullSyncChangeListeners[db] = listeners[0];\r\n            if(parameters[\"since\"] == undefined){\r\n                parameters[\"since\"] =  \"now\";\r\n            }\r\n            if(parameters[\"live\"] == undefined){\r\n                parameters[\"live\"] =  true;\r\n            }\r\n            if(parameters[\"include_docs\"] == undefined){\r\n                parameters[\"include_docs\"] =  true;\r\n            }\r\n            //noinspection UnnecessaryLocalVariableJS\r\n            const evtHandler = (await this.getOrCreateFullSyncDatabase(db)).getdatabase\r\n                .changes(parameters).on(\"change\", function (change) {\r\n                    const changes: Object = {};\r\n                    const docs: Object[] = [];\r\n                    // docs[\"isExternal\"] = false;\r\n                    const doc: Object = {};\r\n                    doc[\"id\"] = change.doc._id;\r\n                    doc[\"rev\"] = change.doc._rev;\r\n                    doc[\"isConflict\"] = change.doc._conflicts;\r\n                    if (change.source != null) {\r\n                        doc[\"sourceUrl\"] = change.source;\r\n                    }\r\n                    docs.push(doc);\r\n                    changes[\"changes\"] = docs;\r\n                    for (const handler of listeners[0]) {\r\n                        if (handler !== undefined) {\r\n                            handler.onChange(changes);\r\n                        }\r\n                    }\r\n\r\n                });\r\n            this.cblChangeListeners[db] = evtHandler;\r\n        }\r\n        listeners[0].push(listener);\r\n    }\r\n\r\n    public async removeFullSyncChangeListener(db: string, listener: C8oFullSyncChangeListener) {\r\n        if (db === null || db === \"\") {\r\n            db = this.c8o.defaultDatabaseName;\r\n        }\r\n        if (this.fullSyncChangeListeners[db] != null) {\r\n            const listeners: C8oFullSyncChangeListener[] = this.fullSyncChangeListeners[db];\r\n            for (const list in listeners) {\r\n                if (listeners[list] === listener) {\r\n                    delete listeners[list];\r\n                }\r\n            }\r\n            if (listeners.length === 0 || listeners == null) {\r\n                (await this.getOrCreateFullSyncDatabase(db)).getdatabase.cancel();\r\n                this.cblChangeListeners[db].cancel();\r\n                delete this.fullSyncChangeListeners[db];\r\n                delete this.cblChangeListeners[db];\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {C8oException} from \"./Exception/c8oException\";\r\nimport {Priority} from \"./priority.service\";\r\n\r\nexport class C8oLocalCache {\r\n    public static PARAM: string = \"__localCache\";\r\n    public priority: Priority;\r\n    public ttl: number;\r\n    public enabled: boolean;\r\n\r\n    constructor(priority: Priority, ttl: number = -1, enabled: boolean = true) {\r\n        if (priority == null) {\r\n            throw new C8oException(\"Local Cache priority cannot be null\");\r\n        }\r\n        this.priority = priority;\r\n        this.ttl = ttl;\r\n        this.enabled = enabled;\r\n    }\r\n\r\n}\r\n","export class C8oTranslator {\r\n    public static stringToJSON(jsonValueString): JSON {\r\n        return JSON.parse(jsonValueString);\r\n    }\r\n}\r\n","import {C8oException} from \"./c8oException\";\r\n\r\n/**\r\n * Thrown during an HTTP request.\r\n */\r\nexport class C8oHttpRequestException extends C8oException {\r\n    public originalException: any;\r\n\r\n    constructor(message: string);\r\n    constructor(message: string, cause: Error);\r\n    constructor(message: string, cause: any = null) {\r\n        super(message, cause);\r\n        this.originalException = cause;\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oHttpRequestException.prototype);\r\n\r\n    }\r\n}","import {C8oCore} from \"./c8oCore\";\r\nimport {C8oFullSync, C8oFullSyncCbl} from \"./c8oFullSync\";\r\nimport {C8oLocalCache} from \"./c8oLocalCache\";\r\nimport {C8oLocalCacheResponse} from \"./c8oLocalCacheResponse\";\r\nimport {C8oResponseJsonListener, C8oResponseListener} from \"./c8oResponse\";\r\nimport {C8oTranslator} from \"./c8oTranslator\";\r\nimport {C8oUtilsCore} from \"./c8oUtilsCore\";\r\nimport {C8oException} from \"./Exception/c8oException\";\r\nimport {C8oExceptionListener} from \"./Exception/c8oExceptionListener\";\r\nimport {C8oExceptionMessage} from \"./Exception/c8oExceptionMessage\";\r\nimport {C8oHttpRequestException} from \"./Exception/c8oHttpRequestException\";\r\nimport {C8oUnavailableLocalCacheException} from \"./Exception/c8oUnavailableLocalCacheException\";\r\n\r\nexport class C8oCallTask {\r\n    private c8o: C8oCore;\r\n    private _parameters: Object;\r\n    private c8oResponseListener: C8oResponseListener;\r\n    private c8oExceptionListener: C8oExceptionListener;\r\n    private c8oCallUrl: string;\r\n\r\n    public get parameters() {\r\n        return this._parameters;\r\n    }\r\n\r\n    public set parameters(value: any) {\r\n        this._parameters = value;\r\n    }\r\n\r\n    constructor(c8o: C8oCore, parameters: Object, c8oResponseListener: C8oResponseListener, c8oExceptionListener: C8oExceptionListener) {\r\n        this.c8o = c8o;\r\n        this.parameters = parameters;\r\n        this.c8oResponseListener = c8oResponseListener;\r\n        this.c8oExceptionListener = c8oExceptionListener;\r\n\r\n        c8o.log.logMethodCall(\"C8oCallTask\", parameters, c8oResponseListener, c8oExceptionListener);\r\n    }\r\n\r\n    // called execute() in others SDK...\r\n    public run() {\r\n        try {\r\n            this.handleRequest().then((response) => {\r\n                this.handleResponse(response);\r\n            }).catch((error) => {\r\n                this.c8oExceptionListener.onException(error, this.parameters);\r\n            });\r\n        } catch (error) {\r\n            this.c8oExceptionListener.onException(error, this.parameters);\r\n        }\r\n    }\r\n\r\n    public executeFromLive() {\r\n        delete this.parameters[C8oCore.FS_LIVE];\r\n        this.parameters[C8oCore.ENGINE_PARAMETER_FROM_LIVE] = true;\r\n        this.run();\r\n    }\r\n\r\n    public async handleRequest(): Promise<any> {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const isFullSyncRequest: boolean = C8oFullSync.isFullSyncRequest(this.parameters);\r\n                if (isFullSyncRequest) {\r\n                    this.c8o.log._trace(\"Is FullSync request\");\r\n\r\n                    // FS_LIVE\r\n                    const liveid = C8oUtilsCore.getParameterStringValue(this.parameters, C8oCore.FS_LIVE, false);\r\n                    if (liveid !== null) {\r\n                        const dbName: string = (C8oUtilsCore.getParameterStringValue(this.parameters, C8oCore.ENGINE_PARAMETER_PROJECT, true) as string).substring(C8oFullSync.FULL_SYNC_PROJECT.length);\r\n                        this.c8o.addLive(liveid, dbName, this);\r\n                    }\r\n                    await this.c8o.c8oFullSync.handleFullSyncRequest(this.parameters, this.c8oResponseListener)\r\n                        .then(\r\n                            (result) => {\r\n                                resolve(result);\r\n                            })\r\n                        .catch(\r\n                            (error) => {\r\n                                if (error instanceof C8oException) {\r\n                                    reject(error);\r\n                                } else {\r\n                                    reject(new C8oException(C8oExceptionMessage.handleFullSyncRequest(), error));\r\n                                }\r\n                            });\r\n                } else {\r\n                    let responseType: string = \"\";\r\n                    if (this.c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                        responseType = C8oCore.RESPONSE_TYPE_JSON;\r\n                    } else {\r\n                        // Return an Exception because the C8oListener used is unknown\r\n                        reject(new C8oException(C8oExceptionMessage.wrongListener(this.c8oResponseListener)));\r\n                    }\r\n                    let c8oCallRequestIdentifier: string = null;\r\n                    const localCache: C8oLocalCache = C8oUtilsCore.getParameterObjectValue(this.parameters, C8oLocalCache.PARAM, false);\r\n                    let localCacheEnabled: boolean = false;\r\n\r\n                    if (localCache != null) {\r\n                        if (localCacheEnabled !== undefined) {\r\n                            delete this.parameters[C8oLocalCache.PARAM];\r\n                            localCacheEnabled = localCache.enabled;\r\n                            if (localCacheEnabled) {\r\n                                try {\r\n                                    c8oCallRequestIdentifier = C8oUtilsCore.identifyC8oCallRequest(this.parameters, responseType);\r\n                                } catch (error) {\r\n                                    reject(new C8oException(C8oExceptionMessage.serializeC8oCallRequest(), error));\r\n                                }\r\n                                // here we are not testing if localcahe is available.\r\n                                // if connection is not available this will generates an exception that will be caught\r\n                                if (localCache.priority.isAvailable) {\r\n                                    try {\r\n                                        const result = await (this.c8o.c8oFullSync as C8oFullSyncCbl).getResponseFromLocalCache(c8oCallRequestIdentifier);\r\n                                        if (result instanceof C8oUnavailableLocalCacheException) {\r\n                                            // no entry\r\n                                        } else {\r\n                                            const localCacheResponse: C8oLocalCacheResponse = (result as C8oLocalCacheResponse);\r\n\r\n                                            if (!localCacheResponse.isExpired()) {\r\n                                                if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                                    resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                                    return;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    } catch (error) {\r\n                                        if (error instanceof C8oUnavailableLocalCacheException) {\r\n                                            // no entry\r\n                                        } else {\r\n                                            reject(error);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    // Get Response\r\n                    this.parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n                    this.c8oCallUrl = this.c8o.endpoint + \"/.\" + responseType;\r\n                    let params: Object = new Object();\r\n                    params = Object.assign(params, this.parameters);\r\n                    await this.c8o.httpInterface.handleRequest(this.c8oCallUrl, params, this.c8oResponseListener,\r\n                    ).catch(\r\n                        async (error) => {\r\n                            if (localCacheEnabled) {\r\n                                await (this.c8o.c8oFullSync as C8oFullSyncCbl).getResponseFromLocalCache(c8oCallRequestIdentifier,\r\n                                ).then(\r\n                                    (localCacheResponse: C8oLocalCacheResponse) => {\r\n                                        try {\r\n                                            if (!localCacheResponse.isExpired()) {\r\n                                                if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                                    resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                                }\r\n                                            }\r\n                                        } catch (error) {\r\n                                            // no entry\r\n                                        }\r\n                                    });\r\n                            }\r\n                            if (error.status === 0) {\r\n                                reject(new C8oHttpRequestException(\"ERR_INTERNET_DISCONNECTED\", error));\r\n                            } else {\r\n                                reject(error);\r\n                            }\r\n                        }).then(\r\n                        async (result) => {\r\n                            if (result !== undefined) {\r\n                                let isErrorR = result[\"error\"] != undefined ? result[\"error\"][\"code\"] != undefined ? result[\"error\"][\"message\"] != undefined ? result[\"error\"][\"details\"] != undefined? true: false :false : false : false;\r\n                                let isErrorDoc = result[\"document\"] != undefined ? result[\"document\"][\"error\"] != undefined ? result[\"document\"][\"error\"][\"code\"] != undefined ? result[\"document\"][\"error\"][\"message\"] != undefined ? result[\"document\"][\"error\"][\"details\"] != undefined? true: false :false : false : false: false;\r\n                                let isError = (isErrorR || isErrorDoc);\r\n                                if(isError){\r\n                                    if (localCacheEnabled) {\r\n                                        await (this.c8o.c8oFullSync as C8oFullSyncCbl).getResponseFromLocalCache(c8oCallRequestIdentifier,\r\n                                        ).then(\r\n                                            (localCacheResponse: C8oLocalCacheResponse) => {\r\n                                                try {\r\n                                                    if (!localCacheResponse.isExpired()) {\r\n                                                        if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                                            resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                                        }\r\n                                                    }\r\n                                                } catch (error) {\r\n                                                    // no entry\r\n                                                }\r\n                                            });\r\n                                    }\r\n                                    if(this.c8o.errorConvertigoIntoFail){\r\n                                        reject(result);\r\n                                    }\r\n                                    else{\r\n                                        resolve(result);\r\n                                    }\r\n                                    \r\n                                }\r\n                                else{\r\n                                    let response: any;\r\n                                    let responseString: string;\r\n                                    if (this.c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                                        try {\r\n                                            try {\r\n                                                responseString = result;\r\n                                            } catch (error) {\r\n                                                reject(new C8oException(C8oExceptionMessage.parseInputStreamToString(), error));\r\n                                            }\r\n                                            response = result;\r\n                                        } catch (error) {\r\n                                            reject(error);\r\n                                        }\r\n                                    } else {\r\n                                        reject(new C8oException(C8oExceptionMessage.wrongListener(this.c8oResponseListener)));\r\n                                    }\r\n                                    if (localCacheEnabled) {\r\n                                        try {\r\n                                            let expirationDate: number = -1;\r\n                                            if (localCache.ttl > 0) {\r\n                                                expirationDate = localCache.ttl + (new Date).getTime();\r\n                                            }\r\n                                            const localCacheResponse: C8oLocalCacheResponse = new C8oLocalCacheResponse(responseString, responseType, expirationDate);\r\n                                            const p1 = await (this.c8o.c8oFullSync as C8oFullSyncCbl).saveResponseToLocalCache(c8oCallRequestIdentifier, localCacheResponse);\r\n                                            Promise.all([p1])\r\n                                                .then(() => {\r\n                                                    resolve(response);\r\n                                                });\r\n                                            \r\n                                        } catch (error) {\r\n                                            reject(new C8oException(C8oExceptionMessage.saveResponseToLocalCache()));\r\n                                        }\r\n                                    }\r\n                                    resolve(response);\r\n                                }\r\n\r\n\r\n\r\n\r\n                                    \r\n                            }\r\n                        });\r\n                }\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private handleResponse(result: any) {\r\n        try {\r\n            if (this.c8oResponseListener === null) {\r\n                return;\r\n            } else if (result instanceof Error || result instanceof C8oException) {\r\n                this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, result);\r\n            } else if (result instanceof Object) {\r\n                this.c8o.log.logC8oCallJSONResponse(result, this.c8oCallUrl, this.parameters);\r\n                (this.c8oResponseListener as C8oResponseJsonListener).onJsonResponse(result, this.parameters);\r\n            } else {\r\n                this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, new C8oException(C8oExceptionMessage.wrongResult(result)));\r\n            }\r\n        } catch (error) {\r\n            this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, error);\r\n        }\r\n    }\r\n}\r\n","export class C8oFullSyncChangeListener {\r\n    private _onchange: (changes: Object) => void;\r\n    constructor(change: (changes: Object) => void) {\r\n        this._onchange = change;\r\n    }\r\n     public onChange(changes) {\r\n         this._onchange(changes);\r\n     }\r\n }\r\n","import { Observable } from \"rxjs\";\r\nimport {C8oCore} from \"./c8oCore\";\r\nimport {C8oProgress} from \"./c8oProgress\";\r\n\r\nexport class C8oPromise<T> {\r\n    private c8o: C8oCore;\r\n    private c8oResponse: (response: T, parameters: Object) => C8oPromise<T>;\r\n    private c8oProgress: (C8oProgress) => C8oPromise<T>;\r\n    private c8oFail: (error: Error, parameters: Object) => C8oPromise<T>;\r\n    private nextPromise: C8oPromise<T>;\r\n\r\n    private lastResponse: T;\r\n    private lastFailure: Error;\r\n    private lastParameters: Object;\r\n\r\n    constructor(c8o: C8oCore) {\r\n        this.c8o = c8o;\r\n    }\r\n\r\n    public async(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.then((response, parameters) => {\r\n                resolve(response);\r\n                return null;\r\n            }).fail((error: Error, parameters: Object) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    public toObservable(): Observable<any> {\r\n        return new Observable(\r\n            (observer)=> {\r\n                this.then((response, parameters) => {\r\n                    if(parameters[\"__live\"] == true || parameters[\"continuous\"] == true){\r\n                        observer.next({response: response, parameters: parameters});\r\n                    }\r\n                    else{\r\n                        observer.next({response: response, parameters: parameters});\r\n                        observer.complete()\r\n                    }\r\n                    return null;\r\n                })\r\n                .progress((progress)=>{\r\n                    observer.next(progress);\r\n                })\r\n                .fail((error: Error, parameters: Object) => {\r\n                    observer.error(error);\r\n                });\r\n            });\r\n    }\r\n\r\n    public then(c8oOnResponse: (response: T, parameters: Object) => C8oPromise<T>) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.then(c8oOnResponse);\r\n        } else {\r\n            this.c8oResponse = c8oOnResponse;\r\n            this.nextPromise = new C8oPromise<T>(this.c8o);\r\n            if (this.lastFailure != null) {\r\n                this.nextPromise.lastFailure = this.lastFailure;\r\n                this.nextPromise.lastParameters = this.lastParameters;\r\n\r\n            }\r\n            if (this.lastResponse != null) {\r\n                this._onResponse();\r\n            }\r\n            return this.nextPromise;\r\n        }\r\n\r\n    }\r\n\r\n    public progress(c8oOnProgress: (C8oProgress: C8oProgress) => C8oPromise<T>) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.progress(c8oOnProgress);\r\n        } else {\r\n            this.c8oProgress = c8oOnProgress;\r\n            this.nextPromise = new C8oPromise<T>(this.c8o);\r\n            return this.nextPromise;\r\n        }\r\n    }\r\n\r\n    public fail(c8oOnFail: (error: Error, parameters: Object) => C8oPromise<T>) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.fail(c8oOnFail);\r\n        } else {\r\n            this.c8oFail = c8oOnFail;\r\n            this.nextPromise = new C8oPromise<T>(this.c8o);\r\n            if (this.lastFailure != null) {\r\n                this.onFailure(this.lastFailure, this.lastParameters);\r\n            }\r\n            return this.nextPromise;\r\n        }\r\n    }\r\n\r\n    private _onResponse() {\r\n        try {\r\n            if (this.c8oResponse != null) {\r\n                const promise: Array<C8oPromise<T>> = new Array<C8oPromise<T>>(0);\r\n                promise.push(this.c8oResponse(this.lastResponse, this.lastParameters));\r\n                if (promise[0] != null) {\r\n                    if (this.nextPromise != null) {\r\n                        let lastPromise: C8oPromise<T> = promise[0];\r\n                        while (lastPromise.nextPromise != null) {\r\n                            lastPromise = lastPromise.nextPromise;\r\n                        }\r\n                        lastPromise.nextPromise = this.nextPromise;\r\n                    }\r\n                    this.nextPromise = promise[0];\r\n                } else if (this.nextPromise != null) {\r\n                    this.nextPromise.onResponse(this.lastResponse, this.lastParameters);\r\n                }\r\n            } else if (this.nextPromise != null) {\r\n                this.nextPromise.onResponse(this.lastResponse, this.lastParameters);\r\n            } else {\r\n                // Response received and no handler\r\n            }\r\n        } catch (error) {\r\n            this.onFailure(error, this.lastParameters);\r\n        }\r\n    }\r\n\r\n    public onResponse(response: T, parameters: Object) {\r\n        if ((this.lastResponse != null || this.lastResponse !== undefined) && parameters[C8oCore.ENGINE_PARAMETER_FROM_LIVE] === undefined) {\r\n            if (this.nextPromise != null || this.nextPromise !== undefined) {\r\n                this.nextPromise.onResponse(response, parameters);\r\n            }\r\n        } else {\r\n            this.lastResponse = response;\r\n            this.lastParameters = parameters;\r\n            this._onResponse();\r\n        }\r\n    }\r\n\r\n    public onProgress(progress: C8oProgress) {\r\n        if (this.c8oProgress != null) {\r\n            this.c8oProgress(progress);\r\n        } else if (this.nextPromise != null) {\r\n            this.nextPromise.onProgress(progress);\r\n        }\r\n    }\r\n\r\n    public onFailure(error: Error, parameters: Object) {\r\n\r\n        this.lastFailure = error;\r\n        this.lastParameters = parameters;\r\n\r\n        if (this.c8oFail != null) {\r\n            this.c8oFail(this.lastFailure, parameters);\r\n        }\r\n        if (this.nextPromise != null) {\r\n            this.nextPromise.onFailure(this.lastFailure, parameters);\r\n        }\r\n    }\r\n}\r\n","export class C8oExceptionListener {\r\n    /**\r\n     * Called on thrown exceptions.\r\n     *\r\n     * @param exception - The thrown exception\r\n     */\r\n    public onException: (C8oException, Object) => void;\r\n\r\n    constructor(onException: (C8oException, Object) => void) {\r\n        this.onException = onException;\r\n    }\r\n}","export class C8oNetworkStatus {\r\n    public static Reachable : C8oNetworkStatus = \"Reachable\";\r\n    public static NotReachable : C8oNetworkStatus = \"NotReachable\";\r\n    public static Offline: C8oNetworkStatus = \"Offline\";\r\n\r\n}","import { C8oCore } from \"./c8oCore\";\r\nimport { C8oNetworkStatus } from \"./c8oNetworkStatus\"\r\n\r\nexport class C8oManagerNetwork {\r\n    private c8o: C8oCore;\r\n    private _status: C8oNetworkStatus;\r\n    private _listen = false;\r\n\r\n    constructor(c8o: C8oCore) {\r\n        this.c8o = c8o;\r\n    }\r\n\r\n    /**\r\n     * init NetworkManager\r\n     */\r\n    public async init(){\r\n        this.listen();\r\n        let reachable = await this.checkReachable();\r\n        let online = window.navigator.onLine;\r\n        this.status = (reachable == true ? C8oNetworkStatus.Reachable : (online == true? C8oNetworkStatus.NotReachable : C8oNetworkStatus.Offline));\r\n    }\r\n\r\n    /**\r\n     * Set network status, and notify if its had change\r\n     * @params c8oNetworkStatus : C8oNetworkStatus\r\n     */\r\n    public set status(c8oNetworkStatus: C8oNetworkStatus){\r\n        // if the status has not changed do nothing\r\n        //this.c8o.log.warn(\"through set network status\")\r\n        if(this._status == c8oNetworkStatus){\r\n                return;    \r\n        }\r\n        this._status = c8oNetworkStatus;\r\n        this.c8o.subscriber_network.next(c8oNetworkStatus);\r\n        \r\n    }\r\n\r\n    /**\r\n     * get network status\r\n     * \r\n     * @returns C8oNetworkStatus\r\n     */\r\n    public get status(){\r\n        return this._status;\r\n    }\r\n\r\n\r\n    private async listen() {\r\n        if(this._listen == false){\r\n            this._listen = true;\r\n            window.addEventListener(\"online\", () => {\r\n                this.processOnline();\r\n    \r\n            }, false);\r\n            window.addEventListener(\"offline\", () => {\r\n                this.processOffline();\r\n            }, false);\r\n    \r\n            this.c8o.subscriber_network.subscribe(async (res)=>{\r\n                this.c8o.log._debug(\"[handleNetworkEvents] Handle a network event: \" + res);\r\n                switch(res){\r\n                    case C8oNetworkStatus.Reachable:\r\n                        // check session status              \r\n                        this.c8o.session.doAuthReachable();\r\n                        this.c8o.database.restartReplications(\"anonymous\");\r\n                    break;\r\n                    case C8oNetworkStatus.NotReachable:\r\n                        this.c8o.database.stopReplications(this.c8o.session.user.name);\r\n                        this.c8o.database.stopReplications(\"anonymous\");\r\n                    break;\r\n                    case C8oNetworkStatus.Offline:\r\n                        this.c8o.database.stopReplications(this.c8o.session.user.name);\r\n                        this.c8o.database.stopReplications(\"anonymous\");\r\n                    break;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    private async processOnline(){\r\n        let reachable = await this.checkReachable();\r\n        if(reachable){\r\n            this.status = C8oNetworkStatus.Reachable;\r\n        }\r\n        else{\r\n            this.status = C8oNetworkStatus.NotReachable;\r\n        }\r\n    }\r\n\r\n    private async processOffline(){\r\n        this.status = C8oNetworkStatus.Offline;\r\n    }\r\n\r\n    public async checkReachable(): Promise<boolean> {\r\n        try {\r\n            let r = await this.c8o.c8oLogger.logTest();\r\n            return true;\r\n        }\r\n        catch{\r\n            return false;\r\n        }\r\n    }\r\n}","\r\nexport class C8oSessionStatus {\r\n    public static Connected : C8oSessionStatus = 1;\r\n    public static HasBeenConnected : C8oSessionStatus = 2;\r\n    public static HasBeenDisconnected: C8oSessionStatus = 3;\r\n    public static Disconnected: C8oSessionStatus = 4;\r\n    public static Ignore: C8oSessionStatus = 5;\r\n    public static HasBeenConnectedToAnother: C8oSessionStatus = 5;\r\n}","import { C8oResponseListener } from \"./c8oResponse\";\r\nimport { C8oSessionUser } from \"./C8oSessionUser\";\r\n\r\nexport class C8oReplicationStatus{\r\n    public user: C8oSessionUser;\r\n    public listener: C8oResponseListener;\r\n    public parameters: Object;\r\n    public type: String;\r\n    public authenticated: boolean;\r\n    public canceled: boolean;\r\n    public finished:boolean;\r\n    public id: string;\r\n    database: any;\r\n    constructor(user: C8oSessionUser, listener: C8oResponseListener, parameters: Object, type: string, authenticated: boolean, canceled: boolean,finished:boolean, fullSyncDatabase: any, id: string){\r\n        this.user = user;\r\n        this.listener = listener;\r\n        this.parameters = parameters;\r\n        this.type = type;\r\n        this.authenticated = authenticated;\r\n        this.canceled = canceled;\r\n        this.database = fullSyncDatabase;\r\n        this.finished = finished;\r\n        this.id = id;\r\n    }\r\n}","import { C8oCore } from \"./c8oCore\";\r\nimport { C8oResponseListener, C8oResponseJsonListener } from \"./c8oResponse\";\r\nimport { C8oSessionStatus } from \"./c8oSessionStatus\";\r\nimport {C8oReplicationStatus} from \"./C8oReplicationStatus\";\r\nimport { C8oNetworkStatus } from \"./c8oNetworkStatus\";\r\nimport { Semaphore } from \"./c8oUtilsCore\";\r\n\r\ndeclare const require: any;\r\nexport class C8oManagerDatabase {\r\n    public c8o: C8oCore;\r\n    private replications: Object;\r\n    private mutexCreateReplication: Semaphore;\r\n\r\n    constructor(c8o: C8oCore) {\r\n        this.replications = new Object();\r\n        this.c8o = c8o;\r\n        this.mutexCreateReplication = new Semaphore(1);\r\n    }\r\n\r\n    public localName(baseName:string, log = false): string{\r\n        if(this.c8o.prefixBase){\r\n            if(log){\r\n                this.c8o.log._trace(\"Database will be seteed with prefix of user name\");\r\n            }\r\n            return this.c8o.session.user.name + \"_\"+ baseName;\r\n        }\r\n        else{\r\n            return baseName;\r\n        }\r\n    }\r\n\r\n    public get registeredReplications() {\r\n        return this.replications;\r\n    }\r\n\r\n    /**\r\n     * Register a request attaching it to the current user\r\n     * @param listener The listener for this request\r\n     * @param parameters The parameters of this request\r\n     * @param type The type of réplication (SYNC, PULL, PUSH)\r\n     */\r\n    registerRequest(listener: C8oResponseListener, parameters: Object, type: string, fullSyncDatabase, handler = null) {\r\n        let user = this.c8o.session.user;\r\n        if (this.replications[user.name] == null) {\r\n            this.replications[user.name] = new Array();\r\n        }\r\n\r\n        let authenticated: boolean = (this.c8o.session.status == (C8oSessionStatus.Connected || C8oSessionStatus.HasBeenConnected));\r\n        let canceled: boolean = (this.c8o.network.status != C8oNetworkStatus.Reachable);\r\n        let id = new Date().getTime()+\"_\"+(\"\"+Math.random()).substring(2);\r\n        let rep = new C8oReplicationStatus(user, listener, parameters, type, authenticated, canceled, false, fullSyncDatabase, id);\r\n        handler = () => {\r\n            rep.finished = true;\r\n        }\r\n        this.replications[user.name].push(rep);\r\n        return [canceled, handler, id];\r\n    }\r\n\r\n    public cancelAndPopRequest(id){\r\n        var user = this.c8o.session.user;\r\n        for (var i in this.replications[user.name]) {\r\n            if(this.replications[user.name][i].id == id){\r\n                this.c8o.log._debug(\"[c8oManagerDatabase] cancelAndPopRequest => canceling  and removing replication: \" +this.replications[user.name][i].database.getdatabase.name);\r\n                let repToCancel = this.replications[user.name][i].database.syncFullSyncReplication.replication;\r\n                repToCancel.cancel();\r\n                this.replications[user.name].splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.c8o.log._debug(\"[c8oManagerDatabase] cancelAndPopRequest => done, replication still actives: \" +JSON.stringify(this.replications[user.name].map(x=> x.database.getdatabase.name)));\r\n    }\r\n\r\n    public cancelAllForbase(baseName){\r\n        var user = this.c8o.session.user;\r\n        for (var i in this.replications[user.name]) {\r\n            if(this.replications[user.name][i].databaseName == baseName){\r\n                this.replications[user.name].splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restart all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    async restartReplications(user: string) {\r\n        if (this.replications[user] != undefined) {\r\n            var lastsDistinctsReps = {};\r\n            this.replications[user].forEach((rep)=>{lastsDistinctsReps[rep.database.databaseName] = rep});\r\n            this.replications[user] = Object.keys(lastsDistinctsReps).map(e => lastsDistinctsReps[e]);\r\n\r\n            for(let i in lastsDistinctsReps){\r\n                let rep =  lastsDistinctsReps[i];\r\n                if (rep.database != null) {\r\n                    if (rep.canceled == true) {\r\n                        if (rep.finished != true) {\r\n                            switch (rep.type) {\r\n                                case \"sync\":\r\n                                    this.mutexCreateReplication.acquire();\r\n                                    this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb sync \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                    let handler1 = () => {\r\n                                        rep.finished = true;\r\n                                    }\r\n                                    rep.finished = false;\r\n                                    rep.canceled = false;\r\n                                    rep.manual_canceled = false;\r\n                                    rep.database.startAllReplications(rep.parameters, rep.listener, handler1, rep.id, this.mutexCreateReplication);\r\n                                    break;\r\n                                case \"push\":\r\n                                    this.mutexCreateReplication.acquire();\r\n                                    this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb push \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                    let handler2 = () => {\r\n                                        rep.finished = true;\r\n                                    }\r\n                                    rep.finished = false;\r\n                                    rep.canceled = false;\r\n                                    rep.manual_canceled = false;\r\n                                    rep.database.startPushReplication(rep.parameters, rep.listener, handler2, rep.id, this.mutexCreateReplication);\r\n\r\n                                    break;\r\n                                case \"pull\":\r\n                                    this.mutexCreateReplication.acquire();\r\n                                    this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb pull \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                    let handler3 = () => {\r\n                                        rep.finished = true;\r\n                                    }\r\n                                    rep.canceled = false;\r\n                                    rep.finished = false;\r\n                                    rep.manual_canceled = false;\r\n                                    rep.database.startPullReplication(rep.parameters, rep.listener, handler3, rep.id, this.mutexCreateReplication);\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Stop all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    stopReplications(user: string) {\r\n        if (this.replications[user] != undefined) {\r\n            for (let rep of this.replications[user]) {\r\n                if (rep.database != null) {\r\n                    if (rep.finished != true) {\r\n                        switch (rep.type) {\r\n                            case \"sync\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb sync \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelSyncReplication();\r\n                                break;\r\n                            case \"push\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb push \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelPushReplication();\r\n                                break;\r\n                            case \"pull\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb pull \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelPullReplication();\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove state an delte top all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    removeReplications(user: string) {\r\n        this.stopReplications(user);\r\n        delete this.replications[user];\r\n        this.c8o.log._trace(\"[removeReplications] replications for user \" + user + \"has been removed and stopped\");\r\n    }\r\n\r\n}","import {C8oCore} from \"./c8oCore\";\r\nimport { C8oSessionStatus } from \"./c8oSessionStatus\";\r\nimport { Semaphore, C8oUtilsCore } from './c8oUtilsCore';\r\ndeclare const require: any;\r\ndeclare const Buffer;\r\nexport class C8oManagerLogin {\r\n    public c8o: C8oCore;\r\n    private requestLogin;\r\n    private mutexL : Semaphore;\r\n    \r\n    constructor(c8o: C8oCore) {\r\n        this.c8o = c8o;\r\n        this.mutexL = new Semaphore(1);\r\n    }\r\n    public async setRequestLogin(url: string, parameters: Object, headers: Object, id: string){\r\n        if(url != null && parameters != null && headers != null){\r\n            this.requestLogin = {url: url, parameters: parameters, headers: headers};\r\n        }\r\n        if(id != null && this.requestLogin != undefined){\r\n        /**  must encrypt and save requestLogin there **/\r\n\r\n        //define buffer to save\r\n        const data = Buffer.from(JSON.stringify(this.requestLogin), 'utf-8');\r\n        // generate random iv and store it\r\n        const iv: any = crypto.getRandomValues(new Uint8Array(16));\r\n        window[\"localStorage\"][\"setItem\"](\"_c8o_iv\", Buffer.from(iv).toString('utf-8'));\r\n        // get key and hash it 128 bits\r\n        const key = C8oUtilsCore.MD5ArrayBuffer(id);\r\n        // defined key\r\n        const key_encoded = await crypto.subtle.importKey(  \"raw\",    <any>key.buffer,   'AES-CTR' ,  false,   [\"encrypt\", \"decrypt\"]);\r\n        // encrypt data\r\n        const encrypted_content = await window.crypto.subtle.encrypt(\r\n            {\r\n              name: \"AES-CTR\",\r\n              counter: iv,\r\n              length: 128\r\n            },\r\n            key_encoded,\r\n            data\r\n        );\r\n        // store encrypted data\r\n        window.localStorage.setItem(\"_c8o_secret\", Buffer.from(encrypted_content).toString('utf-8'));\r\n        }    \r\n    }\r\n    public async defineRequestLogin(id){\r\n        //if requestLogin is'nt into this.requestLogin, get it and assign it to requestLogin from local encrypted data.\r\n        try{\r\n            if(this.requestLogin == undefined && window[\"localStorage\"][\"getItem\"](\"_c8o_secret\") != undefined){\r\n                const iv: any = Buffer.from(window[\"localStorage\"][\"getItem\"](\"_c8o_iv\"), 'utf-8');\r\n                const key = C8oUtilsCore.MD5ArrayBuffer(id);\r\n                const encrypted_content = Buffer.from(window.localStorage.getItem(\"_c8o_secret\"), 'utf-8');\r\n                const key_encoded = await crypto.subtle.importKey(  \"raw\",    <any>key.buffer,   'AES-CTR' ,  false,   [\"encrypt\", \"decrypt\"]);\r\n                const decrypted_content: any  = await window.crypto.subtle.decrypt(\r\n                    {\r\n                      name: \"AES-CTR\",\r\n                      counter: iv,\r\n                      length: 128\r\n                    },\r\n                    key_encoded,\r\n                    encrypted_content\r\n                );\r\n                this.requestLogin = JSON.parse(Buffer.from(decrypted_content).toString('utf-8'));\r\n            }\r\n        }\r\n        catch(e){\r\n            this.c8o.log.error(\"[C8oManagerLogin][defineRequestLogin], failed to define request login\", e);\r\n        }\r\n    }\r\n    \r\n\r\n    public doLogin(): Promise<any>{\r\n        return new Promise((res)=>{\r\n            this.mutexL.acquire();\r\n            if(!(this.c8o.session.status == C8oSessionStatus.Connected || this.c8o.session.status == C8oSessionStatus.HasBeenConnected)){\r\n                if(this.requestLogin !=  undefined){\r\n                    let resolve = (response)=>{\r\n                        if(response.headers.get(\"X-Convertigo-Authenticated\") != undefined){\r\n                            this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins works\");\r\n                            this.c8o.subscriber_login.next({status:true, response: response.body, error: null})\r\n                            res({status:true, urlReq:this.requestLogin.url, parameters:this.requestLogin.parameters, headers: this.requestLogin.headers, response: response.response});\r\n                        }\r\n                        else{\r\n                            this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins failed\");\r\n                            res({status:false});\r\n                            this.c8o.subscriber_login.next({status:false, response: response.body, error: \"error, we are not authenticated\"})\r\n                            //this.c8o.subscriber_session.next();\r\n                        }\r\n                        this.mutexL.release();\r\n                        \r\n                    }\r\n                    let reject = (err)=>{\r\n                        this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins failed\");\r\n                        res({status:false});\r\n                        this.c8o.subscriber_login.next({status:false, response: null, error: err})\r\n                        this.c8o.subscriber_session.next(null);\r\n                        this.mutexL.release();\r\n                    }\r\n                    this.c8o.httpInterface.execHttpPosts(this.requestLogin.url, this.requestLogin.parameters, this.requestLogin.headers, resolve, reject, true);\r\n                } \r\n            }\r\n            else{\r\n                this.c8o.log.warn(\"Into else\");\r\n            }\r\n             \r\n        })\r\n         \r\n    }\r\n\r\n    \r\n\r\n    \r\n}","\r\nexport  class C8oSessionUser{\r\n    public authenticated: boolean = false;\r\n    public groups = [];\r\n    public maxInactive: number = 0;\r\n    public sessionId: string = \"\";\r\n    public name: string = \"anonymous\";\r\n    public hash: string = \"\";\r\n\r\n    constructor(user = null){\r\n        if(user != null){\r\n            this.authenticated = user[\"authenticated\"] == true;\r\n            this.groups = user[\"groups\"] != undefined ? user[\"groups\"] : [];\r\n            this.maxInactive = user[\"maxInactive\"] != undefined ? user[\"maxInactive\"] : 0;\r\n            this.sessionId = user[\"session\"] != undefined ? user[\"session\"] : \"\";\r\n            this.name = user[\"user\"] != undefined ? user[\"user\"] : \"\";\r\n        }\r\n        \r\n    }\r\n}\r\n","import { C8oCore } from \"./c8oCore\";\r\nimport { C8oSessionStatus } from './c8oSessionStatus';\r\nimport { C8oUtilsCore, Semaphore } from './c8oUtilsCore';\r\nimport { C8oManagerLogin } from './c8oManagerLogin';\r\nimport { C8oSessionUser } from './C8oSessionUser';\r\nimport { stat } from \"fs\";\r\n\r\ndeclare const require: any;\r\nexport class C8oManagerSession {\r\n    public c8o: C8oCore;\r\n    private _status: C8oSessionStatus;\r\n    private id: string;\r\n    private loginManager: C8oManagerLogin;\r\n    private checker: any;\r\n    private _user: C8oSessionUser;\r\n    private _olduser: C8oSessionUser;\r\n    private ignored;\r\n    private resumeListener = undefined;\r\n    public mutex : Semaphore;\r\n    public mutexNetwork : Semaphore;\r\n    public mutexCheckSession : Semaphore;\r\n    private sessId : string;\r\n\r\n    constructor(c8o: C8oCore) {\r\n        // When the app begins, session is not connected*\r\n        this.c8o = c8o;\r\n        this._status = C8oSessionStatus.Disconnected;\r\n        this.loginManager = new C8oManagerLogin(c8o);\r\n        this.ignored = 0;\r\n        this._user = new C8oSessionUser();\r\n        this.mutex = new Semaphore(1);\r\n        this.mutexNetwork = new Semaphore(10000000000);\r\n        this.mutexCheckSession = new Semaphore(1);\r\n    }\r\n\r\n    /**\r\n     * Get status of the session\r\n     * \r\n     * @returns: C8oSessionStatus\r\n     * \r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    public get status(): C8oSessionStatus {\r\n        return this._status;\r\n    }\r\n\r\n    public set status(status:C8oSessionStatus) {\r\n        this._status = status;\r\n    }\r\n\r\n    /**\r\n     * Get status of the session\r\n     * \r\n     * @returns: C8oSessionStatus\r\n     * \r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    public get user(): C8oSessionUser {\r\n        return this._user;\r\n    }\r\n    /**\r\n     * Get previous status of the session\r\n     * \r\n     * @returns: C8oSessionStatus\r\n     * \r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    public get olduser(): C8oSessionUser {\r\n        return this._olduser;\r\n    }\r\n\r\n    public set user(user: C8oSessionUser){\r\n        this._olduser = user;\r\n        this._user = user;\r\n    }\r\n    \r\n    public async setInitalState(){\r\n        try{\r\n            const status = await this.c8o.httpInterface.getUserServiceStatus(true);\r\n            await this.sort(null, null, null, null, null, null, status);\r\n        }\r\n        catch(e){\r\n            console.error(\"error getiing setInitalState\", e);\r\n        }\r\n        \r\n    }\r\n\r\n    public async getInitalState(){\r\n        try{\r\n            const resp: any = await this.c8o.httpInterface.getUserServiceStatus(true);\r\n            if(resp.body.authenticated){\r\n                this.sessId = resp.body.session;\r\n                await this.loginManager.defineRequestLogin(resp.body.session);\r\n                this.user = new C8oSessionUser(resp.body);\r\n                this.status = C8oSessionStatus.HasBeenConnected;\r\n            }\r\n        }\r\n        catch(e){\r\n            this.c8o.log.error(\"[C8oManagerSession][getInitalState] Impossible to define user service status\", e)\r\n        }\r\n        \r\n    }\r\n\r\n    public async sort(response: any, headers: any, urlReq, parametersReq, headersReq, resolve?, status?) {\r\n        // update _status if this is a sequence\r\n        return new Promise<boolean>(async (resolve, reject)=>{\r\n            let _status: C8oSessionStatus;\r\n                if(!status){\r\n                    _status = await this.defineSessionStatus(response, headers, urlReq, parametersReq, headersReq);\r\n                }\r\n                else{\r\n                    _status = await this.defineSessionStatus(status, headers, urlReq, parametersReq, headersReq, status);\r\n                }\r\n                switch (_status) {\r\n                    case C8oSessionStatus.Connected:\r\n                        this.ignored = 0;\r\n                        resolve(false);\r\n                        break;\r\n                    case C8oSessionStatus.HasBeenConnectedToAnother:\r\n                        // if we called this function from setInitalState\r\n                        if(response == null && headers == null){\r\n                            this.checkSession(headers, 0, resolve, status);\r\n                        }\r\n                        else{\r\n                            this.checkSession(headers, 0, resolve);\r\n                        }\r\n                        this.c8o.subscriber_session_changed.next(null);\r\n                        break;\r\n                    case C8oSessionStatus.HasBeenConnected:\r\n                        // if we called this function from setInitalState\r\n                        if(response == null && headers == null){\r\n                            this.checkSession(headers, 0, resolve, status);\r\n                        }\r\n                        else{\r\n                            this.checkSession(headers, 0, resolve);\r\n                        }\r\n                        break;\r\n                    case C8oSessionStatus.HasBeenDisconnected:\r\n                        // if we called this function from setInitalState\r\n                        if(response == null && headers == null){\r\n                            // do nothing\r\n                            resolve(false);\r\n                        }\r\n                        else{\r\n                            if(this.c8o.keepSessionAlive){\r\n                                let objParams;\r\n                                try{\r\n                                    objParams = parametersReq.split('&')\r\n                                    .reduce((a, c) => {\r\n                                        let [key, value] = c.split('=');\r\n                                        a[key] = value;\r\n                                        return a;\r\n                                    }, {});\r\n                                }\r\n                                catch(e){\r\n                                    objParams = {};\r\n                                }\r\n                                if(!(objParams[C8oCore.SEQ_AUTO_LOGIN_OFF] === \"true\")){\r\n                                    this.loginManager.doLogin()\r\n                                    .then((res)=>{\r\n                                        resolve(true);\r\n                                    })\r\n                                }\r\n                                else{\r\n                                    this.c8o.database.stopReplications(this.user.name);\r\n                                    this._user = new C8oSessionUser();\r\n                                    this.c8o.subscriber_session.next(null);\r\n                                    resolve(false);\r\n                                }\r\n                            }\r\n                            else{\r\n                                this.c8o.database.stopReplications(this.user.name);\r\n                                this._user = new C8oSessionUser();\r\n                                this.c8o.subscriber_session.next(null);\r\n                                resolve(false);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case C8oSessionStatus.Disconnected:\r\n                        resolve(false);\r\n                        break;\r\n                    case C8oSessionStatus.Ignore:\r\n                        this.ignored = this.ignored + 1;\r\n                        if (this.ignored >= 20) {\r\n                            this._status = C8oSessionStatus.Connected;\r\n                            this.c8o.log._trace(\"[C8oManagerSession] We ingored 20, no setting _status Connected\");\r\n                        }\r\n                        else {\r\n                            this.c8o.log._trace(\"[C8oManagerSession] Ignore this request to analyze loss of session, we ignored \" + this.ignored + \" at total\");\r\n                        }\r\n                        resolve(false);\r\n                        break;\r\n                }\r\n            \r\n        })\r\n    }\r\n\r\n\r\n    public async doAuthReachable(){\r\n        if(this.c8o.session.user.authenticated == true){\r\n            await this.mutex.acquire();\r\n            let err;\r\n            try {\r\n                let user = await this.c8o.httpInterface.getUserServiceStatus()\r\n                if(user.authenticated == false || err != undefined){\r\n                    if(this.c8o.keepSessionAlive){\r\n                        let success = await this.loginManager.doLogin();\r\n                        if (success.status == false) {\r\n                            \r\n                            this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                            this.c8o.subscriber_session.next(null);\r\n                            this.mutex.release();\r\n                        }\r\n                        else {\r\n                            this.c8o.database.restartReplications(this.user.name)\r\n                            this.checkSession(null, 0);\r\n                            this.mutex.release();\r\n                        }\r\n                    }\r\n                    else{\r\n                        this.sessId = user.session;\r\n                        this.c8o.subscriber_session.next(null);\r\n                        this.mutex.release();\r\n                    }\r\n                }\r\n                else{\r\n                    this.sessId = user.session;\r\n                    this._status = C8oSessionStatus.Connected;\r\n                    this.c8o.database.restartReplications(this.user.name)\r\n                    this.checkSession(null, 0);\r\n                    await this.mutex.release();\r\n                }\r\n            }\r\n            catch(e){\r\n                this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                this.mutex.release();\r\n            }\r\n            \r\n            \r\n        }\r\n    }\r\n    /**\r\n     * defineSessionStatus\r\n     * \r\n     * if haderStatus is not null => we are connected\r\n     * else if headerStatus is not null and this.id is not null, we has lost session\r\n     * else we were never connected \r\n     * \r\n     * @param response the http header response\r\n     */\r\n    public async defineSessionStatus(response, headers, urlReq, parametersReq, headersReq, fromSetInitalState?) {\r\n        // get session id sent by header\r\n        let headerStatus = C8oUtilsCore.checkHeaderArgument(response, \"x-convertigo-authenticated\");\r\n        if (headerStatus != null) {\r\n            if(this.id != null && this.id != \"\" && this.id != headerStatus){\r\n                this.c8o.database.stopReplications(this.user.name);\r\n                this._user = new C8oSessionUser();\r\n                if(!fromSetInitalState){\r\n                    this.loginManager.setRequestLogin(urlReq, parametersReq, headersReq, this.sessId);\r\n                }\r\n                this._status = C8oSessionStatus.HasBeenConnectedToAnother;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.HasBeenConnectedToAnother;\r\n            }\r\n            if (this.id != null || this._status == C8oSessionStatus.HasBeenConnected) {\r\n                this._status = C8oSessionStatus.Connected;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.Connected;\r\n            }\r\n            else {\r\n                if(!fromSetInitalState){\r\n                    this.loginManager.setRequestLogin(urlReq, parametersReq, headersReq, this.sessId);\r\n                }\r\n                this._status = C8oSessionStatus.HasBeenConnected;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.HasBeenConnected;\r\n            }\r\n        }\r\n        else {\r\n            if (this.id != null) {\r\n                let cancel = false;\r\n                if (this._status == C8oSessionStatus.HasBeenConnected) {\r\n                    let user;\r\n                    try {\r\n                        user = await this.c8o.httpInterface.getUserServiceStatus();\r\n                        cancel = user != undefined ? user.authenticated : false;\r\n                        this.sessId = user.session;\r\n                    }\r\n                    catch(e){\r\n                        cancel = false;\r\n                    }\r\n                    \r\n                }\r\n                if (!cancel) {\r\n                    this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                    this.id = headerStatus;\r\n                    return C8oSessionStatus.HasBeenDisconnected;\r\n                }\r\n                else {\r\n                    return C8oSessionStatus.Ignore;\r\n                }\r\n\r\n\r\n            }\r\n            else {\r\n                this._status = C8oSessionStatus.Disconnected;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.Disconnected;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async checkUser(fromSetInitalState?) {\r\n        let user : any = this._user;\r\n        try {\r\n             if(fromSetInitalState){\r\n                user = fromSetInitalState.body;\r\n             }\r\n             else{\r\n                user = await this.c8o.httpInterface.getUserServiceStatus()\r\n             }\r\n             \r\n            if (this._user.name != user.user && this._user.name != \"anonymous\") {\r\n                // remove & stop all replications for older user\r\n                this.c8o.database.removeReplications(this._user.name);\r\n                \r\n            }\r\n            this._user = new C8oSessionUser(user);\r\n        }\r\n        catch(e){\r\n            if(fromSetInitalState){\r\n                this._status = C8oSessionStatus.Disconnected;\r\n            }\r\n            else{\r\n                this._status = C8oSessionStatus.HasBeenDisconnected;\r\n            }\r\n            \r\n        }\r\n        finally{\r\n            return user;\r\n        }\r\n    }\r\n\r\n    public async checkSession(headers: any, time: number, resolve = null, fromSetInitalState?) {\r\n        if(resolve == null){\r\n            resolve = (()=>{});\r\n        }\r\n        clearTimeout(this.checker);\r\n        this.checker = setTimeout(async () => {\r\n            let user;\r\n            user = await this.checkUser(fromSetInitalState);\r\n            let _status = user != undefined ? user.authenticated : false;\r\n            // if we are not anymore loggedin\r\n            if (!_status) {\r\n                this.c8o.log._debug(\"[C8oSessionManager] Session is not authenticated\");\r\n                // if we want to keepAlive session and we are not called from setInitalState\r\n                if (this.c8o.keepSessionAlive && fromSetInitalState) {\r\n                    // try to login\r\n                    await this.mutex.acquire();\r\n                    await this.mutex.release();\r\n                    if(this._status == C8oSessionStatus.Connected || this._status == C8oSessionStatus.HasBeenConnected){\r\n                        resolve(true);\r\n                    }\r\n                    else {\r\n                        let success = await this.loginManager.doLogin();\r\n                        if (success.status == false) {\r\n                            this.c8o.database.stopReplications(this.user.name);\r\n                            this._user = new C8oSessionUser();\r\n                            this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                            this.c8o.subscriber_session.next(null);\r\n                            resolve();\r\n                        }\r\n                        else {\r\n                            this.checkSession(headers, 0, resolve);\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n                else {\r\n                    this.c8o.database.stopReplications(this.user.name);\r\n                    this._user = new C8oSessionUser();\r\n\r\n                    // if we called this function from setInitalState\r\n                    if(fromSetInitalState){\r\n                        this._status = C8oSessionStatus.Disconnected;\r\n                    }\r\n                    else{\r\n                        this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                        this.c8o.subscriber_session.next(null);\r\n                    }\r\n                    resolve();\r\n                }\r\n\r\n            }\r\n            else {\r\n                // if we are still connected\r\n                this._status = C8oSessionStatus.Connected;\r\n                this.loginManager.setRequestLogin(null,null,null,user.session);\r\n                var funclistener = ()=> {\r\n                    this.c8o.httpInterface.p1 = new Promise((resolve)=>{});\r\n                    this.c8o.httpInterface.firstCall = true;\r\n                    // safe delete previous Checker\r\n                    try{\r\n                        clearTimeout(this.checker);\r\n                    }\r\n                    catch(e){\r\n                        \r\n                    }\r\n                    setTimeout(async ()=> {\r\n                        this.mutex.acquire();\r\n                        this.c8o.log.debug(\"[C8oSessionManager]: onResume checking user status\");\r\n                        let user = await this.checkUser();\r\n                        let _status = user != undefined ? user.authenticated : false;\r\n                        // if we are not anymore loggedin\r\n                        if (!_status) {\r\n                            this.c8o.log.debug(\"[C8oSessionManager]: onResume user is no longer logged\");\r\n                            if (this.c8o.keepSessionAlive) {\r\n                                this.c8o.log.debug(\"[C8oSessionManager]: onResume keepAlive session activated, we will try to autologin\");\r\n                                this.c8o.session.status = C8oSessionStatus.HasBeenDisconnected;\r\n                                // try to login\r\n                                let success = await this.loginManager.doLogin();\r\n                                if (success.status == false) {\r\n                                    this.c8o.log.debug(\"[C8oSessionManager]: onResume autologin failed\");\r\n                                    this.c8o.database.stopReplications(this.user.name);\r\n                                    this._user = new C8oSessionUser();\r\n                                    this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                                    this.c8o.subscriber_session.next(null);\r\n                                    this.mutex.release();\r\n                                    this.c8o.httpInterface.p1 = Promise.resolve(true);\r\n                                    resolve();\r\n                                }\r\n                                else {\r\n                                    this.c8o.log.debug(\"[C8oSessionManager]: onResume autologin worked\");\r\n                                    this.mutex.release();\r\n                                    this.checkSession(headers, 0, resolve);\r\n                                    this.c8o.httpInterface.p1 = Promise.resolve(true);\r\n                                }\r\n                            }\r\n                            else {\r\n                                this.c8o.log.debug(\"[C8oSessionManager]: onResume stopping replications\");\r\n                                this.c8o.database.stopReplications(this.user.name);\r\n                                this._user = new C8oSessionUser();\r\n                                this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                                this.c8o.subscriber_session.next(null);\r\n                                this.mutex.release();\r\n                                resolve();\r\n                            }\r\n                        }\r\n                        else{\r\n                            this._status = C8oSessionStatus.Connected;\r\n                            this.mutex.release();\r\n                        }\r\n                    }, 0);\r\n                };\r\n\r\n                try {\r\n                    if(this.resumeListener != undefined){\r\n                        document.removeEventListener(\"resume\", this.resumeListener, false);\r\n                    }\r\n                }\r\n                catch(e){   \r\n                    console.log(e);\r\n                }\r\n                \r\n                this.resumeListener = funclistener;\r\n                document.addEventListener(\"resume\",funclistener , false);\r\n                \r\n                \r\n                this.c8o.database.restartReplications(this.user.name);\r\n                let timeR = +user['maxInactive'] * 0.95 * 1000;\r\n                if (this.c8o.keepSessionAlive) {\r\n                    this.c8o.log._debug(\"[C8oSessionManager] Pooling for session, next check will be in \" + timeR + \"ms\");\r\n                    this.checkSession(headers, timeR);\r\n                    resolve();\r\n                }\r\n                else {\r\n                    if (this.checker != undefined) {\r\n                        try{\r\n                            clearTimeout(this.checker);\r\n                        }\r\n                        catch(e){\r\n                            \r\n                        }\r\n                    }\r\n                    this.checker =\r\n                        setTimeout(async () => {\r\n                            this.c8o.database.stopReplications(this.user.name);\r\n                            this._status = C8oSessionStatus.Disconnected;\r\n                            this.c8o.subscriber_session.next(null);\r\n                        }, timeR)\r\n                        resolve();\r\n                }\r\n            }\r\n        }, time)\r\n    }\r\n\r\n\r\n}","import { C8oBase } from \"./c8oBase\";\r\nimport { C8oHttpInterfaceCore } from \"./c8oHttpInterfaceCore\";\r\nimport { C8oLogger } from \"./c8oLogger\";\r\nimport { C8oLogLevel } from \"./c8oLogLevel\";\r\nimport { C8oSettings } from \"./c8oSettings\";\r\nimport { C8oUtilsCore } from \"./c8oUtilsCore\";\r\n\r\nimport { C8oFullSync, C8oFullSyncCbl } from \"./c8oFullSync\";\r\nimport { C8oResponseJsonListener, C8oResponseListener } from \"./c8oResponse\";\r\nimport { C8oExceptionMessage } from \"./Exception/c8oExceptionMessage\";\r\n\r\nimport { C8oCallTask } from \"./c8oCallTask\";\r\nimport { C8oFullSyncChangeListener } from \"./c8oFullSyncChangeListener\";\r\nimport { C8oPromise } from \"./c8oPromise\";\r\nimport { C8oCouchBaseLiteException } from \"./Exception/c8oCouchBaseLiteException\";\r\nimport { C8oException } from \"./Exception/c8oException\";\r\nimport { C8oExceptionListener } from \"./Exception/c8oExceptionListener\";\r\nimport { Observable, Subject, timer } from 'rxjs';\r\n\r\nimport {C8oManagerNetwork} from \"./c8oManagerNetwork\";\r\nimport {C8oManagerDatabase} from \"./c8oManagerDatabase\";\r\nimport {C8oManagerSession} from \"./c8oManagerSession\";\r\n\r\nimport * as _ from \"lodash\";\r\nimport { debounce } from \"rxjs/operators\";\r\n//@ts-ignore\r\nimport { throwError } from 'rxjs';\r\ndeclare var require: any;\r\n/**\r\n * Allows to send requests to a Convertigo Server (or Studio), these requests are called c8o calls.<br/>\r\n * C8o calls are done thanks to a HTTP request or a CouchbaseLite usage.<br/>\r\n * An instance of C8o is connected to only one Convertigo and can't change it.<br/>\r\n * To use it, you have to first initialize the C8o instance with the Convertigo endpoint, then use call methods with Convertigo variables as parameter.\r\n */\r\n\r\n// @dynamic\r\nexport abstract class C8oCore extends C8oBase {\r\n    // Log:\r\n    // - VERBOSE (v): methods parameters,\r\n    // - DEBUG (d): methods calls,\r\n    // - INFO (i):\r\n    // - WARN (w):\r\n    // - ERROR (e):\r\n\r\n    /*** Regular expression ***/\r\n\r\n    /**\r\n     * The regex used to handle the c8o requestable syntax (\"&lt;project&gt;.&lt;sequence&gt;\" or \"&lt;project&gt;.&lt;connector&gt;.&lt;transaction&gt;\")\r\n     */\r\n    protected static RE_REQUESTABLE = /^([^.]*)\\.(?:([^.]+)|(?:([^.]+)\\.([^.]+)))$/;\r\n\r\n    /**\r\n     * The regex used to get the part of the endpoint before '/projects/...'\r\n     */\r\n    protected static RE_ENDPOINT = /^(https?:\\/\\/([^:/]+)(:[0-9]+)?\\/?.*?)\\/projects\\/([^\\/]+)$/;\r\n\r\n    /**\r\n     *  Engine reserved parameters\r\n     */\r\n    public static ENGINE_PARAMETER_PROJECT: string = \"__project\";\r\n    public static ENGINE_PARAMETER_SEQUENCE: string = \"__sequence\";\r\n    public static ENGINE_PARAMETER_CONNECTOR: string = \"__connector\";\r\n    public static ENGINE_PARAMETER_TRANSACTION: string = \"__transaction\";\r\n    public static ENGINE_PARAMETER_ENCODED: string = \"__encoded\";\r\n    public static ENGINE_PARAMETER_DEVICE_UUID: string = \"__uuid\";\r\n    public static ENGINE_PARAMETER_PROGRESS: string = \"__progress\";\r\n    public static ENGINE_PARAMETER_FROM_LIVE: string = \"__fromLive\";\r\n    public lastChangeTimeStamp: number = 0; \r\n    public lastChangeSetTimeout = null;\r\n    public threshold = 50;\r\n    public observanleHandleFullSyncLive : Subject<any> = new Subject();\r\n    /**\r\n     * FULLSYNC parameters\r\n     */\r\n\r\n    public static use_merge_prefix: string = \"_use_merge\";\r\n    /**\r\n     * Constant to use as a parameter for a Call of \"fs://.post\" and must be followed by a FS_POLICY_* constant.\r\n     * <pre>{@code\r\n     * c8o.callJson(\"fs://.post\",\r\n     *   C8o.FS_POLICY, C8o.FS_POLICY_MERGE,\r\n     *   \"docid\", myid,\r\n     *   \"mykey\", myvalue\r\n     * ).sync();\r\n     * }</pre>\r\n     */\r\n    public static FS_POLICY: string = \"_use_policy\";\r\n    /**\r\n     Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n     This is the default post policy that don't alter the document before the CouchbaseLite's insertion.\r\n     */\r\n    public static FS_POLICY_NONE: string = \"none\";\r\n    /**\r\n     Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n     This post policy remove the \"_id\" and \"_rev\" of the document before the CouchbaseLite's insertion.\r\n     */\r\n    public static FS_POLICY_CREATE: string = \"create\";\r\n    /**\r\n     Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n     This post policy inserts the document in CouchbaseLite even if a document with the same \"_id\" already exists.\r\n     */\r\n    public static FS_POLICY_OVERRIDE: string = \"override\";\r\n    /**\r\n     Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n     This post policy merge the document with an existing document with the same \"_id\" before the CouchbaseLite's insertion.\r\n     */\r\n    public static FS_POLICY_MERGE: string = \"merge\";\r\n    /**\r\n     Use it with \"fs://.post\". Default value is \".\".\r\n\r\n     This key allow to override the sub key separator in case of document depth modification.\r\n     */\r\n    public static FS_SUBKEY_SEPARATOR: string = \"_use_subkey_separator\";\r\n    /**\r\n     Use it with \"project.sequence\". Default value is \".\".\r\n\r\n     This key allow to disable autologin feature for a given callJson\r\n     */\r\n    public static SEQ_AUTO_LOGIN_OFF: string = \"__disableAutologin\";\r\n\r\n    /**\r\n     * Use it with \"fs://\" request as parameter to enable the live request feature.<br/>\r\n     * Must be followed by a string parameter, the 'liveid' that can be use to cancel the live\r\n     * request using c8o.cancelLive(liveid) method.<br/>\r\n     * A live request automatically recall the then or thenUI handler when the database changed.\r\n     */\r\n    public static FS_LIVE: string = \"__live\";\r\n\r\n    /** Local cache keys **/\r\n    public static LOCAL_CACHE_DOCUMENT_KEY_RESPONSE: string = \"response\";\r\n    public static LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE: string = \"responseType\";\r\n    public static LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE: string = \"expirationDate\";\r\n\r\n    public static LOCAL_CACHE_DATABASE_NAME: string = \"c8olocalcache\";\r\n\r\n    /** Response type **/\r\n    public static RESPONSE_TYPE_XML: string = \"pxml\";\r\n    public static RESPONSE_TYPE_JSON: string = \"json\";\r\n\r\n    /* Static configuration */\r\n    private static deviceUUID: string;\r\n\r\n    /** Network **/\r\n\r\n    /**\r\n     * The Convertigo endpoint, syntax: &lt;protocol&gt;://&lt;host&gt;:&lt;port&gt;/&lt;Convertigo web app path&gt;/projects/&lt;project name&gt; (Example: http://127.0.0.1:18080/convertigo/projects/MyProject)\r\n     */\r\n    protected _endpoint: string;\r\n    protected _endpointConvertigo: string;\r\n    protected _endpointIsSecure: boolean;\r\n    protected _endpointHost: string;\r\n    protected _endpointPort: string;\r\n    protected _endpointProject: string;\r\n    protected _automaticRemoveSplashsCreen: boolean = true;\r\n\r\n    /**\r\n     * Used to run HTTP requests.\r\n     */\r\n    public httpInterface: C8oHttpInterfaceCore;\r\n\r\n    /**\r\n     * Allows to log locally and remotely to the Convertigo server.\r\n     */\r\n    public c8oLogger: C8oLogger;\r\n\r\n    /**\r\n     * Used to run fullSync requests.\r\n     */\r\n    public c8oFullSync: C8oFullSync;\r\n\r\n    public lives: C8oCallTask[] = [];\r\n    public livesDb: string[] = [];\r\n\r\n    public subscriber_session: Subject<any>;\r\n    public subscriber_session_changed: Subject<any>;\r\n    public subscriber_network: Subject<any>;\r\n    public subscriber_login: Subject<any>;\r\n    public subscriber_database_reset: Subject<any>;\r\n\r\n    private _reply = new Subject<any>();\r\n\r\n    protected data: any;\r\n    protected _http: any;\r\n    protected _couchUrl: string = null;\r\n    protected promiseConstructor: Promise<any>;\r\n    protected promiseInit: Promise<any>;\r\n    public promiseFinInit: Promise<any>;\r\n    protected promiseReachable: Promise<any>;\r\n    private promiseManagerNetwork: Promise<any>;\r\n    protected replicationsToRestart : Array<any>;\r\n    private _waitingForInit;\r\n    public reachable;\r\n\r\n    public network: C8oManagerNetwork;\r\n    public database: C8oManagerDatabase;\r\n    public session: C8oManagerSession;\r\n\r\n    public get couchUrl(): string {\r\n        return this._couchUrl;\r\n    }\r\n\r\n    public set couchUrl(value: string) {\r\n        this._couchUrl = value;\r\n    }\r\n\r\n    public override get logC8o(): boolean {\r\n        return this._logC8o;\r\n    }\r\n\r\n    public override set logC8o(value: boolean) {\r\n        this._logC8o = value;\r\n    }\r\n\r\n    public override get logRemote(): boolean {\r\n        return this._logRemote;\r\n    }\r\n\r\n    public override set logRemote(value: boolean) {\r\n        this._initalLogLevel = value;\r\n        this._logRemote = value;\r\n    }\r\n\r\n    public override get logLevelLocal(): C8oLogLevel {\r\n        return this._logLevelLocal;\r\n    }\r\n\r\n    public override set logLevelLocal(value: C8oLogLevel) {\r\n        this._logLevelLocal = value;\r\n    }\r\n\r\n    public get log(): C8oLogger {\r\n        return this.c8oLogger;\r\n    }\r\n\r\n    public override toString(): string {\r\n        return \"C8o[\" + this._endpoint + \"]\";\r\n    }\r\n\r\n    public override get endpoint(): string {\r\n        return this._endpoint;\r\n    }\r\n\r\n    public override set endpoint(value: string) {\r\n        this._endpoint = value;\r\n    }\r\n\r\n    public get endpointConvertigo(): string {\r\n        return this._endpointConvertigo;\r\n    }\r\n\r\n    public set endpointConvertigo(value: string) {\r\n        this._endpointConvertigo = value;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get endpointIsSecure(): boolean {\r\n        return this._endpointIsSecure;\r\n    }\r\n\r\n    public set endpointIsSecure(value: boolean) {\r\n        this._endpointIsSecure = value;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get endpointHost(): string {\r\n        return this._endpointHost;\r\n    }\r\n\r\n    public set endpointHost(value: string) {\r\n        this._endpointHost = value;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get endpointPort(): string {\r\n        return this._endpointPort;\r\n    }\r\n\r\n    public set endpointPort(value: string) {\r\n        this._endpointPort = value;\r\n    }\r\n\r\n    public get endpointProject(): string {\r\n        return this._endpointProject;\r\n    }\r\n\r\n    public set endpointProject(value: string) {\r\n        this._endpointProject = value;\r\n    }\r\n\r\n    public get deviceUUID(): Promise<string> {\r\n        \r\n            return new Promise((resolve)=>{\r\n                if(window[\"cordova\"]!=undefined){\r\n                    document.addEventListener(\"deviceready\", ()=>{\r\n                        if(C8oCore.deviceUUID == undefined){\r\n                            C8oCore.deviceUUID = C8oUtilsCore.getNewGUIDString();\r\n                        }\r\n                        resolve(C8oCore.deviceUUID);\r\n                    }, false);\r\n                }\r\n                else{\r\n                    if(C8oCore.deviceUUID == undefined){\r\n                        C8oCore.deviceUUID = C8oUtilsCore.getNewGUIDString();\r\n                    }\r\n                    resolve(C8oCore.deviceUUID);\r\n                }\r\n        \r\n        \r\n        \r\n            \r\n        })\r\n        \r\n    }\r\n\r\n    public get httpPublic(): any {\r\n        return this._http;\r\n    }\r\n\r\n    public override get resetBase(): boolean {\r\n        return this._resetBase;\r\n    }\r\n\r\n    public override set resetBase(resetBase: boolean) {\r\n        this._resetBase = resetBase;\r\n    }\r\n\r\n    public override get prefixBase(): boolean {\r\n        return this._prefixBase;\r\n    }\r\n\r\n    public override set prefixBase(resetBase: boolean) {\r\n        this._prefixBase = resetBase;\r\n    }\r\n\r\n    \r\n\r\n    public abstract get sdkVersion(): string;\r\n\r\n    public get coreVersion(): string {\r\n        return \"1.0.7\";//require(\"../../package.json\").version;\r\n    }\r\n\r\n    public xsrfUsed = false;\r\n\r\n    /**\r\n     * This is the base object representing a Convertigo Server end point. This object should be instantiated\r\n     * when the apps starts and be accessible from any class of the app. Although this is not common , you may have\r\n     * several C8o objects instantiated in your app.\r\n     *\r\n     * @param http\r\n     *\r\n     * @throws C8oException In case of invalid parameter or initialization failure.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.data = null;\r\n        this.c8oLogger = new C8oLogger(this, true);\r\n        this.subscriber_session = new Subject<any>();\r\n        this.subscriber_session_changed = new Subject<any>();\r\n        this.subscriber_network = new Subject<any>();\r\n        this.subscriber_login = new Subject<any>();\r\n        this.subscriber_database_reset = new Subject<any>();\r\n        this.network = new C8oManagerNetwork(this);\r\n        this.database= new C8oManagerDatabase(this);\r\n        this.session = new C8oManagerSession(this);\r\n        this.promiseManagerNetwork = this.network.init();\r\n        this.observanleHandleFullSyncLive\r\n        .pipe(debounce(() => timer(100)))\r\n        .subscribe((val) => {\r\n            this.executeHandleFullSyncLive();\r\n        });  \r\n\r\n    }\r\n\r\n    public importLoginState(c8o: C8oCore){\r\n        let session = c8o.session;\r\n        this.session = session;\r\n    }\r\n\r\n    protected extractendpoint() {\r\n        if (!C8oUtilsCore.isValidUrl(this.endpoint)) {\r\n            throw new C8oException(C8oExceptionMessage.illegalArgumentInvalidURL(this.endpoint).toString());\r\n        }\r\n        const matches = C8oCore.RE_ENDPOINT.exec(this.endpoint.toString());\r\n        if (matches === null) {\r\n            throw new C8oException(C8oExceptionMessage.illegalArgumentInvalidEndpoint(this.endpoint.toString()));\r\n        }\r\n        this.endpointConvertigo = matches[0].substring(0, (matches[0].indexOf(\"/projects\")));\r\n        this.endpointIsSecure = matches[1] != null;\r\n        this.endpointHost = matches[2];\r\n        this.endpointPort = matches[3];\r\n        this.endpointProject = matches[4];\r\n    }\r\n\r\n\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters.<br/>\r\n     * To not use a C8oExceptionListener you can set the parameter to null\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters - Contains c8o variables\r\n     * @param c8oResponseListener - Define the behavior with the c8o call response\r\n     * @param c8oExceptionListener - Define the behavior when there is an exception during execution\r\n     */\r\n    public call(requestable: string, parameters: Object = null, c8oResponseListener: C8oResponseListener = null, c8oExceptionListener: C8oExceptionListener = null) {\r\n        try {\r\n            if (requestable === null || requestable === undefined) {\r\n                //noinspection ExceptionCaughtLocallyJS\r\n                throw new C8oException(C8oExceptionMessage.illegalArgumentNullParameter(\"resquestable\"));\r\n            }\r\n            if (parameters === null || parameters === undefined) {\r\n                parameters = {};\r\n            } else {\r\n                if (this._normalizeParameters == true) {\r\n                    try {\r\n                        parameters = (JSON.parse(JSON.stringify(parameters)));\r\n                    }\r\n                    catch (error) {\r\n                        this.log.debug(\"[C8o] can't normalize parameters due to cyclic error. We will use parameters non normalized\");\r\n                    }\r\n\r\n                }\r\n            }\r\n            const regex = C8oCore.RE_REQUESTABLE.exec(requestable);\r\n            if (regex === null || regex === undefined) {\r\n                //noinspection ExceptionCaughtLocallyJS\r\n                throw new C8oException(C8oExceptionMessage.InvalidArgumentInvalidEndpoint(this._endpoint));\r\n            }\r\n            if (regex[1] !== \"\") {\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROJECT.toString()] = regex[1];\r\n            }\r\n            if (regex[2] != null) {\r\n                parameters[C8oCore.ENGINE_PARAMETER_SEQUENCE.toString()] = regex[2];\r\n            } else {\r\n                parameters[C8oCore.ENGINE_PARAMETER_CONNECTOR.toString()] = regex[3];\r\n                parameters[C8oCore.ENGINE_PARAMETER_TRANSACTION.toString()] = regex[4];\r\n            }\r\n            return this._call(parameters, c8oResponseListener, c8oExceptionListener);\r\n        } catch (error) {\r\n            this.handleCallException(c8oExceptionListener, parameters, error);\r\n        } finally {\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes a c8o call with c8o requestable in parameters ('__project' and ('__sequence' or ('__connector' and '__transaction'))).<br/>\r\n     * To not use a C8oExceptionListener you can set the parameter to null.\r\n     *\r\n     * @param parameters - Contains c8o variables\r\n     * @param c8oResponseListener - Define the behavior with the c8o call response\r\n     * @param c8oExceptionListener - Define the behavior when there is an exception during execution\r\n     */\r\n    public _call(parameters: Object = null, c8oResponseListener: C8oResponseListener = null, c8oExceptionListener: C8oExceptionListener = null) {\r\n        // IMPORTANT: all c8o calls have to end here !\r\n        Promise.all([this.promiseFinInit, this.promiseManagerNetwork]).then(() => {\r\n            try {\r\n                this.c8oLogger.logMethodCall(\"call\", parameters, c8oResponseListener, c8oExceptionListener);\r\n                if (parameters == null) {\r\n                    parameters = {};\r\n                } else {\r\n                    if (this._normalizeParameters == true) {\r\n                        try {\r\n                            parameters = (JSON.parse(JSON.stringify(parameters)));\r\n                        }\r\n                        catch (error) {\r\n                            this.log.debug(\"[C8o] can't normalize parameters due to cyclic error. We will use parameters non normalized\");\r\n                        }\r\n                    }\r\n                }\r\n                const task: C8oCallTask = new C8oCallTask(this, parameters, c8oResponseListener, c8oExceptionListener);\r\n                task.run();\r\n            } catch (error) {\r\n                this.handleCallException(c8oExceptionListener, parameters, error);\r\n            } finally {\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters, expecting a JSON response through a C8oPromise.<br/>\r\n     * The C8oPromise allow to register response handler with .then and .thenUI,\r\n     * error handler with .fail and failUI,\r\n     * replication handler with .progress\r\n     * and synchronous response with .sync().\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters: Object - Contains c8o variables as key/value pair in the Map\r\n     * @return A C8oPromise that can deliver the JSON response\r\n     */\r\n    public callJsonObject(requestable: string, parameters: Object): C8oPromise<JSON> {\r\n        this.removeNull(parameters)\r\n        const promise: C8oPromise<JSON> = new C8oPromise<JSON>(this);\r\n        this.call(requestable, parameters, new C8oResponseJsonListener((response: any, requestParameters: Object) => {\r\n            if (requestParameters == null) {\r\n                requestParameters = {};\r\n            }\r\n            if (response == null && requestParameters[C8oCore.ENGINE_PARAMETER_PROGRESS]) {\r\n                promise.onProgress(requestParameters[C8oCore.ENGINE_PARAMETER_PROGRESS]);\r\n            } else {\r\n                promise.onResponse(response, requestParameters);\r\n            }\r\n        }),\r\n            new C8oExceptionListener((exception: C8oException, data: Object) => {\r\n                promise.onFailure(exception, data);\r\n            }));\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters, expecting a JSON response through a C8oPromise.<br/>\r\n     * The C8oPromise allow to register response handler with .then and .thenUI,\r\n     * error handler with .fail and failUI,\r\n     * replication handler with .progress\r\n     * and synchronous response with .sync().\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters - Contains c8o variables as key/value\r\n     * @return A C8oPromise that can deliver the JSON response\r\n     */\r\n    public callJson(requestable: string, ...parameters: any[]): C8oPromise<JSON> {\r\n        return this.callJsonObject(requestable, C8oCore.toParameters(parameters));\r\n    }\r\n\r\n    /**\r\n     * Transforms siblings values as key/value of a Map.\r\n     *\r\n     * @param parameters pair of values to transform a object\r\n     * @return a Map that contains all parameters\r\n     */\r\n    public static toParameters(parameters: any): Object {\r\n        const newParameters: Object = {};\r\n        if (0 !== parameters.length % 2) {\r\n            throw new C8oException(\"Incorrect number of parameters\");\r\n        }\r\n        for (let i = 0; i < parameters.length; i += 2) {\r\n            newParameters[parameters[i]] = parameters[i + 1];\r\n        }\r\n        return newParameters;\r\n    }\r\n    /**\r\n     * Remove null value from parameters\r\n     *\r\n     * @param parameters an object\r\n     * @return a Map that contains all parameters\r\n     */\r\n    public removeNull(parameters: any){\r\n        for(let val in parameters){\r\n            if(parameters[val]== null){\r\n                delete parameters[val];\r\n                this.log._trace(\"remove parameters \"+ val+ \" since its value is null or undefined\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls the exception listener callback if it is not null, else prints the exception stack trace.\r\n     *\r\n     * @param c8oExceptionListener\r\n     * @param requestParameters\r\n     * @param exception\r\n     */\r\n    public handleCallException(c8oExceptionListener: C8oExceptionListener, requestParameters: Object, exception: Error) {\r\n        this.c8oLogger.warn(\"Handle a call exception\", exception);\r\n        if (c8oExceptionListener != null) {\r\n            c8oExceptionListener.onException(exception, requestParameters);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return an subject that call next if session has been lost\r\n     */\r\n    public handleSessionLost(): Subject<any> {\r\n        this.subscriber_session.subscribe((res)=>{\r\n            this.c8oLogger.debug(\"[C8o][handleSessionLost] Handle a session lost\");\r\n\r\n/*            (this.c8oFullSync as C8oFullSyncCbl).canceled = false;\r\n            (this.c8oFullSync as C8oFullSyncCbl).cancelActiveReplications();\r\n  */\r\n           \r\n        });\r\n        return this.subscriber_session;\r\n    }\r\n\r\n    /**\r\n     * Return an subject that call next if session authenticated user change\r\n     */\r\n     public handleSessionAuthenticatedUserChanged(): Subject<any> {\r\n        this.subscriber_session_changed.subscribe((res)=>{\r\n            this.c8oLogger.debug(\"[C8o][handleSessionLost] Handle a session change of authenticated user\");           \r\n        });\r\n        return this.subscriber_session_changed;\r\n    }\r\n\r\n    /**\r\n     * Return an subject that call next if network has change\r\n     */\r\n    public handleNetworkEvents(): Subject<any> {\r\n        return this.subscriber_network;\r\n    }\r\n\r\n    /**\r\n     * Return an subject that call next if autologin is triggered with its result\r\n     */\r\n    public handleAutoLoginResponse(): Subject<any> {\r\n        return this.subscriber_login;\r\n    }\r\n\r\n    /**\r\n     * Return an subject that call next if database has been reset\r\n     */\r\n     public handleResetDatabase(): Subject<any> {\r\n        return this.subscriber_database_reset;\r\n    };\r\n    \r\n    /**\r\n     * get an attachment for a given object\r\n     *\r\n     * @param id: string\r\n     * @param attachment_name: string\r\n     *\r\n     * @returns a promise containing a buffer\r\n     */\r\n    public async get_attachment(id: string, attachment_name: string, database_name?: string): Promise<any> {\r\n        return new Promise(async (resolve, reject) => {\r\n            if (database_name == null) {\r\n                database_name = this.defaultDatabaseName;\r\n            }\r\n            if ((this.c8oFullSync as C8oFullSyncCbl) != undefined) {\r\n                const fullsyncdb = await (this.c8oFullSync as C8oFullSyncCbl).getOrCreateFullSyncDatabase(database_name);\r\n                fullsyncdb.getdatabase.getAttachment(id, attachment_name).then((buffer) => {\r\n                    resolve(buffer);\r\n                }).catch((err) => {\r\n                    reject(err);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add a listener to monitor all changes of the 'db'.\r\n     *\r\n     * @param db the name of the fullsync database to monitor. Use the default database for a blank or a null value.\r\n     * @param listener the listener to trigger on change.\r\n     */\r\n    public addFullSyncChangeListener(db: string, listener: C8oFullSyncChangeListener, parameters: Object = {}) {\r\n        (this.c8oFullSync as C8oFullSyncCbl).addFullSyncChangeListener(db, listener, parameters);\r\n    }\r\n\r\n    /**\r\n     * Remove a listener for changes of the 'db'.\r\n     *\r\n     * @param db the name of the fullsync database to monitor. Use the default database for a blank or a null value.\r\n     * @param listener the listener instance to remove.\r\n     */\r\n    public removeFullSyncChangeListener(db: string, listener: C8oFullSyncChangeListener) {\r\n        (this.c8oFullSync as C8oFullSyncCbl).removeFullSyncChangeListener(db, listener);\r\n    }\r\n\r\n    public addLive(liveid: string, db: string, task: C8oCallTask) {\r\n        this.cancelLive(liveid);\r\n        this.lives[liveid] = task;\r\n        this.livesDb[liveid] = db;\r\n        this.addFullSyncChangeListener(db, this.handleFullSyncLive);\r\n    }\r\n\r\n    public cancelLive(liveid: string) {\r\n        if (this.livesDb[liveid] !== undefined) {\r\n            let db: string = this.livesDb[liveid];\r\n            delete this.livesDb[liveid];\r\n            if (this.livesDb[db] !== undefined) {\r\n                db = null;\r\n            }\r\n            if (db !== null) {\r\n                this.removeFullSyncChangeListener(db, this.handleFullSyncLive);\r\n            }\r\n        }\r\n        delete this.lives[liveid];\r\n    }\r\n\r\n    private executeHandleFullSyncLive(){\r\n        console.log(\"Executing from handleFullSyncLive into debounce\");   \r\n        for (const task in this.lives) {\r\n            (this.lives[task] as C8oCallTask).executeFromLive();\r\n        }\r\n    }\r\n\r\n    private doAlog(){\r\n        console.log(\"Executing from handleFullSyncLive into debounce\");\r\n    }\r\n\r\n    private debounce(func, timeout = 300){\r\n        let timer;\r\n        return (...args) => {\r\n          clearTimeout(timer);\r\n          timer = setTimeout(() => { func.apply(this, args); }, timeout);\r\n       };\r\n    }\r\n\r\n    public truc(){\r\n        for(var i =0; i< 10; i++){\r\n            console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.debounce(()=>this.doAlog());\r\n        }\r\n    }\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    protected handleFullSyncLive: C8oFullSyncChangeListener = new C8oFullSyncChangeListener(\r\n        (changes: Object) => {\r\n            console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.observanleHandleFullSyncLive.next(changes);\r\n            /*console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.debounce(()=>this.executeHandleFullSyncLive());\r\n            /*console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            _.debounce(\r\n                this.executeHandleFullSyncLive,\r\n                window[\"threshold\"] != undefined ? window[\"threshold\"] : this.threshold,\r\n                window[\"options\"] != undefined ? window[\"options\"] : {}\r\n            )();*/\r\n            /*let localLastChangeTimeStamp = new Date().getTime();\r\n            if(22)\r\n            this.lastChangeTimeStamp = localLastChangeTimeStamp;\r\n            console.log(\"Executing from handleFullSyncLive. \\nthis.lastChangeTimeStamp=\"+ this.lastChangeTimeStamp)\r\n            this.lastChangeSetTimeout = setTimeout(()=>{\r\n                let execution_time = new Date().getTime();\r\n                let sub = execution_time - this.lastChangeTimeStamp;\r\n                console.log(\"Executing from handleFullSyncLive into setTimeout. \\nthis.lastChangeTimeStamp=\"+ this.lastChangeTimeStamp+\"\\nexecution_time=\"+execution_time+\"\\nsub=\"+sub+\"\\nthreshold=\"+this.threshold);\r\n                if( sub >= this.threshold){\r\n                    console.log(\"Executing from handleFullSyncLive into setTimeout reloading lives\");\r\n                    for (const task in this.lives) {\r\n                        (this.lives[task] as C8oCallTask).executeFromLive();\r\n                    }\r\n                }\r\n                else{\r\n                    console.log(\"Executing from handleFullSyncLive into setTimeout donot reloading lives\");\r\n                }\r\n            }, this.threshold);*/\r\n            \r\n    });\r\n    \r\n    /**\r\n     * Method to bastract http get\r\n     * @param uri the uri for given request\r\n     */\r\n    public abstract httpGetObservable(uri): Observable<any>;\r\n\r\n     /**\r\n     * Init http interface in client sdk\r\n     */\r\n    abstract initC8oHttInterface(): void;\r\n\r\n    /**\r\n     * This is the base object representing a Convertigo Server end point. This object should be instantiated\r\n     * when the apps starts and be accessible from any class of the app. Although this is not common , you may have\r\n     * several C8o objects instantiated in your app.\r\n     *\r\n     * @param c8oSettings Initialization options.<br/>\r\n     *                    Example: new C8oSettings().setLogRemote(false).setDefaultDatabaseName(\"sample\")\r\n     *\r\n     * @throws C8oException In case of invalid parameter or initialization failure.\r\n     */\r\n    public init(c8oSettings?: C8oSettings): Promise<any> {\r\n        let nullableEndpoint = true;\r\n        if (c8oSettings !== undefined) {\r\n            if (c8oSettings.endpoint != null) {\r\n                nullableEndpoint = false;\r\n            }\r\n        }\r\n        if (nullableEndpoint) {\r\n            this.promiseConstructor = new Promise<void>((resolve) => {\r\n                // if project is running into web browser served by convertigo\r\n                // get the url from window.location\r\n                if (window.location.href.startsWith(\"http\") && window.location.href.indexOf(\"/DisplayObjects\") != -1) {\r\n                    let n = window.location.href.indexOf(\"/DisplayObjects\");\r\n                    this.endpoint = window.location.href.substring(0, n);\r\n                    resolve();\r\n                }\r\n                // else if project is running on device or serve by ionic serve\r\n                // get the uri from env.json\r\n                else {\r\n                    let uri =\"\";\r\n                    if(window.location.href.startsWith(\"file://\")){\r\n                        uri = (window.location.href.substring(0, window.location.href.indexOf(\"/index.html\"))) + \"/env.json\"\r\n                    }\r\n                    else{\r\n                        uri = window.location.origin + \"/env.json\";\r\n                    }\r\n                    this.httpGetObservable(uri)\r\n                        .subscribe(\r\n                            data => {\r\n                                this.data = data;\r\n                                //noinspection TypeScriptUnresolvedVariable\r\n                                let remoteBase = data[\"remoteBase\"].toString();\r\n                                let n = remoteBase.indexOf(\"/_private\");\r\n                                this.endpoint = remoteBase.substring(0, n);\r\n                                this._automaticRemoveSplashsCreen = data[\"splashScreenRemoveMode\"] !== \"manual\";\r\n                                resolve();\r\n                            },\r\n                            error=>{\r\n                                alert(\"Missing env.json file\");\r\n                                let errMsg: string;\r\n                                if (error instanceof Error) {\r\n                                    errMsg = error.message;\r\n                                } else {\r\n                                    errMsg = `${error.status} - ${error.statusText || \"\"} ${error}`;\r\n                                }\r\n                                //@ts-ignore\r\n                                if(throwError != undefined){\r\n                                    //@ts-ignore\r\n                                    return throwError(errMsg);\r\n                                }\r\n                                else{\r\n                                    //@ts-ignore\r\n                                    return Observable.throw(errMsg);\r\n                                }\r\n                                \r\n                            }\r\n                        );\r\n                }\r\n            }).then(() => {\r\n                this.extractendpoint();\r\n            });\r\n        }\r\n        else {\r\n            this.promiseConstructor = new Promise<void>((resolve) => {\r\n                this.endpoint = c8oSettings.endpoint;\r\n                this.extractendpoint();\r\n                resolve();\r\n            });\r\n        }\r\n\r\n        this.promiseInit = Promise.all([this.promiseConstructor]).then(() => {\r\n            return new Promise<void>(async (resolve) => {\r\n                this.copy(c8oSettings);\r\n                this.initC8oHttInterface();\r\n                try{\r\n                    await this.session.setInitalState();\r\n                }\r\n                catch(e){\r\n                    console.error(\"Error calling setInitalState\", e);\r\n                }\r\n                this.c8oLogger.affect_val(this, false);\r\n                try{\r\n                    await this.c8oLogger.logRemoteInit()\r\n                }\r\n                catch(e){\r\n                    console.error(\"Error calling logRemoteInit\", e);\r\n                }\r\n                this.c8oLogger.logMethodCall(\"C8o Constructor\");\r\n                this.c8oFullSync = new C8oFullSyncCbl(this);\r\n                resolve();\r\n                \r\n            });\r\n        });\r\n        return this.promiseInit;\r\n    }\r\n\r\n    /**\r\n     * This should be called OnPlatform Ready to remove splashscreen if necessary\r\n     *\r\n     */\r\n    public finalizeInit(): Promise<any>{\r\n        if(this.promiseFinInit != null){\r\n            return this.promiseFinInit;\r\n        }\r\n        else{\r\n            this.promiseFinInit = new Promise<void>((resolve)=>{\r\n                Promise.all([this.promiseInit]).then(() => {\r\n                    /**\r\n                     * Looking for splashScreen timeOut\r\n                     */\r\n                    if (this._automaticRemoveSplashsCreen) {\r\n                        if (navigator[\"splashscreen\"] !== undefined) {\r\n                            navigator[\"splashscreen\"].hide();\r\n                        }\r\n                    }\r\n                    /**\r\n                     * Looking for wkWebView\r\n                     */\r\n                    if (window[\"wkWebView\"] != undefined) {\r\n                        window[\"wkWebView\"].injectCookie(this.endpointConvertigo)\r\n                        this.log.debug(\"[C8O] wkWebView detected: We will inject Cookie for endpoint: \"+ this.endpointConvertigo);\r\n                    }\r\n                    /**\r\n                     * Looking for cblite\r\n                     */\r\n                    if (window[\"cblite\"] != undefined) {\r\n                        window[\"cblite\"].getURL((err, url) => {\r\n                            if (err) {\r\n                                //this.checkReachable()\r\n                                resolve();\r\n                            }\r\n                            else{\r\n                                url = url.replace(new RegExp(\"/$\"), \"\");\r\n                                this.couchUrl = url;\r\n                                //this.checkReachable()\r\n                                resolve();\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        //this.checkReachable()\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n            return this.promiseFinInit;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n// @dynamic\r\nexport class FullSyncPolicy {\r\n\r\n    public static NONE: FullSyncPolicy = new FullSyncPolicy(C8oCore.FS_POLICY_NONE, (database: any, newProperties: Object) => {\r\n        let documentId = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n        if (documentId === \"\") {\r\n            documentId = null;\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            database.post(newProperties).then((createdDocument) => {\r\n                resolve(createdDocument);\r\n            }).catch((error) => {\r\n                reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n            });\r\n        });\r\n    });\r\n\r\n    public static CREATE: FullSyncPolicy = new FullSyncPolicy(C8oCore.FS_POLICY_CREATE, (database: any, newProperties: Object) => {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n                delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n                database.post(newProperties).then((createdDocument) => {\r\n                    resolve(createdDocument);\r\n                });\r\n            } catch (error) {\r\n                reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n            }\r\n        });\r\n    });\r\n\r\n    public static OVERRIDE: FullSyncPolicy = new FullSyncPolicy(C8oCore.FS_POLICY_OVERRIDE, (database: any, newProperties: Object) => {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                const documentId: string = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n                delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n                delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n                if (documentId == null) {\r\n                    database.post(newProperties).then((createdDocument) => {\r\n                        resolve(createdDocument);\r\n                    });\r\n                } else {\r\n                    database.get(documentId).then((doc) => {\r\n                        newProperties[\"_id\"] = documentId;\r\n                        newProperties[\"_rev\"] = doc._rev;\r\n                        return database.put(newProperties);\r\n                    }).then((createdDocument) => {\r\n                        resolve(createdDocument);\r\n                    }).catch((error) => {\r\n                        if (error.status === \"404\" || error.status === 404) {\r\n                            newProperties[\"_id\"] = documentId;\r\n                            return database.post(newProperties);\r\n                        } else {\r\n                            reject(error);\r\n                        }\r\n                    },\r\n                    ).then((createdDocument) => {\r\n                        resolve(createdDocument);\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n            }\r\n        });\r\n    });\r\n\r\n    public static MERGE: FullSyncPolicy = new FullSyncPolicy(C8oCore.FS_POLICY_MERGE, (database: any, newProperties: Object, subPolicy = null) => {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                const documentId: string = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n                // delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n                delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n                // copy newProperties object to be able to apply subPolicy merge\r\n                let copyNewProperties = C8oFullSyncCbl.deepCloneObject(newProperties);\r\n                if (documentId == null) {\r\n                    // Apply subPolicy for merge (here can only be delete since, there is no previous doc)\r\n                    C8oFullSyncCbl.applySubPolicyForMerge(false, copyNewProperties, newProperties , subPolicy);\r\n                    // Put document\r\n                    database.put(newProperties)\r\n                        .then((createdDocument) => {\r\n                            resolve(createdDocument);\r\n                        }).catch((error) => {\r\n                            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                        });\r\n\r\n                } else {\r\n                    database.get(documentId)\r\n                        .then((doc) => {\r\n                            // Apply Policy merge\r\n                            C8oFullSyncCbl.mergeProperties(newProperties, doc);\r\n                            // Apply subPolicy for merge\r\n                            C8oFullSyncCbl.applySubPolicyForMerge(true, copyNewProperties, newProperties , subPolicy);\r\n                            // Put document\r\n                            database.put(newProperties)\r\n                                .then((createdDocument) => {\r\n                                    resolve(createdDocument);\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                                });\r\n\r\n                        }).catch((error) => {\r\n                            if (error.status === 404) {\r\n                                // Apply subPolicy for merge (here can only be delete since, there is no previous doc)\r\n                                C8oFullSyncCbl.applySubPolicyForMerge(false, copyNewProperties, newProperties , subPolicy);\r\n                                // Put document\r\n                                database.put(newProperties)\r\n                                    .then((createdDocument) => {\r\n                                        resolve(createdDocument);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                                    });\r\n                            } else {\r\n                                reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                            }\r\n                        });\r\n                }\r\n            } catch (error) {\r\n                reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n            }\r\n        });\r\n    });\r\n\r\n    public value: string;\r\n    public action: (PouchDB, Object, subPolicy?) => any;\r\n\r\n    constructor(value: string, action: (_Object, Object) => any) {\r\n        this.value = value;\r\n        this.action = action;\r\n        \r\n    }\r\n\r\n    public static values(): FullSyncPolicy[] {\r\n        return [this.NONE, this.CREATE, this.OVERRIDE, this.MERGE];\r\n    }\r\n\r\n    public static getFullSyncPolicy(value: string): FullSyncPolicy {\r\n        if (value != null) {\r\n            const fullSyncPolicyValues: FullSyncPolicy[] = FullSyncPolicy.values();\r\n            for (const fullSyncPolicy of fullSyncPolicyValues) {\r\n                if (fullSyncPolicy.value === value) {\r\n                    return fullSyncPolicy as FullSyncPolicy;\r\n                }\r\n            }\r\n        }\r\n        return this.NONE;\r\n    }\r\n}\r\n\r\nexport class FullSyncPostDocumentParameter {\r\n    public static POLICY: FullSyncPostDocumentParameter = new FullSyncPostDocumentParameter(C8oCore.FS_POLICY);\r\n    public static SUBKEY_SEPARATOR: FullSyncPostDocumentParameter = new FullSyncPostDocumentParameter(C8oCore.FS_SUBKEY_SEPARATOR);\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public static values(): FullSyncPostDocumentParameter[] {\r\n        const array: FullSyncPostDocumentParameter[] = [];\r\n        array.push(this.POLICY, this.SUBKEY_SEPARATOR);\r\n        return array;\r\n    }\r\n\r\n}\r\n","import { C8oCore } from \"./c8oCore\";\r\nimport { C8oProgress } from \"./c8oProgress\";\r\nimport { C8oResponseListener, C8oResponseJsonListener } from \"./c8oResponse\";\r\nimport { retry, timeout } from 'rxjs/operators';\r\nimport { C8oHttpRequestException } from \"./Exception/c8oHttpRequestException\";\r\n\r\nimport { C8oExceptionMessage } from \"./Exception/c8oExceptionMessage\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n// @ts-ignore\r\nimport * as rxjs0 from \"rxjs\";\r\n// @ts-ignore\r\nimport * as rxjs1 from \"rxjs/observable/fromPromise\";\r\n\r\ndeclare const require: any;\r\nexport abstract class C8oHttpInterfaceCore {\r\n    public c8o: C8oCore;\r\n    public timeout: number;\r\n    public firstCall: boolean = true;\r\n    public p1: Promise<Object>;\r\n    protected _isCordova = null;\r\n    public firstcheckSessionR: boolean;\r\n    private js = true;\r\n    private session = \"\";\r\n    private _timeout: any;\r\n    private from: any;\r\n    private requestLogin: any;\r\n    private _loggedinSession: boolean;\r\n    private _notifySessionLost: boolean;\r\n\r\n    constructor(c8o: C8oCore, js: boolean = true) {\r\n        /**\r\n         * As we must support Angular 5.x, 6.x and 7.x, they need as peerDependencies diffrent versions of Rxjs.\r\n         * We alson need rxjs, but switch version of rxjs methods and paths to import are diffrents.\r\n         * So we test presence or not of module in some paths into rxjs to define in which version we are and execute the good import.\r\n        */\r\n         let rxjs = rxjs0;//require('rxjs');\r\n        if (rxjs != undefined) {\r\n            if (rxjs.from != undefined) {\r\n                this.from = rxjs.from;\r\n                c8o.log._trace(\"[C8oHttpInterfaceCore] Detect rxjs 6.x\")\r\n            }\r\n            else {\r\n                rxjs = rxjs1;//require('rxjs/observable/fromPromise');\r\n                c8o.log._trace(\"[C8oHttpInterfaceCore] Detect rxjs 5.x\")\r\n                if (rxjs != undefined) {\r\n                    // @ts-ignore\r\n                    this.from = rxjs.fromPromise;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.c8o = c8o;\r\n        this.timeout = this.c8o.timeout;\r\n        this.firstcheckSessionR = false;\r\n        this._notifySessionLost = false;\r\n\r\n        /**\r\n         *  As this package will be used in two diffrent library, wee need to test in which platform we are,\r\n         *  to perform diffrent platform specific actions.\r\n         */\r\n        this.js = js;\r\n    }\r\n\r\n    public forceInit() {\r\n        this.firstcheckSessionR = false;\r\n        this._notifySessionLost = false;\r\n    }\r\n\r\n    /**\r\n     * Method to bastract http get\r\n     * @param uri the uri for given request\r\n     */\r\n    public httpGetObservable(uri, param1 = null, param2 = null) {\r\n        if (this.js) {\r\n            if (param1 == null) {\r\n                return this.from(this.c8o.httpPublic.get(uri));\r\n            }\r\n            else if (param2 == null) {\r\n                return this.from(this.c8o.httpPublic.get(uri, param1));\r\n            }\r\n            else {\r\n                return this.from(this.c8o.httpPublic.get(uri, param1, param2));\r\n            }\r\n        }\r\n        else {\r\n            if (param1 == null) {\r\n                return this.c8o.httpPublic.get(uri);\r\n            }\r\n            else if (param2 == null) {\r\n                return this.c8o.httpPublic.get(uri, param1);\r\n            }\r\n            else {\r\n                return this.c8o.httpPublic.get(uri, param1, param2);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method to bastract http post\r\n     * @param uri the uri for given request\r\n     */\r\n    public httpPostObservable(uri, param1, param2) {\r\n        if (this.js) {\r\n            return this.from(this.c8o.httpPublic.post(uri, param1, param2));\r\n        }\r\n        else {\r\n            return this.c8o.httpPublic.post(uri, param1, param2);\r\n        }\r\n    }\r\n    /**\r\n     * Call user service\r\n     * @param headers headers for request\r\n     */\r\n    public getUserServiceStatus(observe?): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n            Object.assign(headersObject, this.c8o.headers);\r\n            let params = {\r\n                headers: this.getHeaders(headersObject),\r\n                withCredentials: true,\r\n            }\r\n            if (observe) {\r\n                params[\"observe\"] = \"response\";\r\n            }\r\n            this.httpPostObservable(this.c8o.endpointConvertigo + \"/services/user.Get\", {}, params)\r\n                .pipe(\r\n                    retry(1)\r\n                )\r\n                .subscribe(\r\n                    response => {\r\n                        resolve(response);\r\n                    },\r\n                    error => {\r\n                        reject(error);\r\n                    })\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n    * Make an http post\r\n    * @param {string} url\r\n    * @param {Object} parameters\r\n    * @return {Promise<any>}\r\n    */\r\n    public httpPost(url: string, parameters: Object): Promise<any> {\r\n        parameters = this.transformRequest(parameters);\r\n        let headersObject = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"x-convertigo-sdk\": this.c8o.sdkVersion, headers: { 'Accept-Encoding': 'gzip' } };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        let headers = this.getHeaders(headersObject);\r\n        if (this.firstCall) {\r\n            this.p1 = new Promise((resolve, reject) => {\r\n                this.firstCall = false;\r\n                this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n            });\r\n            return this.p1;\r\n        }\r\n        else {\r\n            return new Promise((resolve, reject) => {\r\n                Promise.all([this.p1]).then(() => {\r\n                    this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n                }).catch((error) => {\r\n                    this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute http Posts \r\n     * @param url \r\n     * @param parameters \r\n     * @param headers \r\n     * @param resolve \r\n     * @param reject \r\n     */\r\n    public execHttpPosts(url: string, parameters: any, headers: any, resolve, reject, headers_return = false, doLogin = false) {\r\n        let _timeout = this.c8o.timeout;\r\n        if (parameters[\"_c8oTimeout\"] != undefined) {\r\n            _timeout = +parameters[\"_c8oTimeout\"];\r\n        }\r\n        this.httpPostObservable(url, parameters, {\r\n            headers: headers,\r\n            withCredentials: true,\r\n            observe: 'response'\r\n        })\r\n            .pipe(timeout(_timeout))\r\n            .pipe(\r\n                retry(1)\r\n            )\r\n            .subscribe(\r\n                response => {\r\n                    this.handleResponseHttpPost(response, headers, resolve, url, parameters, headers, headers_return, reject, doLogin);\r\n                },\r\n                error => {\r\n                    this.handleErrorHttpPost(error, reject, url);\r\n                }\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Handle response of http Posts\r\n     * @param response \r\n     * @param headers \r\n     * @param resolve \r\n     */\r\n    private handleResponseHttpPost(response: any, headers: any, resolve: any, urlReq: string, parametersReq: any, headersReq: any, returns_header = false, reject = null, doLogin = false) {\r\n        //this.checkReachable();\r\n        //this.triggerSessionCheck(response, headers, urlReq, parametersReq, headersReq);\r\n        if (urlReq.indexOf(\".json\") != -1) {\r\n            if (doLogin == true) {\r\n                resolve({ body: response[\"body\"], headers: response[\"headers\"] });\r\n            }\r\n            else {\r\n                this.c8o.session.sort(response, headers, urlReq, parametersReq, headersReq)\r\n                    .then((res) => {\r\n                        if (res != true || parametersReq[C8oCore.SEQ_AUTO_LOGIN_OFF] === true) {\r\n                            if (returns_header) {\r\n                                resolve({ body: response[\"body\"], headers: response[\"headers\"] });\r\n                            }\r\n                            else {\r\n                                resolve(response.body);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.execHttpPosts(urlReq, parametersReq, headersReq, resolve, reject, returns_header)\r\n                        }\r\n                    })\r\n            }\r\n\r\n        }\r\n        else {\r\n            resolve(response.body);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Handle errors of http Posts\r\n     * @param error \r\n     * @param reject \r\n     */\r\n    private handleErrorHttpPost(error: any, reject: any, url = undefined) {\r\n        if (url != undefined) {\r\n            if (url.indexOf(\".Add\") == -1) {\r\n                this.c8o.network.init();\r\n            }\r\n        }\r\n        reject((new C8oHttpRequestException(C8oExceptionMessage.runHttpRequest(), error)));\r\n    }\r\n\r\n    /**\r\n     * Check type of file given in parameters\r\n     * 0 : No file to upload\r\n     * 1 : FileList Or File\r\n     * 2 : url when running in cordova\r\n     * @param {Object} parameters\r\n     * @return {number}\r\n     */\r\n    public checkFile(parameters: Object): number {\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    //noinspection JSUnfilteredForInLoop\r\n                    if (parameters[p][p1] instanceof FileList || parameters[p][p1] instanceof File || parameters[p][p1] instanceof Blob) {\r\n                        return 1;\r\n                    }\r\n                    else if (this.isCordova()) {\r\n                        if (parameters[p][p1] instanceof URL) {\r\n                            return 2;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof FileList || parameters[p] instanceof File || parameters[p] instanceof Blob) {\r\n                    return 1;\r\n                }\r\n                else if (this.isCordova()) {\r\n                    if (parameters[p] instanceof URL) {\r\n                        return 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Check if we are in cordova environment\r\n     * @return {boolean}\r\n     */\r\n    protected isCordova(): boolean {\r\n        if (this._isCordova == null) {\r\n            if (window[\"cordova\"] != undefined) {\r\n                this._isCordova = true;\r\n            }\r\n            else {\r\n                this._isCordova = false;\r\n            }\r\n        }\r\n        return this._isCordova;\r\n    }\r\n\r\n    /**\r\n     * Url encode parameters\r\n     * @param {Object} parameters\r\n     * @return {string}\r\n     */\r\n    public transformRequest(parameters: Object): string {\r\n        let str = [];\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    //noinspection JSUnfilteredForInLoop\r\n                    str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(parameters[p][p1]));\r\n                }\r\n            }\r\n            else {\r\n                str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(parameters[p]));\r\n            }\r\n        }\r\n        let query = str.join(\"&\");\r\n        // Add this to instruct Convertigo server to remove any name space in the jSON keys\r\n        // to prevent keys like this:  'namespace:key'\r\n        return (query + \"&__removeNamespaces=true\");\r\n    }\r\n\r\n    /**\r\n     * Transform FormData parameters\r\n     * @param {Object} parameters\r\n     * @return {FormData}\r\n     */\r\n    public transformRequestformdata(parameters: Object): FormData {\r\n        let formdata: FormData = new FormData();\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    if (parameters[p][p1] instanceof FileList) {\r\n                        for (var i = 0; i < parameters[p][p1].length; i++) {\r\n                            formdata.append(p, parameters[p][p1][i], parameters[p][p1][i].name);\r\n                        }\r\n                    }\r\n                    else if (parameters[p][p1] instanceof File || parameters[p][p1] instanceof Blob) {\r\n                        formdata.append(p, parameters[p][p1], parameters[p][p1].name);\r\n                    }\r\n                    else {\r\n                        formdata.append(p, parameters[p][p1])\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof FileList) {\r\n                    for (var j = 0; j < parameters[p].length; j++) {\r\n                        formdata.append(p, parameters[p][j], parameters[p][j].name);\r\n                    }\r\n                }\r\n                else if (parameters[p] instanceof File || parameters[p] instanceof Blob) {\r\n                    formdata.append(p, parameters[p], parameters[p].name);\r\n                }\r\n                else {\r\n                    formdata.append(p, parameters[p]);\r\n                }\r\n            }\r\n        }\r\n        return formdata;\r\n    }\r\n\r\n    /**\r\n     * Extract file from parameters and return and array containing a file and params\r\n     * @param {Object} parameters\r\n     * @return {any}\r\n     */\r\n    public transformRequestfileNative(parameters: Object): any {\r\n        let file: Array<any> = new Array();\r\n        let params: Object = new Object();\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    if (parameters[p][p1] instanceof URL) {\r\n                        file.push([p1, parameters[p][p1]]);\r\n                    }\r\n                    else {\r\n                        params[p1] = parameters[p][p1][\"href\"];\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof URL) {\r\n                    file.push([p, parameters[p][\"href\"]]);\r\n                }\r\n                else {\r\n                    params[p] = parameters[p];\r\n                }\r\n            }\r\n        }\r\n        return [file, params];\r\n    }\r\n\r\n    /**\r\n     * Handle the request\r\n     * @param {string} url\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    async handleRequest(url: string, parameters: Object, c8oResponseListener?: C8oResponseListener): Promise<any> {\r\n        if (parameters[\"__sequence\"] !== undefined) {\r\n            if (parameters[\"__sequence\"].indexOf(\"#\") !== -1) {\r\n                parameters[\"__sequence\"] = parameters[\"__sequence\"].substring(0, parameters[\"__sequence\"].indexOf(\"#\"));\r\n            }\r\n        }\r\n        switch (this.checkFile(parameters)) {\r\n            case 0: {\r\n                return this.httpPost(url, parameters);\r\n            }\r\n            case 1: {\r\n                let form = this.transformRequestformdata(parameters);\r\n                return this.uploadFileHttp(url, form, parameters, c8oResponseListener);\r\n            }\r\n            case 2: {\r\n                return this.uploadFilePluginNative(url, parameters, c8oResponseListener);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Upload file with native plugin\r\n     * @param {string} url\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    public uploadFilePluginNative(url: string, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        let progress: C8oProgress = new C8oProgress();\r\n        progress.pull = false;\r\n        let varNull: JSON = null;\r\n        let data = this.transformRequestfileNative(parameters);\r\n        let files = data[0];\r\n        let options = new window[\"FileUploadOptions\"]();\r\n        options.fileKey = files[0][0];\r\n        options.fileName = files[0][1].substr(files[0][1].lastIndexOf('/') + 1);\r\n        options.params = data[1];\r\n        let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        options.headers = headersObject;\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all([this.p1]).then(() => {\r\n                var ft = new window[\"FileTransfer\"]();\r\n                ft.onprogress = (progressEvent) => {\r\n                    if (progressEvent.lengthComputable) {\r\n                        this.handleProgress(progressEvent, progress, parameters, c8oResponseListener, varNull);\r\n                    }\r\n                };\r\n                ft.upload(files[0][1], encodeURI(url), ((resp => {\r\n                    resolve(resp);\r\n                })), ((err) => {\r\n                    reject(err);\r\n                }), options);\r\n            })\r\n                .catch(() => {\r\n                    var ft = new window[\"FileTransfer\"]();\r\n                    ft.onprogress = (progressEvent) => {\r\n                        if (progressEvent.lengthComputable) {\r\n                            this.handleProgress(progressEvent, progress, parameters, c8oResponseListener, varNull);\r\n                        }\r\n                    };\r\n                    ft.upload(files[0][1], encodeURI(url), ((resp => {\r\n                        resolve(resp);\r\n                    })), ((err) => {\r\n                        reject(err);\r\n                    }), options);\r\n                })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Upload File using an Http client\r\n     * @param {string} url\r\n     * @param {FormData} form\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    uploadFileHttp(url: string, form: FormData, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        let progress: C8oProgress = new C8oProgress();\r\n        progress.pull = false;\r\n        let varNull: JSON = null;\r\n\r\n        if (this.firstCall) {\r\n            this.p1 = new Promise((resolve) => {\r\n                this.firstCall = false;\r\n                this.getuploadRequester(url, form, headersObject)\r\n                    .subscribe(\r\n                        event => {\r\n                            this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                        },\r\n                        error => {\r\n                            this.handleErrorFileUpload(error, resolve);\r\n                        });\r\n            });\r\n            return this.p1;\r\n        }\r\n        else {\r\n            return new Promise((resolve, reject) => {\r\n                Promise.all([this.p1]).then(() => {\r\n                    this.getuploadRequester(url, form, headersObject)\r\n                        .subscribe(\r\n                            event => {\r\n                                this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                            },\r\n                            error => {\r\n                                this.handleErrorFileUpload(error, resolve);\r\n                            });\r\n                })\r\n                    .catch(() => {\r\n                        this.getuploadRequester(url, form, headersObject)\r\n                            .subscribe(\r\n                                event => {\r\n                                    this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                                },\r\n                                error => {\r\n                                    this.handleErrorFileUpload(error, resolve);\r\n                                });\r\n                    });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handle FileuploadResponses\r\n     * @param event \r\n     * @param progress \r\n     * @param parameters \r\n     * @param c8oResponseListener \r\n     * @param varNull \r\n     * @param resolve \r\n     */\r\n    public handleResponseFileUpload(event: any, progress: C8oProgress, parameters: Object, c8oResponseListener: C8oResponseListener, varNull: any, resolve): void {\r\n        if (!this.js) {\r\n            if (event.type === 1) {\r\n                this.handleProgress(event, progress, parameters, c8oResponseListener, varNull);\r\n            } else if (this.isHttpResponse(event)) {\r\n                resolve(event.body);\r\n            }\r\n        }\r\n        else {\r\n            if (event.type == \"progress\") {\r\n                this.handleProgress(event.response, progress, parameters, c8oResponseListener, varNull);\r\n            }\r\n            else {\r\n                resolve(event.response);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle errors for file upload\r\n     * @param error \r\n     * @param resolve \r\n     */\r\n    private handleErrorFileUpload(error: any, resolve: any): void {\r\n        resolve({ \"error\": (new C8oHttpRequestException(C8oExceptionMessage.runHttpRequest(), error)) });\r\n    }\r\n\r\n    /**\r\n     * Handle progress\r\n     * @param event\r\n     * @param {C8oProgress} progress\r\n     * @param parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @param {JSON} varNull\r\n     */\r\n    handleProgress(event: any, progress: C8oProgress, parameters: any, c8oResponseListener: C8oResponseListener, varNull: JSON): void {\r\n        progress.current = event.loaded;\r\n        progress.total = event.total;\r\n        if (event.loaded != event.total) {\r\n            progress.finished = false;\r\n        }\r\n        else {\r\n            progress.finished = true;\r\n        }\r\n        parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n        (c8oResponseListener as C8oResponseJsonListener).onJsonResponse(varNull, parameters);\r\n\r\n    }\r\n\r\n    /**\r\n    * get headers;\r\n    * @param object headers object\r\n    */\r\n    public abstract getHeaders(object): any;\r\n\r\n    /**\r\n     * Post with progress\r\n     * @param url the url to post\r\n     * @param form the form data to post\r\n     * @param headersObject Headers to use\r\n     */\r\n    public abstract getuploadRequester(url: string, form: FormData, headersObject: any): Observable<any>;\r\n\r\n    /**\r\n     * test type of response\r\n     * @param event any\r\n     */\r\n    public abstract isHttpResponse(event: any): boolean;\r\n}\r\n","import {C8oBase} from \"./c8oBase\";\r\nimport {C8oLogLevel} from \"./c8oLogLevel\";\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * Contains optional parameters of a C8o class instantiation.<br/>\r\n * Note that setters return the setting instance thereby C8oSettings can be instantiate like that:<br/>\r\n * new C8oSettings().setTimeout(5000).setTrustAllCertificates(true).setUseEncryption(true);\r\n *\r\n */\r\nexport class C8oSettings extends C8oBase {\r\n\r\n    constructor(c8oSettings: C8oSettings = null) {\r\n        super();\r\n        if (c8oSettings != null) {\r\n            if (c8oSettings != null) {\r\n                this.copy(c8oSettings);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone C8osettings object\r\n     * @return {C8oSettings}\r\n     */\r\n    public clone(): C8oSettings {\r\n        return new C8oSettings(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the normalizeParameters. define if we normalize parameters of every calls using JSON.parse(JSON.stringify(parameters))<br/>\r\n     * @param normalize boolean.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n     public setUseWorker(worker: boolean): C8oSettings {\r\n        this._useworker = worker;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the normalizeParameters. define if we normalize parameters of every calls using JSON.parse(JSON.stringify(parameters))<br/>\r\n     * @param normalize boolean.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setNormalizeParameters(normalize: boolean): C8oSettings {\r\n        this._normalizeParameters = normalize;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the if session has to be maintain alive<br/>\r\n     * @param keepAlive if session has to be keep Alive\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setKeepSessionAlive(keepAlive: boolean): C8oSettings {\r\n        this._keepSessionAlive = keepAlive;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets if the error convertigo is throw in fail or not<br/>\r\n     * @param errorConvertigoIntoFail boolean\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setErrorConvertigoIntoFail(errorConvertigoIntoFail: boolean): C8oSettings {\r\n        this._errorConvertigoIntoFail = errorConvertigoIntoFail;\r\n        return this;\r\n    }\r\n\r\n\r\n    \r\n\r\n    /**\r\n     * Sets the if base has to be reseted on dectecting diffrent versions<br/>\r\n     * @param resetBase if you to able reset base\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setDisableResetBase(resetBase: boolean): C8oSettings {\r\n        this._resetBase = resetBase;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the if base has to be prefixed by user name<br/>\r\n     * @param prefixBase if you to able prefix base\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setEnablePrefixBase(prefixBase: boolean): C8oSettings {\r\n        this._prefixBase = prefixBase;\r\n        return this;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Sets the endpoint (override env.json).<br/>\r\n     * @param endpoint The endpoint.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setEndPoint(endpoint: string): C8oSettings {\r\n        this._endpointSettings = endpoint;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the connection timeout to Convertigo in milliseconds. A value of zero means the timeout is not used.<br/>\r\n     * Default is <b>0</b>.\r\n     * @param timeout The timeout.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setTimeout(timeout: number): C8oSettings {\r\n        if (timeout <= 0) {\r\n            timeout = -1;\r\n        }\r\n        this._timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Add a header\r\n     * @param name The name of header.\r\n     * @param value The value of header.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public addHeader(name: string, value: string) {\r\n        this._headers[name] = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * addClientCertificate\r\n     * @param {string} anyCertificate\r\n     * @param {string} password\r\n     * @return {C8oSettings}\r\n     */\r\n    public addClientCertificate(anyCertificate: string, password: string): C8oSettings;\r\n\r\n    /**\r\n     * addClientCertificate\r\n     * @param {number} anyCertificate\r\n     * @param {string} password\r\n     * @return {C8oSettings}\r\n     */\r\n    public addClientCertificate(anyCertificate: number, password: string): C8oSettings;\r\n\r\n    /**\r\n     * addClientCertificate\r\n     * @param anyCertificate\r\n     * @param {string} password\r\n     * @return {C8oSettings}\r\n     */\r\n    public addClientCertificate(anyCertificate: any, password: string): C8oSettings {\r\n        if (typeof anyCertificate === \"string\") {\r\n            if (this._clientCertificateFiles == null) {\r\n                this._clientCertificateFiles = {};\r\n            }\r\n            this._clientCertificateFiles[anyCertificate] = password;\r\n        } else if (typeof anyCertificate === \"number\") {\r\n            if (this._clientCertificateBinaries == null) {\r\n                this._clientCertificateBinaries = {};\r\n            }\r\n            this._clientCertificateBinaries[anyCertificate] = password;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a new cookie to the initial cookies send to the Convertigo server.\r\n     * @param name The name of the new cookie.\r\n     * @param value The value of the new cookie.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public addCookie(name: string, value: string): C8oSettings {\r\n        if (this._cookies == null) {\r\n            this._cookies = {};\r\n        }\r\n        this._cookies[name] = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a value indicating if logs are sent to the Convertigo server.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setLogRemote(logRemote: boolean): C8oSettings {\r\n        this._logRemote = logRemote;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a value indicating the log level you want in the device console\r\n     * 0: ALL, 1: NONE, 2: TRACE, 3: DEBUG, 4: INFO, 5: WARN, 6: ERROR, 7: FATAL\r\n     * or use the android.util.Log constants\r\n     * Default is <b>0</b>.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public  setLogLevelLocal(logLevelLocal: C8oLogLevel): C8oSettings {\r\n        this._logLevelLocal = logLevelLocal;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setLogC8o\r\n     * @param {boolean} logC8o\r\n     * @return {C8oSettings}\r\n     */\r\n    public setLogC8o(logC8o: boolean): C8oSettings {\r\n        this._logC8o = logC8o;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setLogOnFail\r\n     * @param {(exception: Error, parameters: Object) => void} logOnFail\r\n     * @return {C8oSettings}\r\n     */\r\n    public setLogOnFail(logOnFail: (exception: Error, parameters: Object) => void): C8oSettings {\r\n        this._logOnFail = logOnFail;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specify the default FullSync database name. Must match a Convertigo Server\r\n     * FullSync connector name\r\n     *\r\n     * @param defaultDatabaseName: string\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setDefaultDatabaseName(defaultDatabaseName: string): C8oSettings {\r\n        this._defaultDatabaseName = defaultDatabaseName;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setAuthenticationCookieValue\r\n     * @param {string} authenticationCookieValue\r\n     * @return {C8oSettings}\r\n     */\r\n    public setAuthenticationCookieValue(authenticationCookieValue: string): C8oSettings {\r\n        this._authenticationCookieValue = authenticationCookieValue;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setFullSyncServerUrl\r\n     * @param {string} fullSyncServerUrl\r\n     * @return {C8oSettings}\r\n     */\r\n    public setFullSyncServerUrl(fullSyncServerUrl: string): C8oSettings {\r\n        this._fullSyncServerUrl = fullSyncServerUrl;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setFullSyncUsername\r\n     * @param {string} fullSyncUsername\r\n     * @return {C8oSettings}\r\n     */\r\n    public setFullSyncUsername(fullSyncUsername: string): C8oSettings {\r\n        this._fullSyncUsername = fullSyncUsername;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setFullSyncPassword\r\n     * @param {string} fullSyncPassword\r\n     * @return {C8oSettings}\r\n     */\r\n    public setFullSyncPassword(fullSyncPassword: string): C8oSettings {\r\n        this._fullSyncPassword = fullSyncPassword;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setFullSyncLocalSuffix\r\n     * @param {string} fullSyncLocalSuffix\r\n     * @return {C8oSettings}\r\n     */\r\n    public setFullSyncLocalSuffix(fullSyncLocalSuffix: string): C8oSettings {\r\n        this._fullSyncLocalSuffix = fullSyncLocalSuffix;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set if c8o calls variables are encrypted or not\r\n     *\r\n     * @param useEncryption\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setUseEncryption(useEncryption: boolean): C8oSettings {\r\n        this._useEncryption = useEncryption;\r\n        return this;\r\n    }\r\n}\r\n","/**\r\n * Defines whether the response should be retrieved from local cache or from Convertigo server when the device can access the network.<br/>\r\n * When the device has no network access, the local cache response is used, if existing.\r\n */\r\nexport class Priority {\r\n    public isAvailable: boolean;\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static SERVER: Priority = new Priority(false);\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static LOCAL: Priority = new Priority(true);\r\n\r\n    constructor(isAvailable: boolean) {\r\n        this.isAvailable = isAvailable;\r\n\r\n    }\r\n}\r\n","import {C8o} from \"./c8o.service\";\r\nimport {C8oFullSyncCbl, C8oHttpInterfaceCore, C8oResponseJsonListener, C8oResponseListener, C8oProgress,C8oHttpRequestException,C8oExceptionMessage} from \"../c8osdk-js-core/src/index\";\r\nimport {HttpEventType, HttpHeaders, HttpRequest, HttpResponse} from \"@angular/common/http\";\r\nimport { Observable } from 'rxjs';\r\nexport class C8oHttpInterface extends C8oHttpInterfaceCore{\r\n    \r\n    constructor(c8o: C8o) {\r\n        super(c8o, false);\r\n    }\r\n\r\n    /**\r\n     * get headers;\r\n     * @param object headers object\r\n     */\r\n    public getHeaders(object):any{\r\n        return new HttpHeaders(object);\r\n    }\r\n\r\n    /**\r\n     * Angular implementation to post with progress\r\n     * @param url the url to post\r\n     * @param form the form data to post\r\n     * @param headersObject Headers to use\r\n     */\r\n    public getuploadRequester(url:string, form: FormData, headersObject:any):Observable<any>{//, progress: C8oProgress, parameters: Object, c8oResponseListener: C8oResponseListener, varNull:any, resolve:any) {\r\n        let headers = new HttpHeaders(headersObject);\r\n        const httpRequest = new HttpRequest('POST', url, form, {reportProgress: true, withCredentials: true, headers: headers});\r\n        return this.c8o.httpPublic.request(httpRequest);\r\n    }\r\n    \r\n    /**\r\n     * test type of request\r\n     * @param event any\r\n     */\r\n    public isHttpResponse(event:any):boolean{\r\n        return (event instanceof HttpResponse)\r\n    }\r\n\r\n    \r\n\r\n    \r\n}","import {C8oCore} from \"../c8osdk-js-core/src/index\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {C8oHttpInterface} from \"./c8oHttpInterface.service\";\r\n\r\n@Injectable()\r\nexport class C8o extends C8oCore {\r\n\r\n    constructor(private http: HttpClient) {\r\n        super();\r\n        this._http = http;\r\n    }\r\n\r\n    /**\r\n     * get current sdk version\r\n     */\r\n    public get sdkVersion(): string {\r\n        return \"3.0.16-beta49\";\r\n    }\r\n    /**\r\n     * Method to bastract http get\r\n     * @param uri the uri for given request\r\n     */\r\n    public httpGetObservable(uri){\r\n        return this.httpPublic.get(uri);\r\n    }\r\n\r\n    /**\r\n     * Init http interface in client sdk\r\n     */\r\n    public initC8oHttInterface(){\r\n        this.httpInterface = new C8oHttpInterface(this);\r\n    }\r\n}","import {C8oUtilsCore} from \"../c8osdk-js-core/src/index\";\r\n//import {C8oUtilsCore} from \"c8osdkjscore\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\n\r\n\r\n@Injectable()\r\nexport class C8oUtils extends C8oUtilsCore{\r\n\r\n    public constructor(private http: HttpClient) {\r\n        super();\r\n        this.http = http;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpXsrfTokenExtractor, HttpHandler, HttpRequest, HttpEvent, HttpResponse, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, tap } from 'rxjs/operators';\r\nimport {C8o} from \"./c8o.service\";\r\n\r\n@Injectable()\r\nexport class HttpXsrfInterceptor implements HttpInterceptor {\r\n  private headerName: string = \"x-xsrf-token\";\r\n  private fetch: string = \"Fetch\";\r\n  constructor(private tokenExtractor: HttpXsrfTokenExtractor, private c8o: C8o) {\r\n    this.c8o.xsrfUsed = true;\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // get stored headerValue or fetch if the is no stored headerValue\r\n    const headerValue = window.localStorage.getItem(this.headerName) != undefined ? window.localStorage.getItem(this.headerName) : this.fetch;\r\n    // clone request adding xsrf header\r\n    req = req.clone({ headers: req.headers.set(this.headerName, headerValue)});\r\n    // re-execute request, and get HttResponses or HttpErrorResponses\r\n    return next.handle(req)\r\n    .pipe(\r\n      filter(event => event instanceof HttpResponse || event instanceof HttpErrorResponse),\r\n      tap((event: HttpResponse<any>) => {\r\n        // get and store new xsrf value\r\n        const xsrfResponseHeader = event[\"headers\"][\"get\"](this.headerName);\r\n        xsrfResponseHeader != undefined ? window.localStorage.setItem(this.headerName, xsrfResponseHeader) : null;\r\n      })\r\n    );\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of c8osdkangular\r\n */\r\nexport * from \"./lib/c8o.service\";\r\nexport * from \"./lib/c8oUtils.service\";\r\nexport * from \"./lib/c8oHttpInterface.service\";\r\nexport * from \"./lib/c8oHttpxsrfInterceptor.service\";\r\n//export * from \"c8osdkjscore\";\r\nexport * from \"./c8osdk-js-core/src/index\";\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["PouchDB"],"mappings":"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"}},"fesm2015":{"code":"import { __awaiter } from 'tslib';\nimport PouchDB$1 from 'pouchdb-browser';\nimport PouchDBFind from 'pouchdb-find';\nimport PouchDBQuickSearch from 'pouchdb-quick-search';\nimport PouchDBWorker from 'worker-pouch';\nimport * as rxjs0 from 'rxjs';\nimport { Observable, Subject, timer, throwError } from 'rxjs';\nimport { debounce, retry, timeout, filter, tap } from 'rxjs/operators';\nimport * as rxjs1 from 'rxjs/observable/fromPromise';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nclass C8oLogLevel {\r\n    constructor(name, priority) {\r\n        this.name = name;\r\n        this.priority = priority;\r\n    }\r\n    static getC8oLogLevel(name) {\r\n        for (let i = 0; i <= C8oLogLevel.C8O_LOG_LEVELS.length; i++) {\r\n            if (C8oLogLevel.C8O_LOG_LEVELS[i].name === name) {\r\n                return C8oLogLevel.C8O_LOG_LEVELS[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n// private static JSON_KEY_REMOTE_LOG_LEVEL: string = \"remoteLogLevel\";\r\nC8oLogLevel.NULL = new C8oLogLevel(\"\", 0);\r\nC8oLogLevel.NONE = new C8oLogLevel(\"none\", 1);\r\nC8oLogLevel.TRACE = new C8oLogLevel(\"trace\", 2);\r\nC8oLogLevel.DEBUG = new C8oLogLevel(\"debug\", 3);\r\nC8oLogLevel.INFO = new C8oLogLevel(\"info\", 4);\r\nC8oLogLevel.WARN = new C8oLogLevel(\"warn\", 5);\r\nC8oLogLevel.ERROR = new C8oLogLevel(\"error\", 6);\r\nC8oLogLevel.FATAL = new C8oLogLevel(\"fatal\", 7);\r\nC8oLogLevel.C8O_LOG_LEVELS = [C8oLogLevel.NULL, C8oLogLevel.NONE, C8oLogLevel.TRACE, C8oLogLevel.DEBUG, C8oLogLevel.INFO, C8oLogLevel.WARN, C8oLogLevel.ERROR, C8oLogLevel.FATAL];\n\nclass C8oBase {\r\n    constructor() {\r\n        this._timeout = 3600000;\r\n        // protected _trustAllCertificates: boolean = false;\r\n        this._cookies = {};\r\n        /*Log*/\r\n        this._logRemote = true;\r\n        this._initialLogRemote = true;\r\n        this._logLevelLocal = C8oLogLevel.NONE;\r\n        this._logC8o = false;\r\n        /* FullSync */\r\n        this._defaultDatabaseName = null;\r\n        this._authenticationCookieValue = null;\r\n        this._fullSyncLocalSuffix = null;\r\n        this._fullSyncServerUrl = \"http://localhost:5984\";\r\n        /* Encryption */\r\n        this._useEncryption = false;\r\n        this._disableSSL = false;\r\n        //Dates\r\n        this._useworker = false;\r\n        this._keepSessionAlive = true;\r\n        this._errorConvertigoIntoFail = false;\r\n        this._resetBase = true;\r\n        this._prefixBase = false;\r\n        this._headers = {};\r\n    }\r\n    /** Getters **/\r\n    /**\r\n     * Gets if normalize parameters.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The timeout.\r\n     */\r\n    get usewroker() {\r\n        return this._useworker;\r\n    }\r\n    /**\r\n     * Gets if normalize parameters.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The timeout.\r\n     */\r\n    get normalizeParameters() {\r\n        return this._normalizeParameters;\r\n    }\r\n    /**\r\n     * Gets if session has to be keep alive.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The KeepSessionAlive status.\r\n     */\r\n    get keepSessionAlive() {\r\n        return this._keepSessionAlive;\r\n    }\r\n    /**\r\n     * Gets if error convertigo are thrown into fail.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The errorConvertigoIntoFail status.\r\n     */\r\n    get errorConvertigoIntoFail() {\r\n        return this._errorConvertigoIntoFail;\r\n    }\r\n    /**\r\n     * Gets if reset database is disabled.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The disable reset base status.\r\n     */\r\n    get resetBase() {\r\n        return this._resetBase;\r\n    }\r\n    /**\r\n     * Gets if we have to prefix databases with user name.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The prefix base status.\r\n     */\r\n    get prefixBase() {\r\n        return this._prefixBase;\r\n    }\r\n    /**\r\n     * Gets the connection timeout to Convertigo in milliseconds. A value of zero means the timeout is not used.<br/>\r\n     * Default is <b>0</b>.\r\n     * @returns The timeout.\r\n     */\r\n    get timeout() {\r\n        return this._timeout;\r\n    }\r\n    /**\r\n     * Gets a value indicating whether https calls trust all certificates or not.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns <b>true</b> if https calls trust all certificates; otherwise, <b>false</b>.\r\n     */\r\n    /*public get trustAllCertificates(): boolean {\r\n        return this._trustAllCertificates;\r\n    }*/\r\n    /**\r\n     * Gets initial cookies to send to the Convertigo server.<br/>\r\n     * Default is <b>null</b>.\r\n     * @returns List of cookies.\r\n     */\r\n    get cookies() {\r\n        return this._cookies;\r\n    }\r\n    /**\r\n     * Gets a value indicating if logs are sent to the Convertigo server.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns <b>true</b> if logs are sent to the Convertigo server; otherwise, <b>false</b>.\r\n     */\r\n    get logRemote() {\r\n        return this._logRemote;\r\n    }\r\n    /**\r\n     * Gets a value indicating logs level local\r\n     *\r\n     * @returns C8oLogLevel object\r\n     */\r\n    get logLevelLocal() {\r\n        return this._logLevelLocal;\r\n    }\r\n    get logC8o() {\r\n        return this._logC8o;\r\n    }\r\n    get defaultDatabaseName() {\r\n        return this._defaultDatabaseName;\r\n    }\r\n    get authenticationCookieValue() {\r\n        return this._authenticationCookieValue;\r\n    }\r\n    get fullSyncLocalSuffix() {\r\n        return this._fullSyncLocalSuffix;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get fullSyncServerUrl() {\r\n        return this._fullSyncServerUrl;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get fullSyncUsername() {\r\n        return this._fullSyncUsername;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get fullSyncPassword() {\r\n        return this._fullSyncPassword;\r\n    }\r\n    get logOnFail() {\r\n        return this._logOnFail;\r\n    }\r\n    /**\r\n     * Gets the endpoint define in C8oSettings<br/>\r\n     * @returns The current <b>endpoint</b>, if defined by c8oSettings.\r\n     */\r\n    get endpoint() {\r\n        return this._endpointSettings;\r\n    }\r\n    get headers() {\r\n        return this._headers;\r\n    }\r\n    copy(c8oBase) {\r\n        if (c8oBase !== undefined) {\r\n            /** HTTP **/\r\n            this._timeout = c8oBase._timeout;\r\n            // this._trustAllCertificates = c8oBase._trustAllCertificates;\r\n            if (this.cookies == null) {\r\n                this._cookies = {};\r\n            }\r\n            if (c8oBase.cookies !== null) {\r\n                this._cookies = c8oBase._cookies;\r\n            }\r\n            /** Log **/\r\n            this._logRemote = c8oBase.logRemote;\r\n            this._initialLogRemote = c8oBase.logRemote;\r\n            this._logLevelLocal = c8oBase.logLevelLocal;\r\n            this._logC8o = c8oBase.logC8o;\r\n            this._logOnFail = c8oBase.logOnFail;\r\n            /** FullSync **/\r\n            this._defaultDatabaseName = c8oBase.defaultDatabaseName;\r\n            this._authenticationCookieValue = c8oBase.authenticationCookieValue;\r\n            this._fullSyncLocalSuffix = c8oBase.fullSyncLocalSuffix;\r\n            this._fullSyncServerUrl = c8oBase.fullSyncServerUrl;\r\n            this._fullSyncUsername = c8oBase.fullSyncUsername;\r\n            this._fullSyncPassword = c8oBase.fullSyncPassword;\r\n            this._headers = c8oBase._headers;\r\n            /** Date **/\r\n            this._normalizeParameters = c8oBase._normalizeParameters;\r\n            /**Keep ALive */\r\n            this._keepSessionAlive = c8oBase._keepSessionAlive;\r\n            /** Reset base */\r\n            this._resetBase = c8oBase._resetBase;\r\n            /** Reset base */\r\n            this._prefixBase = c8oBase._prefixBase;\r\n            this._errorConvertigoIntoFail = c8oBase._errorConvertigoIntoFail;\r\n            this._useworker = c8oBase.usewroker;\r\n        }\r\n    }\r\n}\n\n// @dynamic\r\nclass C8oUtilsCore {\r\n    constructor() {\r\n    }\r\n    /**\r\n     * Returns the class name of the object as a String, if the object is null then returns the String \"null\".\r\n     *\r\n     * @param object\r\n     * @returns string\r\n     */\r\n    static getObjectClassName(object) {\r\n        return typeof object;\r\n    }\r\n    static isValidUrl(url) {\r\n        return /^(http|https):\\/\\/[^ \"]+$/.test(url.toString());\r\n    }\r\n    /**\r\n     * returns 128 bits hash using MD5 algo\r\n     * @param str any string\r\n     */\r\n    static MD5(str) {\r\n        const MD5 = (d) => { var r = M(V(Y(X(d), 8 * d.length))); return r.toLowerCase(); };\r\n        function M(d) {\r\n            for (var _, m = \"0123456789ABCDEF\", f = \"\", r = 0; r < d.length; r++)\r\n                _ = d.charCodeAt(r), f += m.charAt(_ >>> 4 & 15) + m.charAt(15 & _);\r\n            return f;\r\n        }\r\n        function X(d) {\r\n            for (var _ = Array(d.length >> 2), m = 0; m < _.length; m++)\r\n                _[m] = 0;\r\n            for (m = 0; m < 8 * d.length; m += 8)\r\n                _[m >> 5] |= (255 & d.charCodeAt(m / 8)) << m % 32;\r\n            return _;\r\n        }\r\n        function V(d) {\r\n            for (var _ = \"\", m = 0; m < 32 * d.length; m += 8)\r\n                _ += String.fromCharCode(d[m >> 5] >>> m % 32 & 255);\r\n            return _;\r\n        }\r\n        function Y(d, _) {\r\n            d[_ >> 5] |= 128 << _ % 32, d[14 + (_ + 64 >>> 9 << 4)] = _;\r\n            for (var m = 1732584193, f = -271733879, r = -1732584194, i = 271733878, n = 0; n < d.length; n += 16) {\r\n                var h = m, t = f, g = r, e = i;\r\n                f = md5_ii(f = md5_ii(f = md5_ii(f = md5_ii(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_ff(f = md5_ff(f = md5_ff(f = md5_ff(f, r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 0], 7, -680876936), f, r, d[n + 1], 12, -389564586), m, f, d[n + 2], 17, 606105819), i, m, d[n + 3], 22, -1044525330), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 4], 7, -176418897), f, r, d[n + 5], 12, 1200080426), m, f, d[n + 6], 17, -1473231341), i, m, d[n + 7], 22, -45705983), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 8], 7, 1770035416), f, r, d[n + 9], 12, -1958414417), m, f, d[n + 10], 17, -42063), i, m, d[n + 11], 22, -1990404162), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 12], 7, 1804603682), f, r, d[n + 13], 12, -40341101), m, f, d[n + 14], 17, -1502002290), i, m, d[n + 15], 22, 1236535329), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 1], 5, -165796510), f, r, d[n + 6], 9, -1069501632), m, f, d[n + 11], 14, 643717713), i, m, d[n + 0], 20, -373897302), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 5], 5, -701558691), f, r, d[n + 10], 9, 38016083), m, f, d[n + 15], 14, -660478335), i, m, d[n + 4], 20, -405537848), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 9], 5, 568446438), f, r, d[n + 14], 9, -1019803690), m, f, d[n + 3], 14, -187363961), i, m, d[n + 8], 20, 1163531501), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 13], 5, -1444681467), f, r, d[n + 2], 9, -51403784), m, f, d[n + 7], 14, 1735328473), i, m, d[n + 12], 20, -1926607734), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 5], 4, -378558), f, r, d[n + 8], 11, -2022574463), m, f, d[n + 11], 16, 1839030562), i, m, d[n + 14], 23, -35309556), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 1], 4, -1530992060), f, r, d[n + 4], 11, 1272893353), m, f, d[n + 7], 16, -155497632), i, m, d[n + 10], 23, -1094730640), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 13], 4, 681279174), f, r, d[n + 0], 11, -358537222), m, f, d[n + 3], 16, -722521979), i, m, d[n + 6], 23, 76029189), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 9], 4, -640364487), f, r, d[n + 12], 11, -421815835), m, f, d[n + 15], 16, 530742520), i, m, d[n + 2], 23, -995338651), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 0], 6, -198630844), f, r, d[n + 7], 10, 1126891415), m, f, d[n + 14], 15, -1416354905), i, m, d[n + 5], 21, -57434055), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 12], 6, 1700485571), f, r, d[n + 3], 10, -1894986606), m, f, d[n + 10], 15, -1051523), i, m, d[n + 1], 21, -2054922799), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 8], 6, 1873313359), f, r, d[n + 15], 10, -30611744), m, f, d[n + 6], 15, -1560198380), i, m, d[n + 13], 21, 1309151649), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 4], 6, -145523070), f, r, d[n + 11], 10, -1120210379), m, f, d[n + 2], 15, 718787259), i, m, d[n + 9], 21, -343485551), m = safe_add(m, h), f = safe_add(f, t), r = safe_add(r, g), i = safe_add(i, e);\r\n            }\r\n            return Array(m, f, r, i);\r\n        }\r\n        function md5_cmn(d, _, m, f, r, i) { return safe_add(bit_rol(safe_add(safe_add(_, d), safe_add(f, i)), r), m); }\r\n        function md5_ff(d, _, m, f, r, i, n) { return md5_cmn(_ & m | ~_ & f, d, _, r, i, n); }\r\n        function md5_gg(d, _, m, f, r, i, n) { return md5_cmn(_ & f | m & ~f, d, _, r, i, n); }\r\n        function md5_hh(d, _, m, f, r, i, n) { return md5_cmn(_ ^ m ^ f, d, _, r, i, n); }\r\n        function md5_ii(d, _, m, f, r, i, n) { return md5_cmn(m ^ (_ | ~f), d, _, r, i, n); }\r\n        function safe_add(d, _) { var m = (65535 & d) + (65535 & _); return (d >> 16) + (_ >> 16) + (m >> 16) << 16 | 65535 & m; }\r\n        function bit_rol(d, _) { return d << _ | d >>> 32 - _; }\r\n        return MD5(str);\r\n    }\r\n    /**\r\n     *\r\n     * @param str any string\r\n     */\r\n    static MD5ArrayBuffer(str) {\r\n        const MD5str = C8oUtilsCore.MD5(str);\r\n        return Buffer.from(MD5str, 'utf-8').slice(0, 16);\r\n    }\r\n    static getNewGUIDString() {\r\n        if (window[\"device\"] != undefined) {\r\n            let platform = window[\"device\"][\"platform\"];\r\n            platform = platform.substring(0, 3);\r\n            let uuid = platform + \"-\" + window[\"device\"][\"uuid\"];\r\n            return uuid;\r\n        }\r\n        else {\r\n            let uuidStored = localStorage.getItem(\"__c8o_uuid\");\r\n            if (uuidStored != undefined && uuidStored != \"\") {\r\n                return uuidStored;\r\n            }\r\n            else {\r\n                let platform = \"web-\";\r\n                let d = new Date().getTime();\r\n                let uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\r\n                    const r = (d + Math.random() * 16) % 16 | 0;\r\n                    d = Math.floor(d / 16);\r\n                    return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\r\n                });\r\n                uuid = platform + uuid;\r\n                localStorage.setItem(\"__c8o_uuid\", uuid);\r\n                return uuid;\r\n            }\r\n        }\r\n    }\r\n    /** TAG Parameter **/\r\n    static getParameter(parameters, name, useName) {\r\n        for (let _i = 0; _i < Object.keys(parameters).length; _i++) {\r\n            const parameterName = Object.keys(parameters)[_i];\r\n            if ((name === parameterName) || (useName && name === this.USE_PARAMETER_IDENTIFIER + parameterName)) {\r\n                const obj = {};\r\n                obj[Object.keys(parameters)[_i]] = parameters[Object.keys(parameters)[_i]];\r\n                return obj;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Searches in the list the parameter with this specific name (or the same name with the prefix '_use_') and returns it.<br/>\r\n     * Returns null if the parameter is not found.\r\n     *\r\n     * @param parameters\r\n     * @param name\r\n     * @param useName\r\n     * @returns string\r\n     */\r\n    static getParameterStringValue(parameters, name, useName) {\r\n        const parameter = C8oUtilsCore.getParameter(parameters, name, useName);\r\n        if (parameter != null) {\r\n            return \"\" + parameter[name];\r\n        }\r\n        return null;\r\n    }\r\n    static getParameterObjectValue(parameters, name, useName = false) {\r\n        //noinspection UnnecessaryLocalVariableJS\r\n        const parameters2 = parameters;\r\n        const parameter = C8oUtilsCore.getParameter(parameters2, name, useName);\r\n        if (parameter != null) {\r\n            return parameter[name];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    static peekParameterStringValue(parameters, name, exceptionIfMissing) {\r\n        //noinspection UnnecessaryLocalVariableJS\r\n        const parameters2 = parameters;\r\n        const value = this.getParameterStringValue(parameters2, name, false);\r\n        if (value == null) {\r\n            if (exceptionIfMissing) {\r\n                throw new Error(\"The parameter '\" + name + \"' is missing\");\r\n            }\r\n        }\r\n        else {\r\n            delete parameters[name];\r\n        }\r\n        return value;\r\n    }\r\n    static peekParameterObjectValue(parameters, name, exceptionIfMissing) {\r\n        const parameters2 = parameters;\r\n        const value = this.getParameterObjectValue(parameters2, name, false);\r\n        if (value == null) {\r\n            if (exceptionIfMissing) {\r\n                throw new Error(\"The parameter '\" + name + \"' is missing\");\r\n            }\r\n        }\r\n        else {\r\n            delete parameters2[name];\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * Serializes a c8o call request thanks to its parameters and response type.\r\n     *\r\n     * @param parameters\r\n     * @param responseType\r\n     * @returns string\r\n     * @throws C8oException\r\n     */\r\n    static identifyC8oCallRequest(parameters, responseType) {\r\n        return responseType + JSON.stringify(parameters);\r\n    }\r\n    static checkHeaderArgument(response, argument) {\r\n        return response.headers.get(argument);\r\n    }\r\n}\r\n/** FullSync parameters prefix. **/\r\nC8oUtilsCore.USE_PARAMETER_IDENTIFIER = \"_use_\";\r\nclass Queue {\r\n    constructor() {\r\n        this._store = [];\r\n    }\r\n    push(val) {\r\n        this._store.push(val);\r\n    }\r\n    pop() {\r\n        return this._store.shift();\r\n    }\r\n    count() {\r\n        return this._store.length;\r\n    }\r\n}\r\nclass Semaphore {\r\n    constructor(max) {\r\n        this.counter = 0;\r\n        this.waiting = [];\r\n        this.max = max;\r\n    }\r\n    take() {\r\n        if (this.waiting.length > 0 && this.counter < this.max) {\r\n            this.counter++;\r\n            let promise = this.waiting.shift();\r\n            promise.resolve();\r\n        }\r\n    }\r\n    acquire() {\r\n        if (this.counter < this.max) {\r\n            this.counter++;\r\n            return new Promise(resolve => {\r\n                resolve();\r\n            });\r\n        }\r\n        else {\r\n            return new Promise((resolve, err) => {\r\n                this.waiting.push({ resolve: resolve, err: err });\r\n            });\r\n        }\r\n    }\r\n    release(arg = null) {\r\n        this.counter--;\r\n        this.take();\r\n    }\r\n    purge() {\r\n        let unresolved = this.waiting.length;\r\n        for (let i = 0; i < unresolved; i++) {\r\n            this.waiting[i].err('Task has been purged.');\r\n        }\r\n        this.counter = 0;\r\n        this.waiting = [];\r\n        return unresolved;\r\n    }\r\n}\n\n/**\r\n * Thrown specific exceptions to Convertigo.\r\n */\r\nclass C8oException extends Error {\r\n    //noinspection JSUnusedLocalSymbols\r\n    constructor(message, cause = null, all = false) {\r\n        if (cause == null) {\r\n            super(message);\r\n            this.message = message;\r\n            // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n            Object.setPrototypeOf(this, C8oException.prototype);\r\n        }\r\n        else {\r\n            super(message);\r\n            this.message = message;\r\n            this._cause = cause;\r\n            // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n            Object.setPrototypeOf(this, C8oException.prototype);\r\n        }\r\n    }\r\n    get cause() {\r\n        return this._cause;\r\n    }\r\n    toJSON() {\r\n        var alt = {};\r\n        Object.getOwnPropertyNames(this).forEach(function (key) {\r\n            alt[key] = this[key];\r\n        }, this);\r\n        return alt;\r\n    }\r\n    toString() {\r\n        var alt = {};\r\n        Object.getOwnPropertyNames(this).forEach(function (key) {\r\n            alt[key] = this[key];\r\n        }, this);\r\n        return alt;\r\n    }\r\n}\n\n/**\r\n * Contains static Functions returning the exception messages\r\n * in order to make simpler their modification and avoid duplication.\r\n */\r\nclass C8oExceptionMessage {\r\n    /** TAG Illegal argument **/\r\n    static notImplementedFullSyncInterface() {\r\n        return \"You are using the default FullSyncInterface which is not implemented\";\r\n    }\r\n    static invalidParameterValue(parameterName, details = null) {\r\n        let errorMessage = \"The parameter '\" + parameterName + \"' is invalid\";\r\n        if (details != null) {\r\n            errorMessage += \", \" + details;\r\n        }\r\n        return errorMessage;\r\n    }\r\n    static illegalArgumentInvalidEndpoint(endpoint) {\r\n        return \"'\" + endpoint + \"' is not a valid Convertigo endpoint\";\r\n    }\r\n    static wrongListener(c8oListener) {\r\n        return \"The C8oListener class \" + C8oUtilsCore.getObjectClassName(c8oListener) + \" is not handled\";\r\n    }\r\n    static illegalArgumentNullParameter(parameterName) {\r\n        return parameterName + \" must be not null\";\r\n    }\r\n    static missingValue(valueName) {\r\n        return \"The \" + valueName + \" is missing\";\r\n    }\r\n    static unknownValue(valueName, value) {\r\n        return \"The \" + valueName + \" value \" + value + \" is unknown\";\r\n    }\r\n    static unknownType(variableName, variable) {\r\n        return \"The \" + variableName + \" type \" + C8oUtilsCore.getObjectClassName(variable) + \"is unknown\";\r\n    }\r\n    static ressourceNotFound(ressourceName) {\r\n        return \"The \" + ressourceName + \" was not found\";\r\n    }\r\n    /** TAG Illegal argument */\r\n    static illegalArgumentInvalidFullSyncDatabaseUrl(fullSyncDatabaseUrlStr) {\r\n        return \"The fullSync database url '\" + fullSyncDatabaseUrlStr + \"' is not a valid url\";\r\n    }\r\n    static FullSyncDatabaseInitFailed(databaseName) {\r\n        return \"Failed to initialize the FullSync database '\" + databaseName + \"'\";\r\n    }\r\n    static MissParameter(parameterName) {\r\n        return \"The parameter '\" + parameterName + \"' is missing\";\r\n    }\r\n    /* private static  illegalArgumentInvalidParameterValue(parameterName: string, parameterValue: string): string {\r\n     return \"'\" + parameterValue + \"' is not a valid value for the parameter '\" + parameterName + \"'\"\r\n     } */\r\n    static illegalArgumentInvalidURL(urlStr) {\r\n        return \"'\" + urlStr + \"' is not a valid URL\";\r\n    }\r\n    static InvalidArgumentInvalidURL(urlStr) {\r\n        return \"'\" + urlStr + \"' is not a valid URL\";\r\n    }\r\n    static UnknownFullSyncPolicy(policy) {\r\n        return \"Unknown the FullSync policy '\" + policy + \"'\";\r\n    }\r\n    static InvalidArgumentInvalidEndpoint(endpoint) {\r\n        return \"'\" + endpoint + \"' is not a valid Convertigo endpoint\";\r\n    }\r\n    static InvalidRequestable(requestable) {\r\n        return \"'\" + requestable + \"' is not a valid requestable.\";\r\n    }\r\n    static InvalidParameterType(parameterName, wantedParameterType, actualParameterType) {\r\n        return \"The parameter '\" + parameterName + \"' must be of type '\" + wantedParameterType + \"' and not '\" + actualParameterType + \"'\";\r\n    }\r\n    static illegalArgumentIncompatibleListener(listenerType, responseType) {\r\n        return \"The listener type '\" + listenerType + \"' is incompatible with the response type '\" + responseType + \"'\";\r\n    }\r\n    static InvalidArgumentNullParameter(parameterName) {\r\n        return parameterName + \" must be not null\";\r\n    }\r\n    /** TAG Initialization */\r\n    static InitError() {\r\n        return \"Unable to initialize\";\r\n    }\r\n    static InitRsainternalKey() {\r\n        return \"Unable to initialize the RSA internal key\";\r\n    }\r\n    static InitCouchManager() {\r\n        return \"Unable to initialize the fullSync databases manager\";\r\n    }\r\n    static InitSslSocketFactory() {\r\n        return \"Unable to initialize the ssl socket factory\";\r\n    }\r\n    static InitDocumentBuilder() {\r\n        return \"Unable to initialize the XML document builder\";\r\n    }\r\n    /** TAG Parse */\r\n    static ParseStreamToJson() {\r\n        return \"Unable to parse the input stream to a json document\";\r\n    }\r\n    static ParseStreamToXml() {\r\n        return \"Unable to parse the input stream to an xml document\";\r\n    }\r\n    static parseInputStreamToString() {\r\n        return \"Unable to parse the input stream to a string\";\r\n    }\r\n    static parseXmlToString() {\r\n        return \"Unable to parse the xml document to a string\";\r\n    }\r\n    static parseRsainternalKey() {\r\n        return \"Unable to parse the RSA internal key\";\r\n    }\r\n    static parseQueryEnumeratorToJson() {\r\n        return \"Unable to parse the query to a json document\";\r\n    }\r\n    static parseLogsToJson() {\r\n        return \"Unable to parse logs to a json document\";\r\n    }\r\n    static parseLogsStreamToJson() {\r\n        return \"Unable to parse stream containing logs response to a json document\";\r\n    }\r\n    static parseC8oReplicationResultToJson() {\r\n        return \"Unable to parse the replication result to a json document\";\r\n    }\r\n    static parseFullSyncDefaultResponseToJson() {\r\n        return \"Unable to parse the default fullSync result to a json document\";\r\n    }\r\n    static parseFullSyncPostDocumentResponseToJson() {\r\n        return \"Unable to parse the post document fullSync result to a json document\";\r\n    }\r\n    static parseStringToJson() {\r\n        return \"Unable to parse the string to a JSON document\";\r\n    }\r\n    static ParseStringToObject(type /*type*/) {\r\n        return \"Unable to parse the string (JSON):string to an object of type \"; // + type\r\n    }\r\n    static StringToJsonValue(str) {\r\n        return \"Unable to translate the string '\" + str + \"' to a JSON value\";\r\n    }\r\n    /** TAG HTTP */\r\n    static retrieveRsainternalKey() {\r\n        return \"Error during http request to get the RSA internal key\";\r\n    }\r\n    static httpLogs() {\r\n        return \"Error during http request to send logs to the Convertigo server\";\r\n    }\r\n    /** TAG Couch */\r\n    static couchRequestGetView() {\r\n        return \"Unable to run the view query\";\r\n    }\r\n    static couchRequestCreateIndex() {\r\n        return \"Unable to create the index\";\r\n    }\r\n    static couchRequestFind() {\r\n        return \"Unable to run the query find\";\r\n    }\r\n    static couchRequestExplain() {\r\n        return \"Unable to run the query explain\";\r\n    }\r\n    static couchRequestGetIndexes() {\r\n        return \"Unable to run the query getIndexes\";\r\n    }\r\n    static couchRequestDeleteIndex() {\r\n        return \"Unable to run the query deleteIndex\";\r\n    }\r\n    static couchRequestSearch() {\r\n        return \"Unable to run the query search\";\r\n    }\r\n    static couchRequestAllDocuments() {\r\n        return \"Unable to run the all query\";\r\n    }\r\n    static couchRequestResetDatabase() {\r\n        return \"Unable to run the reset query\";\r\n    }\r\n    static couchRequestDeleteDocument() {\r\n        return \"Unable to run the delete document query\";\r\n    }\r\n    static couchRequestInvalidRevision() {\r\n        return \"The revision is invalid\";\r\n    }\r\n    static couchRequestPostDocument() {\r\n        return \"Unable to run the post document query\";\r\n    }\r\n    static unableToGetFullSyncDatabase(databaseName) {\r\n        return \"Unable to get the fullSync database '\" + databaseName + \"' from the manager\";\r\n    }\r\n    static couchNullResult() {\r\n        return \"An error occured during the fullSync request, its result is null\";\r\n    }\r\n    static couchFullSyncNotActive() {\r\n        return \"Unable to use fullSync because it was not activated at the initialization\";\r\n    }\r\n    static CouchDeleteFailed() {\r\n        return \"Delete the Couch document failed\";\r\n    }\r\n    static fullSyncPutProperties(properties) {\r\n        return \"Unable to put the following properties in the fullSync Document: \" + JSON.stringify(properties);\r\n    }\r\n    static fullSyncGetOrCreateDatabase(databaseName) {\r\n        return \"Unable to get or create the fullSync database '\" + databaseName + \"'\";\r\n    }\r\n    static fullSyncHandleResponse() {\r\n        return \"Error while handling the fullSync response\";\r\n    }\r\n    /** TAG Certificate */\r\n    static loadKeyStore() {\r\n        return \"Failed to load key store\";\r\n    }\r\n    static trustAllCertificates() {\r\n        return \"Unable to load a key store trusting all certificates\";\r\n    }\r\n    static clientKeyStore() {\r\n        return \"Unable to load the client key store\";\r\n    }\r\n    static serverKeyStore() {\r\n        return \"Unable to load the server key store\";\r\n    }\r\n    /** TAG Not found */\r\n    static illegalArgumentNotFoundFullSyncView(viewName, databaseName) {\r\n        return \"Cannot found the view '\" + viewName + \"' in database '\" + databaseName + \"'\";\r\n    }\r\n    /** TAG Other */\r\n    static unhandledResponseType(responseType) {\r\n        return \"The response type '\" + responseType + \"' is not handled\";\r\n    }\r\n    static unhandledListenerType(listenerType) {\r\n        return \"The listener type '\" + listenerType + \"' is not handled\";\r\n    }\r\n    //noinspection JSUnusedLocalSymbols\r\n    static WrongListener(c8oListener) {\r\n        return \"wrong listener\"; // \"The C8oListener class \" + C8oUtils.GetObjectClassName(c8oListener) + \" is not handled\"\r\n    }\r\n    static wrongResult(result) {\r\n        return \"The response class \" + C8oUtilsCore.getObjectClassName(result) + \" is not handled\";\r\n    }\r\n    static unhandledFullSyncRequestable(fullSyncRequestableValue) {\r\n        return \"The fullSync requestable '\" + fullSyncRequestableValue + \"' is not handled\";\r\n    }\r\n    static closeInputStream() {\r\n        return \"Unable to close the input stream\";\r\n    }\r\n    static deserializeJsonObjectFromString(str) {\r\n        return \"Unable to deserialize the JSON object from the following string: '\" + str + \"'\";\r\n    }\r\n    static postDocument() {\r\n        return \"Unable to post document\";\r\n    }\r\n    static getNameValuePairObjectValue(name) {\r\n        return \"Unable to get the object value from the NameValuePair named '\" + name + \"'\";\r\n    }\r\n    static queryEnumeratorToJSON() {\r\n        return \"Unable to parse the QueryEnumerator to a JSON document\";\r\n    }\r\n    static queryEnumeratorToXML() {\r\n        return \"Unable to parse the QueryEnumerator to a XML document\";\r\n    }\r\n    static addparametersToQuery() {\r\n        return \"Unable to add parameters to the fullSync query\";\r\n    }\r\n    static putJson() {\r\n        return \"Failed to put data in JSON ...\";\r\n    }\r\n    static changeEventToJson() {\r\n        return \"Failed to parse ChangeEvent to JSON document\";\r\n    }\r\n    static initC8oSslSocketFactory() {\r\n        return \"Failed to initialize C8oSslSocketFactory\";\r\n    }\r\n    static createSslContext() {\r\n        return \"failed to create a new SSL context\";\r\n    }\r\n    static keyManagerFactoryInstance() {\r\n        return \"Failed to instanciate KeyManagerFactory\";\r\n    }\r\n    static initKeyManagerFactory() {\r\n        return \"Failed to initialize the key manager factory\";\r\n    }\r\n    static InitHttpInterface() {\r\n        return \"Failed to initialize the secure HTTP Interface\";\r\n    }\r\n    static trustManagerFactoryInstance() {\r\n        return \"Failed to instanciate KeyManagerFactory\";\r\n    }\r\n    static initTrustManagerFactory() {\r\n        return \"Failed to initialize the key manager factory\";\r\n    }\r\n    static initSslContext() {\r\n        return \"Failed to initialize the SSL context\";\r\n    }\r\n    static initCipher() {\r\n        return \"Failed to initialize the cipher\";\r\n    }\r\n    static urlEncode() {\r\n        return \"Failed to URL encode parameters\";\r\n    }\r\n    static getParametersStringBytes() {\r\n        return \"Failed to get parameters string bytes\";\r\n    }\r\n    static encodeParameters() {\r\n        return \"Failed to encode parameters\";\r\n    }\r\n    static RunHttpRequest() {\r\n        return \"Failed to run the HTTP request\";\r\n    }\r\n    static generateRsainternalKey() {\r\n        return \"Failed to generate RSA internal key\";\r\n    }\r\n    static keyFactoryInstance() {\r\n        return \"Failed to get KeyFactory instance\";\r\n    }\r\n    static getCipherInstance() {\r\n        return \"Failed to get Cipher instance\";\r\n    }\r\n    static entryNotFound(entryKey) {\r\n        return \"Entry key '\" + entryKey + \"' not found\";\r\n    }\r\n    static c8oCallRequestToJson() {\r\n        return \"Failed to parse c8o call request to JSON\";\r\n    }\r\n    static getJsonKey(key) {\r\n        return \"Failed to get the JSON key '\" + key + \"'\";\r\n    }\r\n    static jsonValueToXML() {\r\n        return \"Failed to parse JSON value to XML\";\r\n    }\r\n    static inputStreamToXML() {\r\n        return \"Failed to parse InputStream to an XML document\";\r\n    }\r\n    static inputStreamReaderEncoding() {\r\n        return \"Failed to instanciate the InputStreamReader\";\r\n    }\r\n    static readLineFromBufferReader() {\r\n        return \"Failed to read line from the BufferReader\";\r\n    }\r\n    static GetLocalCacheParameters() {\r\n        return \"Failed to get local cache parameters\";\r\n    }\r\n    static GetLocalCachePolicy(policy) {\r\n        return \"Failed to get local cache policy: \" + policy;\r\n    }\r\n    static fullSyncJsonToXML() {\r\n        return \"Failed to translate full sync JSON to XML\";\r\n    }\r\n    static takeLog() {\r\n        return \"Failed to take a log line in the list\";\r\n    }\r\n    static remoteLogHttpRequest() {\r\n        return \"Failed while running the HTTP request sending logs to the Convertigo server\";\r\n    }\r\n    static getInputStreamFromHttpResponse() {\r\n        return \"Failed to get InputStream from the HTTP response\";\r\n    }\r\n    static inputStreamToJSON() {\r\n        return \"Failed to translate the input stream to a JSON document\";\r\n    }\r\n    static httpInterfaceInstance() {\r\n        return \"Failed to instanciate the HTTP interface\";\r\n    }\r\n    static FullSyncInterfaceInstance() {\r\n        return \"Failed to instanciate the FullSync interface\";\r\n    }\r\n    static getDocumentFromDatabase(documentId) {\r\n        return \"Failed to get fullSync document '\" + documentId + \"' from the database\";\r\n    }\r\n    static FullSyncReplicationFail(databaseName, way) {\r\n        return \"Failed to '\" + way + \"' replicate the '\" + databaseName + \"' database\";\r\n    }\r\n    static localCachePolicyIsDisable() {\r\n        return \"Depending to the network state the local cache is disabled\";\r\n    }\r\n    static localCacheDocumentJustCreated() {\r\n        return \"The local cache document is just created (empty):string\";\r\n    }\r\n    static illegalArgumentInvalidLocalCachePolicy(localCachePolicyString) {\r\n        return \"The local cache policy '\" + localCachePolicyString + \"' is invalid\";\r\n    }\r\n    static timeToLiveExpired() {\r\n        return \"The time to live expired\";\r\n    }\r\n    static InvalidLocalCacheResponseInformation() {\r\n        return \"Local cache response informations are invalid\";\r\n    }\r\n    static overrideDocument() {\r\n        return \"Failed to override the fullSync document\";\r\n    }\r\n    static handleFullSyncRequest() {\r\n        return \"Failed while running the fullSync request\";\r\n    }\r\n    static serializeC8oCallRequest() {\r\n        return \"Fails to serialize the Convertigo call request\";\r\n    }\r\n    static getResponseFromLocalCache() {\r\n        return \"Failed to get response from the local cache\";\r\n    }\r\n    static getResponseFromLocalCacheDocument() {\r\n        return \"Failed to get response form the local cache document\";\r\n    }\r\n    static handleC8oCallRequest() {\r\n        return \"Failed while running the c8o call request\";\r\n    }\r\n    static runHttpRequest() {\r\n        return \"Failed to run the HTTP request\";\r\n    }\r\n    static saveResponseToLocalCache() {\r\n        return \"Failed to save the response to the local cache\";\r\n    }\r\n    static RemoteLogFail() {\r\n        return \"Failed to send log to the Convertigo server: disabling remote logging\";\r\n    }\r\n    static FullSyncRequestFail() {\r\n        return \"Failed to process the fullsync request\";\r\n    }\r\n    static MissingLocalCacheResponseDocument() {\r\n        return \"Missing local cache response document\";\r\n    }\r\n}\n\nclass C8oLogger {\r\n    constructor(c8o, first) {\r\n        this.initDone = false;\r\n        this.waitForSending = false;\r\n        this.pInit = this.affect_val(c8o, first);\r\n    }\r\n    affect_val(c8o, first) {\r\n        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\r\n            if (first) {\r\n                this.c8o = c8o;\r\n                this.remoteLogUrl = \"\";\r\n                this.remoteLogs = new Queue();\r\n                this.pending_remoteLogsLevel = new Queue();\r\n                this.pending_remoteLogs = new Queue();\r\n                this.alreadyRemoteLogging = [];\r\n                this.alreadyRemoteLogging.push(false);\r\n                this.remoteLogLevel = C8oLogLevel.TRACE;\r\n                this.startTimeRemoteLog = new Date().getTime();\r\n                this.uidRemoteLogs = Math.round((new Date().getTime() * Math.random())).toString(36);\r\n                const obj = {};\r\n                obj[\"uid\"] = this.uidRemoteLogs.toUpperCase();\r\n                obj[\"uuid\"] = (yield this.c8o.deviceUUID).toUpperCase();\r\n                obj[\"project\"] = \"\";\r\n                this.env = JSON.stringify(obj);\r\n                resolve();\r\n            }\r\n            else {\r\n                this.c8o = c8o;\r\n                this.remoteLogUrl = c8o.endpointConvertigo + \"/admin/services/logs.Add\";\r\n                this.remoteLogs = new Queue();\r\n                this.alreadyRemoteLogging = [];\r\n                this.alreadyRemoteLogging.push(false);\r\n                this.remoteLogLevel = C8oLogLevel.TRACE;\r\n                this.startTimeRemoteLog = new Date().getTime();\r\n                this.uidRemoteLogs = Math.round((new Date().getTime() * Math.random())).toString(36);\r\n                const obj = {};\r\n                obj[\"uid\"] = this.uidRemoteLogs.toUpperCase();\r\n                obj[\"uuid\"] = (yield this.c8o.deviceUUID).toUpperCase();\r\n                obj[\"project\"] = encodeURIComponent(c8o.endpointProject.toString());\r\n                this.env = JSON.stringify(obj);\r\n                resolve();\r\n            }\r\n        }));\r\n    }\r\n    isLoggableRemote(logLevel) {\r\n        return this.c8o.logRemote && logLevel != null && C8oLogLevel.TRACE.priority <= this.remoteLogLevel.priority && this.remoteLogLevel.priority <= logLevel.priority;\r\n    }\r\n    isLoggableConsole(logLevel) {\r\n        return logLevel != null && C8oLogLevel.TRACE.priority <= this.c8o.logLevelLocal.priority && this.c8o.logLevelLocal.priority <= logLevel.priority;\r\n    }\r\n    canLog(logLevel) {\r\n        return this.isLoggableConsole(logLevel) || this.isLoggableRemote(logLevel);\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get isFatal() {\r\n        return this.canLog(C8oLogLevel.FATAL);\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get isError() {\r\n        return this.canLog(C8oLogLevel.ERROR);\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get isWarn() {\r\n        return this.canLog(C8oLogLevel.WARN);\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get isInfo() {\r\n        return this.canLog(C8oLogLevel.INFO);\r\n    }\r\n    get isDebug() {\r\n        return this.canLog(C8oLogLevel.DEBUG);\r\n    }\r\n    get isTrace() {\r\n        return this.canLog(C8oLogLevel.TRACE);\r\n    }\r\n    log(logLevel, message, exception) {\r\n        const isLogConsole = this.isLoggableConsole(logLevel);\r\n        const isLogRemote = this.isLoggableRemote(logLevel);\r\n        let copyMsg = \"\" + message;\r\n        if (isLogConsole || isLogRemote) {\r\n            if (exception != null) {\r\n                let messageB = false;\r\n                let messageS = false;\r\n                try {\r\n                    if (exception.message != undefined) {\r\n                        message += \" : \" + JSON.stringify(exception.message);\r\n                    }\r\n                    else {\r\n                        messageB = true;\r\n                    }\r\n                    if (exception.stack != undefined) {\r\n                        message += \"\\n\" + JSON.stringify(exception.stack);\r\n                    }\r\n                    else {\r\n                        messageS = true;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    message += \"\\n\" + exception.toString();\r\n                }\r\n                if (messageB && messageS) {\r\n                    try {\r\n                        message += \"\\n\" + JSON.stringify(exception);\r\n                    }\r\n                    catch (e) {\r\n                        message += \"\\n\" + exception.toString();\r\n                    }\r\n                }\r\n            }\r\n            const time = (((new Date().getTime().valueOf()) - (this.startTimeRemoteLog)) / 1000).toString();\r\n            if (!this.initDone) {\r\n                const obj = {};\r\n                obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n                obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = logLevel.name;\r\n                obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message.toString();\r\n                const objJson = obj;\r\n                this.pending_remoteLogs.push(objJson);\r\n                this.pending_remoteLogsLevel.push(logLevel);\r\n            }\r\n            else {\r\n                if (isLogRemote) {\r\n                    const obj = {};\r\n                    obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n                    obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = logLevel.name;\r\n                    obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message.toString();\r\n                    const objJson = obj;\r\n                    this.remoteLogs.push(objJson);\r\n                    this.logRemote();\r\n                }\r\n                if (isLogConsole) {\r\n                    let verb = logLevel.name.toLowerCase();\r\n                    if (logLevel.name == \"FATAL\" || logLevel.name == \"fatal\") {\r\n                        verb = \"error\";\r\n                    }\r\n                    else if (logLevel.name == \"TRACE\" || logLevel.name == \"trace\") {\r\n                        verb = \"debug\";\r\n                    }\r\n                    try {\r\n                        if (exception != undefined) {\r\n                            if (exception.message != undefined && exception[\"cause\"] != undefined) {\r\n                                console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg, exception.message, exception[\"cause\"]);\r\n                            }\r\n                            else {\r\n                                console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg, exception);\r\n                            }\r\n                        }\r\n                        else {\r\n                            console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(\"(\" + time + \") [\" + logLevel.name + \"] \" + message);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    fatal(message, exceptions = null) {\r\n        this.log(C8oLogLevel.FATAL, message, exceptions);\r\n    }\r\n    error(message, exceptions = null) {\r\n        this.log(C8oLogLevel.ERROR, message, exceptions);\r\n    }\r\n    warn(message, exceptions = null) {\r\n        this.log(C8oLogLevel.WARN, message, exceptions);\r\n    }\r\n    info(message, exceptions = null) {\r\n        this.log(C8oLogLevel.INFO, message, exceptions);\r\n    }\r\n    debug(message, exceptions = null) {\r\n        this.log(C8oLogLevel.DEBUG, message, exceptions);\r\n    }\r\n    trace(message, exceptions = null) {\r\n        this.log(C8oLogLevel.TRACE, message, exceptions);\r\n    }\r\n    _log(logLevel, messages, exceptions = null) {\r\n        if (this.c8o.logC8o) {\r\n            this.log(logLevel, C8oLogger.LOG_INTERNAL_PREFIX.toString() + messages.toString(), exceptions);\r\n        }\r\n    }\r\n    _fatal(message, exceptions = null) {\r\n        this._log(C8oLogLevel.FATAL, message, exceptions);\r\n    }\r\n    _error(message, exceptions = null) {\r\n        this._log(C8oLogLevel.ERROR, message, exceptions);\r\n    }\r\n    _warn(message, exceptions = null) {\r\n        this._log(C8oLogLevel.WARN, message, exceptions);\r\n    }\r\n    _info(message, exceptions = null) {\r\n        this._log(C8oLogLevel.INFO, message, exceptions);\r\n    }\r\n    _debug(message, exceptions = null) {\r\n        this._log(C8oLogLevel.DEBUG, message, exceptions);\r\n    }\r\n    _trace(message, exceptions = null) {\r\n        this._log(C8oLogLevel.TRACE, message, exceptions);\r\n    }\r\n    logRemoteInit() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.pInit.then(() => __awaiter(this, void 0, void 0, function* () {\r\n                this.initDone = true;\r\n                let count = 0;\r\n                const listSize = this.pending_remoteLogs.count();\r\n                const logsArray = new Array();\r\n                while (count < listSize && count < C8oLogger.REMOTE_LOG_LIMIT) {\r\n                    const logLvl = this.pending_remoteLogsLevel.pop();\r\n                    const mvar = this.pending_remoteLogs.pop();\r\n                    if (this.isLoggableConsole(logLvl)) {\r\n                        console.log(\"(\" + mvar[\"time\"] + \") [\" + logLvl.name + \"] \" + mvar[\"msg\"]);\r\n                    }\r\n                    if (this.isLoggableRemote(logLvl)) {\r\n                        logsArray.push(mvar);\r\n                        count += 1;\r\n                    }\r\n                }\r\n                //noinspection JSUnusedAssignment\r\n                let canLog = false;\r\n                canLog = logsArray.length > 0;\r\n                if (canLog) {\r\n                    this.alreadyRemoteLogging[0] = true;\r\n                }\r\n                const parameters = {};\r\n                parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify(logsArray);\r\n                parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = yield this.c8o.deviceUUID;\r\n                parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n                this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                    .then((response) => {\r\n                    if (response !== undefined) {\r\n                        if (response.error !== undefined) {\r\n                            this.c8o.logRemote = false;\r\n                            if (this.c8o.logOnFail != null) {\r\n                                this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), response.error), null);\r\n                            }\r\n                        }\r\n                    }\r\n                    const logLevelResponse = response[C8oLogger.JSON_KEY_REMOTE_LOG_LEVEL.toString()];\r\n                    if (logLevelResponse != null) {\r\n                        const logLevelResponseStr = logLevelResponse.toString();\r\n                        const c8oLogLevel = C8oLogLevel.getC8oLogLevel(logLevelResponseStr);\r\n                        if (c8oLogLevel != null) {\r\n                            this.remoteLogLevel = c8oLogLevel;\r\n                        }\r\n                        this.alreadyRemoteLogging[0] = false;\r\n                        this.logRemote();\r\n                    }\r\n                })\r\n                    .catch((error) => {\r\n                    this.c8o.logRemote = false;\r\n                    if (this.c8o.logOnFail != null) {\r\n                        this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), error), null);\r\n                    }\r\n                });\r\n            }));\r\n        });\r\n    }\r\n    checkInitDone(resolve = null) {\r\n        if (resolve == null) {\r\n            return new Promise((resolve) => {\r\n                if (!this.initDone) {\r\n                    setTimeout(() => {\r\n                        this.checkInitDone(resolve);\r\n                    }, 100);\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (!this.initDone) {\r\n                setTimeout(() => {\r\n                    this.checkInitDone(resolve);\r\n                }, 100);\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    logTest() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.checkInitDone();\r\n            return this.logTestAction();\r\n            /*if (!this.initDone) {\r\n                setTimeout(()=>{\r\n                    return this.logTest();\r\n                },100)\r\n            }\r\n            else{\r\n                return this.logTestAction();\r\n            } */\r\n        });\r\n    }\r\n    logTestAction() {\r\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            const message = \"[c8o] Testing if endpoint is reachable\";\r\n            const time = (((new Date().getTime().valueOf()) - (this.startTimeRemoteLog)) / 1000).toString();\r\n            const obj = {};\r\n            obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n            obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = C8oLogLevel.DEBUG.name;\r\n            obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message;\r\n            const parameters = {};\r\n            parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify([obj]);\r\n            parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = yield this.c8o.deviceUUID;\r\n            parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n            this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                .then((response) => {\r\n                resolve(true);\r\n            })\r\n                .catch((error) => {\r\n                reject(false);\r\n            });\r\n        }));\r\n    }\r\n    timeout(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n    logRemote(wait = 5000) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // if sending is already processing\r\n            if (this.waitForSending) {\r\n                return;\r\n            }\r\n            //noinspection JSUnusedAssignment\r\n            let canLog = false;\r\n            canLog = this.remoteLogs.count() > 0;\r\n            if (canLog) {\r\n                this.alreadyRemoteLogging[0] = true;\r\n            }\r\n            if (canLog) {\r\n                // We're using Angular Http provider to request the data,\r\n                // then on the response it'll map the JSON data to a parsed JS object.\r\n                // Next we process the data and resolve the promise with the new data.\r\n                // \"/admin/services/logs.Add\";\r\n                // wait 5000 ms to group http request with severals logs and reduce http charge\r\n                if (wait == null) {\r\n                    wait = 0;\r\n                }\r\n                this.waitForSending = true;\r\n                yield this.timeout(wait);\r\n                this.waitForSending = false;\r\n                let count = 0;\r\n                const listSize = this.remoteLogs.count();\r\n                const logsArray = [];\r\n                while (count < listSize && count < C8oLogger.REMOTE_LOG_LIMIT) {\r\n                    logsArray.push(this.remoteLogs.pop());\r\n                    count += 1;\r\n                }\r\n                // if there are still los to be pushed after timeout the log them\r\n                if (logsArray.length > 0) {\r\n                    const parameters = {};\r\n                    parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify(logsArray);\r\n                    parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = yield this.c8o.deviceUUID;\r\n                    parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n                    this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                        .then((response) => {\r\n                        if (response !== undefined) {\r\n                            if (response.error !== undefined) {\r\n                                this.c8o.logRemote = false;\r\n                                if (this.c8o.logOnFail != null) {\r\n                                    this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), response.error), null);\r\n                                }\r\n                            }\r\n                        }\r\n                        const logLevelResponse = response[C8oLogger.JSON_KEY_REMOTE_LOG_LEVEL.toString()];\r\n                        if (logLevelResponse != null) {\r\n                            const logLevelResponseStr = logLevelResponse.toString();\r\n                            const c8oLogLevel = C8oLogLevel.getC8oLogLevel(logLevelResponseStr);\r\n                            if (c8oLogLevel != null) {\r\n                                this.remoteLogLevel = c8oLogLevel;\r\n                            }\r\n                            this.alreadyRemoteLogging[0] = false;\r\n                            this.logRemote();\r\n                        }\r\n                    })\r\n                        .catch((error) => {\r\n                        this.c8o.logRemote = false;\r\n                        if (this.c8o.logOnFail != null) {\r\n                            this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), error), null);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    logMethodCall(methodName, ...parameters) {\r\n        if (this.c8o.logC8o && this.isDebug) {\r\n            let methodCallLogMessage = \"Method call: \" + methodName;\r\n            if (parameters == null || Object.keys(parameters).length === 0) {\r\n                this._debug(methodCallLogMessage);\r\n            }\r\n            if (this.isTrace) {\r\n                methodCallLogMessage += \", Parameters: [\";\r\n                for (const param of parameters) {\r\n                    let paramStr = \"null\";\r\n                    if (parameters != null) {\r\n                        try {\r\n                            paramStr = JSON.stringify(param);\r\n                        }\r\n                        catch (error) {\r\n                            paramStr = \"cannot view value due to circular reference\";\r\n                        }\r\n                    }\r\n                    methodCallLogMessage += \"\\n\" + paramStr + \", \";\r\n                }\r\n                // Remove the last character\r\n                methodCallLogMessage = methodCallLogMessage.substring(0, methodCallLogMessage.length - 2) + \"]\";\r\n                this._trace(methodCallLogMessage);\r\n            }\r\n            else {\r\n                this._debug(methodCallLogMessage);\r\n            }\r\n        }\r\n    }\r\n    logC8oCall(url, parameters) {\r\n        if (this.c8o.logC8o && this.isDebug) {\r\n            let c8oCallLogMessage = \"C8o call: \" + url;\r\n            if (parameters.length > 0) {\r\n                c8oCallLogMessage += \"\\n\" + String(parameters);\r\n            }\r\n            this._debug(c8oCallLogMessage);\r\n        }\r\n    }\r\n    logC8oCallJSONResponse(response, url, parameters) {\r\n        this.logC8oCallResponse(JSON.stringify(response), \"JSON\", url, parameters);\r\n    }\r\n    logC8oCallXMLResponse(response, url, parameters) {\r\n        this.logC8oCallResponse(response.toString(), \"XML\", url, parameters);\r\n    }\r\n    logC8oCallResponse(responseStr, responseType, url, parameters) {\r\n        if (this.c8o.logC8o && this.isTrace) {\r\n            let c8oCallResponseLogMessage;\r\n            if (url == null) {\r\n                c8oCallResponseLogMessage = \"C8o call \" + responseType + \" response: \";\r\n            }\r\n            else {\r\n                c8oCallResponseLogMessage = \"C8o call \" + responseType + \" response: \" + url;\r\n            }\r\n            if (parameters.count > 0) {\r\n                c8oCallResponseLogMessage += \"\\n\" + parameters.toString();\r\n            }\r\n            c8oCallResponseLogMessage += \"\\n\" + responseStr;\r\n            this._trace(c8oCallResponseLogMessage);\r\n        }\r\n    }\r\n}\r\n// *** Constants ***//\r\n// private static LOG_TAG: string = \"c8o\";\r\nC8oLogger.LOG_INTERNAL_PREFIX = \"[c8o] \";\r\nC8oLogger.REMOTE_LOG_LIMIT = 100;\r\nC8oLogger.JSON_KEY_REMOTE_LOG_LEVEL = \"remoteLogLevel\";\r\nC8oLogger.JSON_KEY_TIME = \"time\";\r\nC8oLogger.JSON_KEY_LEVEL = \"level\";\r\nC8oLogger.JSON_KEY_MESSAGE = \"msg\";\r\nC8oLogger.JSON_KEY_LOGS = \"logs\";\r\nC8oLogger.JSON_KEY_ENV = \"env\";\n\nclass C8oFullSyncTranslator {\r\n    static fullSyncDocumentOperationResponseToJson(fullSyncDocumentOperationResponse) {\r\n        return fullSyncDocumentOperationResponse.getProperties();\r\n    }\r\n    static fullSyncDefaultResponseToJson(fullSyncDefaultResponse) {\r\n        return fullSyncDefaultResponse.getProperties();\r\n    }\r\n}\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_COUNT = \"count\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_ROWS = \"rows\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_CURRENT = \"current\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_DIRECTION = \"direction\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_TOTAL = \"total\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_OK = \"ok\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_KEY_STATUS = \"status\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PUSH = \"push\";\r\nC8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PULL = \"pull\";\r\nC8oFullSyncTranslator.XML_KEY_DOCUMENT = \"document\";\r\nC8oFullSyncTranslator.XML_KEY_COUCHDB_OUTPUT = \"couchdb_output\";\n\nclass C8oLocalCacheResponse {\r\n    constructor(response, responseType, expirationDate) {\r\n        this.response = response;\r\n        this.responseType = responseType;\r\n        this.expirationDate = expirationDate;\r\n    }\r\n    isExpired() {\r\n        if (this.expirationDate <= 0) {\r\n            return false;\r\n        }\r\n        else {\r\n            const currentDate = new Date().getTime();\r\n            return this.expirationDate < currentDate;\r\n        }\r\n    }\r\n    getResponse() {\r\n        return this.response;\r\n    }\r\n    getResponseType() {\r\n        return this.responseType;\r\n    }\r\n    getExpirationDate() {\r\n        return this.expirationDate;\r\n    }\r\n}\n\nclass C8oResponseJsonListener {\r\n    constructor(onJsonResponse) {\r\n        this.onJsonResponse = onJsonResponse;\r\n    }\r\n}\r\nclass C8oResponseProgressListener {\r\n    constructor(onProgressResponse) {\r\n        this.onProgressResponse = onProgressResponse;\r\n    }\r\n}\n\nclass C8oCouchBaseLiteException extends C8oException {\r\n    constructor(message, cause = null) {\r\n        super(message, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oCouchBaseLiteException.prototype);\r\n    }\r\n}\n\nclass C8oRessourceNotFoundException extends C8oException {\r\n    constructor(message, cause = null) {\r\n        super(message, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oRessourceNotFoundException.prototype);\r\n    }\r\n}\n\n/**\r\n * This Exception is not thrown to the user, it is used to know if the requested response from the local cache is available or no.\r\n */\r\nclass C8oUnavailableLocalCacheException extends C8oException {\r\n    constructor(detailMessage, cause = null) {\r\n        super(detailMessage, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oUnavailableLocalCacheException.prototype);\r\n    }\r\n}\n\nclass C8oProgress {\r\n    constructor(progress) {\r\n        this._changed = false;\r\n        this._continuous = false;\r\n        this._finished = false;\r\n        this._pull = true;\r\n        this._current = -1;\r\n        this._total = -1;\r\n        this._status = \"\";\r\n        this._taskInfo = \"\";\r\n        if (progress instanceof C8oProgress) {\r\n            this._changed = false;\r\n            this._continuous = progress._continuous;\r\n            this._finished = progress._finished;\r\n            this._pull = progress._pull;\r\n            this._current = progress._current;\r\n            this._total = progress._total;\r\n            this._status = progress._status;\r\n            this._taskInfo = progress._taskInfo;\r\n            this._raw = progress._raw;\r\n        }\r\n        else {\r\n            if (progress === undefined) {\r\n                this._raw = null;\r\n            }\r\n            else {\r\n                throw new Error(`Expected C8oProgress or empty constructor, got '${progress}'.`);\r\n            }\r\n        }\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get changed() {\r\n        return this._changed;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    set changed(value) {\r\n        this._changed = value;\r\n    }\r\n    get continuous() {\r\n        return this._continuous;\r\n    }\r\n    set continuous(value) {\r\n        this._continuous = value;\r\n        this._changed = true;\r\n    }\r\n    get finished() {\r\n        return this._finished;\r\n    }\r\n    set finished(value) {\r\n        this._finished = value;\r\n        this._changed = true;\r\n    }\r\n    get pull() {\r\n        return this._pull;\r\n    }\r\n    set pull(value) {\r\n        this._pull = value;\r\n        this._changed = true;\r\n    }\r\n    get push() {\r\n        return !this._pull;\r\n    }\r\n    get current() {\r\n        return this._current;\r\n    }\r\n    set current(value) {\r\n        this._current = value;\r\n        this._changed = true;\r\n    }\r\n    get total() {\r\n        return this._total;\r\n    }\r\n    set total(value) {\r\n        this._total = value;\r\n        this._changed = true;\r\n    }\r\n    get direction() {\r\n        return this._pull ? C8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PULL : C8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PUSH;\r\n    }\r\n    get status() {\r\n        return this._status;\r\n    }\r\n    set status(value) {\r\n        this._changed = true;\r\n        this._status = value;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get taskInfo() {\r\n        return this._taskInfo;\r\n    }\r\n    set taskInfo(value) {\r\n        this._changed = true;\r\n        this._taskInfo = value;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get raw() {\r\n        return this._raw;\r\n    }\r\n    set raw(value) {\r\n        this._changed = true;\r\n        this._raw = value;\r\n    }\r\n    toString() {\r\n        return this.direction + \": \" + this.current + \"/\" + this.total + \" (\" + (this.finished ? (this.continuous ? \"live\" : \"done\") : \"running\") + \")\";\r\n    }\r\n}\n\nclass FullSyncReplication {\r\n    constructor(pull = null) {\r\n        if (pull != null) {\r\n            this.pull = pull;\r\n        }\r\n        else {\r\n            this.sync = true;\r\n        }\r\n    }\r\n}\n\nclass C8oLoad {\r\n    constructor(c8o) {\r\n        this.c8o = c8o;\r\n        this.plugin = {\r\n            c8oload: function (url, opts, c8o) {\r\n                var db = this;\r\n                var extend = require('pouchdb-extend');\r\n                var Checkpointer = require('pouchdb-checkpointer');\r\n                var genReplicationId = require('pouchdb-generate-replication-id');\r\n                let loadString = (db, datastr, opts, resolve, reject, c8o) => {\r\n                    let parsedDump = parseDump(datastr);\r\n                    if (parsedDump[\"err\"]) {\r\n                        return reject(parsedDump[\"err\"]);\r\n                    }\r\n                    let docs = parsedDump[\"docs\"];\r\n                    let lastSeq = parsedDump[\"lastSeq\"];\r\n                    db.bulkDocs({ docs: docs, new_edits: false })\r\n                        .then(() => {\r\n                        if (!opts.proxy) {\r\n                            resolve({ ok: true });\r\n                        }\r\n                        else {\r\n                            writeProxyCheckpoint(db, lastSeq, opts, resolve, reject);\r\n                        }\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                };\r\n                let loadUrl = (db, url, opts, resolve, reject, c8o) => {\r\n                    let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': c8o.sdkVersion };\r\n                    Object.assign(headersObject, c8o.headers);\r\n                    let headers = c8o.httpInterface.getHeaders(headersObject);\r\n                    c8o.httpInterface.httpGetObservable(url, {\r\n                        headers: headers,\r\n                        withCredentials: true,\r\n                        responseType: 'text'\r\n                    }, {})\r\n                        .subscribe(response => {\r\n                        loadString(db, response, opts, resolve, reject, c8o);\r\n                    }, error => {\r\n                        reject(error);\r\n                    });\r\n                };\r\n                let parseDump = (data) => {\r\n                    var docs = [];\r\n                    var lastSeq = 0;\r\n                    try {\r\n                        data.split('\\n').forEach(function (line) {\r\n                            if (!line) {\r\n                                return;\r\n                            }\r\n                            line = JSON.parse(line);\r\n                            if (line[\"docs\"]) {\r\n                                docs = docs.concat(line[\"docs\"]);\r\n                            }\r\n                            if (line.seq) {\r\n                                lastSeq = line.seq;\r\n                            }\r\n                        });\r\n                    }\r\n                    catch (err) {\r\n                        return { err: err };\r\n                    }\r\n                    return { docs: docs, lastSeq: lastSeq };\r\n                };\r\n                let writeProxyCheckpoint = (db, lastSeq, opts, resolve, reject) => {\r\n                    db.info()\r\n                        .then((info) => {\r\n                        var src = new db.constructor(opts.proxy, extend(true, {}, {}, opts));\r\n                        var target = new db.constructor(info.db_name, extend(true, {}, db.__opts, opts));\r\n                        var replIdOpts = {};\r\n                        if (opts.filter) {\r\n                            replIdOpts[\"filter\"] = opts.filter;\r\n                        }\r\n                        if (opts.query_params) {\r\n                            replIdOpts[\"query_params\"] = opts.query_params;\r\n                        }\r\n                        if (opts.view) {\r\n                            replIdOpts[\"view\"] = opts.view;\r\n                        }\r\n                        genReplicationId.default(src, target, replIdOpts)\r\n                            .then(function (replId) {\r\n                            var state = {\r\n                                cancelled: false\r\n                            };\r\n                            var checkpointer = new Checkpointer.default(src, target, replId, state);\r\n                            checkpointer.writeCheckpoint(lastSeq)\r\n                                .then((response) => {\r\n                                resolve(response);\r\n                            })\r\n                                .catch((err) => {\r\n                                reject(err);\r\n                            });\r\n                        })\r\n                            .catch((err) => {\r\n                            reject(err);\r\n                        });\r\n                    });\r\n                };\r\n                return new Promise((resolve, reject) => {\r\n                    // if its a dumped string\r\n                    if (/^\\s*\\{/.test(url)) {\r\n                        loadString(db, url, opts, resolve, reject, c8o);\r\n                    }\r\n                    else {\r\n                        loadUrl(db, url, opts, resolve, reject, c8o);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * Created by charlesg on 10/01/2017.\r\n */\r\nclass C8oFullSyncDatabase {\r\n    /**\r\n     * Creates a fullSync database with the specified name and its location.\r\n     *\r\n     * @param c8o\r\n     * @param databaseName\r\n     * @param fullSyncDatabases\r\n     * @param localSuffix\r\n     * @throws C8oException Failed to get the fullSync database.\r\n     */\r\n    constructor(c8o, databaseName, fullSyncDatabases, localSuffix, localPrefix) {\r\n        /**\r\n         * The fullSync Database instance.\r\n         */\r\n        this.database = null;\r\n        /**\r\n         * Used to make pull replication (uploads changes from the local database to the remote one).\r\n         */\r\n        this.pullFullSyncReplication = new FullSyncReplication(true);\r\n        /**\r\n         * Used to make push replication (downloads changes from the remote database to the local one).\r\n         */\r\n        this.pushFullSyncReplication = new FullSyncReplication(false);\r\n        /**\r\n         * Used to make pull replication (uploads changes from the local database to the remote one).\r\n         */\r\n        this.syncFullSyncReplication = new FullSyncReplication();\r\n        this.manual_canceled = false;\r\n        this.to_cancel = [];\r\n        PouchDB$1.plugin(PouchDBFind);\r\n        PouchDB$1.plugin(PouchDBQuickSearch);\r\n        var opts = {};\r\n        if (c8o.usewroker) {\r\n            //@ts-ignore\r\n            PouchDB$1.adapter('worker', PouchDBWorker);\r\n            opts[\"adapter\"] = \"worker\";\r\n            c8o.log._debug(\"We will use experimental PouchDBWorker to speed up your requests. \\n fs://.createIndex is not supported\");\r\n        }\r\n        let c8oload = new C8oLoad(c8o);\r\n        window[\"PouchDB\"] = PouchDB$1;\r\n        this.c8o = c8o;\r\n        const header = {\r\n            \"x-convertigo-sdk\": this.c8o.sdkVersion,\r\n        };\r\n        if (this.c8o.xsrfUsed) {\r\n            const headerName = \"x-xsrf-token\";\r\n            const fetch = \"Fetch\";\r\n            header[headerName] = window.localStorage.getItem(headerName) != undefined ? window.localStorage.getItem(headerName) : fetch;\r\n        }\r\n        Object.assign(header, this.c8o.headers);\r\n        this.remotePouchHeader = {\r\n            fetch: (url, opts) => {\r\n                opts.credentials = 'include';\r\n                for (let key in header) {\r\n                    opts.headers.set(key, header[key]);\r\n                }\r\n                var fecthPouch = PouchDB$1.fetch(url, opts);\r\n                fecthPouch.then((response) => {\r\n                    this.c8o.session.sort(response, header, null, null, null);\r\n                })\r\n                    .catch((e) => {\r\n                });\r\n                return fecthPouch;\r\n            }\r\n        };\r\n        this.c8oFullSyncDatabaseUrl = fullSyncDatabases + databaseName;\r\n        this.remotedatabaseName = databaseName;\r\n        this.databaseName = localPrefix + databaseName + localSuffix;\r\n        try {\r\n            if (c8o.couchUrl != null) {\r\n                this.database = new PouchDB$1(c8o.couchUrl + \"/\" + this.databaseName);\r\n                this.c8o.log._debug(\"PouchDb launched on couchbaselite\");\r\n            }\r\n            else {\r\n                PouchDB$1.plugin(c8oload.plugin);\r\n                this.database = new PouchDB$1(this.databaseName, opts);\r\n                this.c8o.log._debug(\"PouchDb launched normally\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    remoteDatabaseVersion() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve) => {\r\n                let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n                Object.assign(headersObject, this.c8o.headers);\r\n                let headers = this.c8o.httpInterface.getHeaders(headersObject);\r\n                this.c8o.httpInterface.httpGetObservable(this.c8oFullSyncDatabaseUrl + \"/_design/c8o\", {\r\n                    headers: headers,\r\n                    withCredentials: true\r\n                }, {})\r\n                    .subscribe(response => {\r\n                    if (response != undefined && response[\"~c8oDbVersion\"] != null) {\r\n                        this.c8o.log._trace(\"Server support reset database, remote version for \" + this.remotedatabaseName + \" is \" + response[\"~c8oDbVersion\"]);\r\n                        resolve(response[\"~c8oDbVersion\"]);\r\n                    }\r\n                    else {\r\n                        resolve(false);\r\n                    }\r\n                }, error => {\r\n                    this.c8o.log._trace(\"Server does not support reset database\");\r\n                    resolve(false);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    localDatabaseVersion() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let info = yield this.database.info();\r\n                let response = yield this.database.get('_design/c8o');\r\n                if (response[\"~c8oDbVersion\"] != null) {\r\n                    this.c8o.log._trace(\"Version for local database,  \" + this.databaseName + \" is \" + response[\"~c8oDbVersion\"]);\r\n                    return response[\"~c8oDbVersion\"];\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            catch (error) {\r\n                //there is no c8odesing base has been created in local\r\n                return \"_C8O_DO_NOTHING\";\r\n            }\r\n        });\r\n    }\r\n    checkResetBase() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let remoteVersion = yield this.remoteDatabaseVersion();\r\n            let localVersion = yield this.localDatabaseVersion();\r\n            let reset = false;\r\n            if (localVersion == \"_C8O_DO_NOTHING\") {\r\n                this.c8o.log._trace(\"Local database version do not contains, _design/c8o, it has been created in local, no reset needed\");\r\n            }\r\n            else {\r\n                if (remoteVersion != false) {\r\n                    if (localVersion != false) {\r\n                        if (remoteVersion != localVersion) {\r\n                            // reset\r\n                            reset = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        reset = true;\r\n                    }\r\n                }\r\n                if (reset) {\r\n                    this.c8o.log._trace(\"Since remote database version is different from local database, we will reset it\");\r\n                    yield this.resetMyBase();\r\n                }\r\n                else {\r\n                    this.c8o.log._trace(\"Remote database version and local database, had the same version, reset not needed\");\r\n                }\r\n            }\r\n            return reset;\r\n        });\r\n    }\r\n    resetMyBase() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield this.database.destroy();\r\n                if (this.c8o.couchUrl != null) {\r\n                    this.database = new PouchDB$1(this.c8o.couchUrl + \"/\" + this.databaseName);\r\n                    this.c8o.log._debug(\"PouchDb launched on couchbaselite\");\r\n                }\r\n                else {\r\n                    let c8oload = new C8oLoad(this.c8o);\r\n                    PouchDB$1.plugin(c8oload.plugin);\r\n                    this.database = new PouchDB$1(this.databaseName);\r\n                    this.c8o.log._debug(\"PouchDb launched normally\");\r\n                }\r\n                this.c8o.log._debug(\"Database reset successfully\");\r\n                this.c8o.subscriber_database_reset.next({ databaseName: this.databaseName, success: true, error: false });\r\n            }\r\n            catch (error) {\r\n                this.c8o.subscriber_database_reset.error({ databaseName: this.databaseName, success: false, error: true, nativeError: error });\r\n                this.c8o.log._error(\"error while resetting database\");\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Start pull and push replications.\r\n     * @returns Promise<any>\r\n     */\r\n    startAllReplications(parameters, c8oResponseListener, handler, id = null, mutex = null) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.c8o.resetBase) {\r\n                yield this.checkResetBase();\r\n            }\r\n            let resp = yield this.c8o.log.logTest();\r\n            return this.startSync(this.syncFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n        });\r\n    }\r\n    /**\r\n     * Start pull replication.\r\n     * @returns Promise<any>\r\n     */\r\n    startPullReplication(parameters, c8oResponseListener, handler, id = null, mutex = null) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.c8o.resetBase) {\r\n                yield this.checkResetBase();\r\n            }\r\n            let resp = yield this.c8o.log.logTest();\r\n            return this.startReplication(this.pullFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n        });\r\n    }\r\n    /**\r\n     * Start push replication.\r\n     * @returns Promise<any>\r\n     */\r\n    startPushReplication(parameters, c8oResponseListener, handler, id = null, mutex = null) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.c8o.resetBase) {\r\n                yield this.checkResetBase();\r\n            }\r\n            let resp = yield this.c8o.log.logTest();\r\n            return this.startReplication(this.pushFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n        });\r\n    }\r\n    startSync(fullSyncReplication, parameters, c8oResponseListener, handler, id = null, mutex = null) {\r\n        let continuous = false;\r\n        let cancel = false;\r\n        const parametersObj = {};\r\n        //stop replication if exists\r\n        if (fullSyncReplication.replication != null) {\r\n            fullSyncReplication.replication.cancel();\r\n        }\r\n        this._id = id;\r\n        //check continuous flag\r\n        if (parameters[\"continuous\"] != null) {\r\n            if (parameters[\"continuous\"] === true) {\r\n                continuous = true;\r\n            }\r\n            else {\r\n                continuous = false;\r\n            }\r\n        }\r\n        //check cancel flag\r\n        if (parameters[\"cancel\"] != null) {\r\n            //noinspection RedundantIfStatementJS\r\n            if (parameters[\"cancel\"] === true) {\r\n                cancel = true;\r\n            }\r\n            else {\r\n                cancel = false;\r\n            }\r\n        }\r\n        // Set retry true by default...\r\n        parametersObj[\"retry\"] = true;\r\n        //check parameters to throw to pouchDB\r\n        if (parameters[\"retry\"] != null) {\r\n            parametersObj[\"retry\"] = parameters[\"retry\"];\r\n        }\r\n        if (parameters[\"filter\"] != null) {\r\n            parametersObj[\"filter\"] = parameters[\"filter\"];\r\n        }\r\n        if (parameters[\"doc_ids\"] != null) {\r\n            parametersObj[\"doc_ids\"] = parameters[\"doc_ids\"];\r\n        }\r\n        if (parameters[\"query_params\"] != null) {\r\n            parametersObj[\"query_params\"] = parameters[\"query_params\"];\r\n        }\r\n        if (parameters[\"view\"] != null) {\r\n            parametersObj[\"view\"] = parameters[\"view\"];\r\n        }\r\n        if (parameters[\"since\"] != null) {\r\n            parametersObj[\"since\"] = parameters[\"since\"];\r\n        }\r\n        if (parameters[\"heartbeat\"] != null) {\r\n            parametersObj[\"heartbeat\"] = parameters[\"heartbeat\"];\r\n        }\r\n        if (parameters[\"timeout\"] != null) {\r\n            parametersObj[\"timeout\"] = parameters[\"timeout\"];\r\n        }\r\n        if (parameters[\"batch_size\"] != null) {\r\n            parametersObj[\"batch_size\"] = parameters[\"batch_size\"];\r\n        }\r\n        if (parameters[\"batches_limit\"] != null) {\r\n            parametersObj[\"batches_limit\"] = parameters[\"batches_limit\"];\r\n        }\r\n        if (parameters[\"back_off_function\"] != null) {\r\n            parametersObj[\"back_off_function\"] = parameters[\"back_off_function\"];\r\n        }\r\n        if (parameters[\"checkpoint\"] != null) {\r\n            parametersObj[\"checkpoint\"] = parameters[\"checkpoint\"];\r\n        }\r\n        if (parameters[\"seq_interval\"] != null) {\r\n            parametersObj[\"seq_interval\"] = parameters[\"seq_interval\"];\r\n        }\r\n        const remoteDB = new PouchDB$1(this.c8oFullSyncDatabaseUrl, this.remotePouchHeader);\r\n        let rep = fullSyncReplication.replication = this.database.sync(remoteDB, parametersObj);\r\n        const param = parameters;\r\n        const progress = new C8oProgress();\r\n        progress.raw = rep;\r\n        progress.continuous = false;\r\n        return new Promise((resolve, reject) => {\r\n            rep.on(\"change\", (info) => {\r\n                progress.finished = false;\r\n                if (info.direction === \"pull\") {\r\n                    progress.pull = true;\r\n                    progress.status = rep.pull.state;\r\n                    progress.finished = rep.pull.state !== \"active\";\r\n                }\r\n                else if (info.direction === \"push\") {\r\n                    progress.pull = false;\r\n                    progress.status = rep.push.state;\r\n                    progress.finished = rep.push.state !== \"active\";\r\n                }\r\n                progress.total = info.change.docs_read;\r\n                progress.current = info.change.docs_written;\r\n                param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                c8oResponseListener.onProgressResponse(progress, param);\r\n            }).on(\"complete\", (info) => {\r\n                progress.finished = true;\r\n                progress.pull = false;\r\n                progress.total = info.push.docs_read;\r\n                progress.current = info.push.docs_written;\r\n                progress.status = info.status;\r\n                progress.finished = true;\r\n                param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                c8oResponseListener.onProgressResponse(progress, param);\r\n                progress.pull = true;\r\n                progress.total = info.pull.docs_read;\r\n                progress.current = info.pull.docs_written;\r\n                c8oResponseListener.onProgressResponse(progress, param);\r\n                if (rep.canceled == true && continuous) {\r\n                    this.c8o.log._trace(\"Replication is continuous but has been canceled\");\r\n                    rep.cancel();\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    if (!this.manual_canceled) {\r\n                        handler();\r\n                    }\r\n                }\r\n                else if (continuous) {\r\n                    rep.cancel();\r\n                    parametersObj[\"live\"] = true;\r\n                    rep = fullSyncReplication.replication = this.database.sync(remoteDB, parametersObj);\r\n                    progress.continuous = true;\r\n                    progress.raw = rep;\r\n                    progress.taskInfo = \"n/a\";\r\n                    progress.pull = true;\r\n                    progress.status = \"live\";\r\n                    progress.finished = false;\r\n                    progress.pull = true;\r\n                    progress.total = 0;\r\n                    progress.current = 0;\r\n                    c8oResponseListener.onProgressResponse(progress, param);\r\n                    progress.pull = false;\r\n                    c8oResponseListener.onProgressResponse(progress, param);\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    rep.on(\"change\", (info) => {\r\n                        progress.finished = false;\r\n                        if (info.direction === \"pull\") {\r\n                            progress.pull = true;\r\n                            progress.status = rep.pull.state;\r\n                        }\r\n                        else if (info.direction === \"push\") {\r\n                            progress.pull = false;\r\n                            progress.status = rep.push.state;\r\n                        }\r\n                        progress.total = info.change.docs_read;\r\n                        progress.current = info.change.docs_written;\r\n                        param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                        c8oResponseListener.onProgressResponse(progress, param);\r\n                    })\r\n                        .on(\"paused\", () => {\r\n                        try {\r\n                            if ((this.c8o.database[\"replications\"].map(x => x.id == id)).length > 0) {\r\n                                rep.cancel();\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                        }\r\n                        progress.finished = true;\r\n                        c8oResponseListener.onProgressResponse(progress, param);\r\n                        if (progress.total === 0 && progress.current === 0) {\r\n                            progress.pull = !progress.pull;\r\n                            c8oResponseListener.onProgressResponse(progress, param);\r\n                        }\r\n                    })\r\n                        .on(\"error\", (err) => {\r\n                        if (err.message === \"Unexpected end of JSON input\") {\r\n                            progress.finished = true;\r\n                            progress.status = \"live\";\r\n                            c8oResponseListener.onProgressResponse(progress, parameters);\r\n                        }\r\n                        else {\r\n                            rep.cancel();\r\n                            if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                                if (parameters[\"force_retry\"] == true) {\r\n                                    this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Forcing Restarting replication\");\r\n                                    this.database.sync(remoteDB, { timeout: 600000, retry: true });\r\n                                }\r\n                                else {\r\n                                    this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Restarting automatically replication\");\r\n                                }\r\n                            }\r\n                            else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                                reject(\"NO_NETWORK\");\r\n                            }\r\n                            else {\r\n                                reject(err);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                else if (!continuous) {\r\n                    rep.cancel();\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    this.c8o.log._trace(\"Replication is finished, modifying its state\");\r\n                    if (!this.manual_canceled) {\r\n                        handler();\r\n                    }\r\n                }\r\n            }).on(\"error\", (err) => {\r\n                rep.cancel();\r\n                if (mutex != undefined) {\r\n                    mutex.release();\r\n                }\r\n                if (err.message === \"Unexpected end of JSON input\") {\r\n                    progress.finished = true;\r\n                    progress.status = \"Complete\";\r\n                    c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    rep.cancel();\r\n                }\r\n                else if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                    if (parameters[\"force_retry\"] == true) {\r\n                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Forcing Restarting replication\");\r\n                        this.database.sync(remoteDB, { timeout: 600000, retry: true });\r\n                    }\r\n                    else {\r\n                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Restarting automatically replication\");\r\n                    }\r\n                }\r\n                else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                    reject(\"NO_NETWORK\");\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            });\r\n            if (cancel) {\r\n                if (rep != null) {\r\n                    this.c8o.log._trace(\"Replication canceled called, modifying its state\");\r\n                    handler();\r\n                    rep.cancel();\r\n                    progress.finished = true;\r\n                    if (c8oResponseListener != null && c8oResponseListener instanceof C8oResponseProgressListener) {\r\n                        c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    }\r\n                }\r\n                if (mutex != undefined) {\r\n                    mutex.release();\r\n                }\r\n            }\r\n        }).catch((error) => {\r\n            throw error.toString();\r\n        });\r\n    }\r\n    /**\r\n     * Starts a replication taking into account parameters.<br/>\r\n     * This action does not directly return something but setup a callback raised when the replication raises change events.\r\n     *\r\n     * @param fullSyncReplication\r\n     * @param c8oResponseListener\r\n     * @param parameters\r\n     */\r\n    startReplication(fullSyncReplication, parameters, c8oResponseListener, handler, id = null, mutex = null) {\r\n        let continuous = false;\r\n        let cancel = false;\r\n        const parametersObj = {};\r\n        //stop replication if exists\r\n        if (fullSyncReplication.replication != null) {\r\n            fullSyncReplication.replication.cancel();\r\n        }\r\n        this._id = id;\r\n        //check continuous flag\r\n        if (parameters[\"continuous\"] != null) {\r\n            if (parameters[\"continuous\"] == true) {\r\n                continuous = true;\r\n            }\r\n            else {\r\n                continuous = false;\r\n            }\r\n        }\r\n        //check cancel flag\r\n        if (parameters[\"cancel\"] != null) {\r\n            //noinspection RedundantIfStatementJS\r\n            if (parameters[\"cancel\"] == true) {\r\n                cancel = true;\r\n            }\r\n            else {\r\n                cancel = false;\r\n            }\r\n        }\r\n        //check parameters to throw to pouchDB\r\n        // Set retry true by default...\r\n        parametersObj[\"retry\"] = true;\r\n        if (parameters[\"retry\"] != null) {\r\n            parametersObj[\"retry\"] = parameters[\"retry\"];\r\n        }\r\n        if (parameters[\"filter\"] != null) {\r\n            parametersObj[\"filter\"] = parameters[\"filter\"];\r\n        }\r\n        if (parameters[\"doc_ids\"] != null) {\r\n            parametersObj[\"doc_ids\"] = parameters[\"doc_ids\"];\r\n        }\r\n        if (parameters[\"query_params\"] != null) {\r\n            parametersObj[\"query_params\"] = parameters[\"query_params\"];\r\n        }\r\n        if (parameters[\"view\"] != null) {\r\n            parametersObj[\"view\"] = parameters[\"view\"];\r\n        }\r\n        if (parameters[\"since\"] != null) {\r\n            parametersObj[\"since\"] = parameters[\"since\"];\r\n        }\r\n        if (parameters[\"heartbeat\"] != null) {\r\n            parametersObj[\"heartbeat\"] = parameters[\"heartbeat\"];\r\n        }\r\n        if (parameters[\"timeout\"] != null) {\r\n            parametersObj[\"timeout\"] = parameters[\"timeout\"];\r\n        }\r\n        if (parameters[\"batch_size\"] != null) {\r\n            parametersObj[\"batch_size\"] = parameters[\"batch_size\"];\r\n        }\r\n        if (parameters[\"batches_limit\"] != null) {\r\n            parametersObj[\"batches_limit\"] = parameters[\"batches_limit\"];\r\n        }\r\n        if (parameters[\"back_off_function\"] != null) {\r\n            parametersObj[\"back_off_function\"] = parameters[\"back_off_function\"];\r\n        }\r\n        if (parameters[\"checkpoint\"] != null) {\r\n            parametersObj[\"checkpoint\"] = parameters[\"checkpoint\"];\r\n        }\r\n        if (parameters[\"seq_interval\"] != null) {\r\n            parametersObj[\"seq_interval\"] = parameters[\"seq_interval\"];\r\n        }\r\n        const remoteDB = new PouchDB$1(this.c8oFullSyncDatabaseUrl, this.remotePouchHeader);\r\n        let rep = fullSyncReplication.replication = fullSyncReplication.pull ? this.database.replicate.from(remoteDB, parametersObj) : this.database.replicate.to(remoteDB, parametersObj);\r\n        const progress = new C8oProgress();\r\n        progress.raw = rep;\r\n        progress.pull = fullSyncReplication.pull;\r\n        progress.continuous = false;\r\n        return new Promise((resolve, reject) => {\r\n            rep.on(\"change\", (info) => {\r\n                progress.total = info.docs_read;\r\n                progress.current = info.docs_written;\r\n                progress.status = \"change\";\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                c8oResponseListener.onProgressResponse(progress, parameters);\r\n            }).on(\"complete\", (info) => {\r\n                progress.finished = true;\r\n                progress.total = info.docs_read;\r\n                progress.current = info.docs_written;\r\n                progress.status = \"complete\";\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                c8oResponseListener.onProgressResponse(progress, parameters);\r\n                if (rep.canceled == true && continuous) {\r\n                    this.c8o.log._trace(\"Replication is continuous but has been canceled\");\r\n                    rep.cancel();\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    if (!this.manual_canceled) {\r\n                        handler();\r\n                    }\r\n                }\r\n                if (continuous) {\r\n                    rep.cancel();\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    parametersObj[\"live\"] = true;\r\n                    rep = fullSyncReplication.replication = fullSyncReplication.pull ? this.database.replicate.from(remoteDB, parametersObj) : this.database.replicate.to(remoteDB, parametersObj);\r\n                    progress.continuous = true;\r\n                    progress.raw = rep;\r\n                    progress.taskInfo = \"n/a\";\r\n                    rep.on(\"change\", (info) => {\r\n                        progress.finished = false;\r\n                        progress.total = info.docs_read;\r\n                        progress.current = info.docs_written;\r\n                        progress.status = \"change\";\r\n                        parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                        c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    })\r\n                        .on(\"paused\", () => {\r\n                        try {\r\n                            if ((this.c8o.database[\"replications\"].map(x => x.id == id)).length > 0) {\r\n                                rep.cancel();\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                        }\r\n                    })\r\n                        .on(\"error\", (err) => {\r\n                        if (err.message === \"Unexpected end of JSON input\") {\r\n                            progress.finished = true;\r\n                            progress.status = \"live\";\r\n                            c8oResponseListener.onProgressResponse(progress, parameters);\r\n                        }\r\n                        else {\r\n                            rep.cancel();\r\n                            if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                                reject(\"TIMEOUT\");\r\n                            }\r\n                            else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                                reject(\"NO_NETWORK\");\r\n                            }\r\n                            else {\r\n                                reject(err);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                else if (!continuous) {\r\n                    rep.cancel();\r\n                    if (mutex != undefined) {\r\n                        mutex.release();\r\n                    }\r\n                    this.c8o.log._trace(\"Replication is finished, modifying its state\");\r\n                    if (!this.manual_canceled) {\r\n                        handler();\r\n                    }\r\n                }\r\n            }).on(\"error\", (err) => {\r\n                rep.cancel();\r\n                if (mutex != undefined) {\r\n                    mutex.release();\r\n                }\r\n                if (err.message === \"Unexpected end of JSON input\") {\r\n                    progress.finished = true;\r\n                    progress.status = \"complete\";\r\n                    parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                    c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    rep.cancel();\r\n                }\r\n                else if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                    reject(\"TIMEOUT\");\r\n                }\r\n                else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                    reject(\"NO_NETWORK\");\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            });\r\n            if (cancel) {\r\n                if (mutex != undefined) {\r\n                    mutex.release();\r\n                }\r\n                if (rep != null) {\r\n                    this.c8o.log._trace(\"Replication canceled called, modifying its state\");\r\n                    handler();\r\n                    rep.cancel();\r\n                    progress.finished = true;\r\n                    if (c8oResponseListener != null && c8oResponseListener instanceof C8oResponseProgressListener) {\r\n                        c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    }\r\n                }\r\n            }\r\n        }).catch((error) => {\r\n            throw error.toString();\r\n        });\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get getdatabseName() {\r\n        return this.databaseName;\r\n    }\r\n    get getdatabase() {\r\n        return this.database;\r\n    }\r\n    deleteDB() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.database != null) {\r\n                this.database.destroy().then((response) => {\r\n                    this.database = null;\r\n                    resolve(response);\r\n                }).catch((error) => {\r\n                    this.c8o.log._debug(\"Failed to close DB, will retry: \", error.message);\r\n                    this.database.destroy().then((response) => {\r\n                        this.database = null;\r\n                        resolve(response);\r\n                    }).catch((error) => {\r\n                        this.c8o.log._debug(\"Failed to close DB, second attempt has failed \", error.message);\r\n                        reject(error);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * cancel Pull Replication\r\n     */\r\n    cancelPullReplication() {\r\n        if (this.pullFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.pullFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n    /**\r\n     * cancel Push Replication\r\n     */\r\n    cancelPushReplication() {\r\n        if (this.pushFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.pushFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n    /**\r\n     * cancel Sync Replication\r\n     */\r\n    cancelSyncReplication() {\r\n        if (this.syncFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.syncFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n}\n\nclass FullSyncDeleteDocumentParameter {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n}\r\nFullSyncDeleteDocumentParameter.DOCID = new FullSyncDeleteDocumentParameter(\"docid\");\r\nFullSyncDeleteDocumentParameter.REV = new FullSyncDeleteDocumentParameter(\"rev\");\n\nclass FullSyncAttachmentParameter {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n}\r\nFullSyncAttachmentParameter.DOCID = new FullSyncAttachmentParameter(\"docid\");\r\nFullSyncAttachmentParameter.NAME = new FullSyncAttachmentParameter(\"name\");\r\nFullSyncAttachmentParameter.CONTENT_TYPE = new FullSyncAttachmentParameter(\"content_type\");\r\nFullSyncAttachmentParameter.CONTENT = new FullSyncAttachmentParameter(\"content\");\n\nclass FullSyncGetDocumentParameter {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n}\r\nFullSyncGetDocumentParameter.DOCID = new FullSyncGetDocumentParameter(\"docid\");\n\nclass FullSyncGetViewParameter {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n}\r\nFullSyncGetViewParameter.VIEW = new FullSyncGetViewParameter(\"view\");\r\nFullSyncGetViewParameter.DDOC = new FullSyncGetViewParameter(\"ddoc\");\n\nvar _a;\r\n/**\r\n * Created by charlesg on 10/01/2017.\r\n */\r\n// @dynamic\r\nclass FullSyncRequestable {\r\n    constructor(value, handleFullSyncRequestOp) {\r\n        this.value = value;\r\n        this.handleFullSyncRequestOp = handleFullSyncRequestOp;\r\n    }\r\n    handleFullSyncRequest(c8oFullSync, databaseName, parameters, c8oResponseListener) {\r\n        return new Promise((resolve, reject) => {\r\n            this.handleFullSyncRequestOp(c8oFullSync, databaseName, parameters, c8oResponseListener).then((result) => {\r\n                resolve(result);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    static getFullSyncRequestable(value) {\r\n        const fullSyncRequestableValues = FullSyncRequestable.values();\r\n        for (let i = 0; i < fullSyncRequestableValues.length; i++) {\r\n            if (fullSyncRequestableValues[i].value === value) {\r\n                return fullSyncRequestableValues[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    static values() {\r\n        return [this.GET, this.DELETE, this.POST, this.ALL, this.ALL_LOCAL, this.VIEW, this.SYNC, this.REPLICATE_PULL, this.REPLICATE_PUSH, this.RESET, this.CREATE, this.DESTROY, this.PUT_ATTACHMENT, this.GET_ATTACHMENT, this.DELETE_ATTACHMENT, this.BULK, this.INFO, this.CREATEINDEX, this.FIND, this.DELETEINDEX, this.GETINDEXES, this.EXPLAIN, this.SEARCH];\r\n    }\r\n}\r\n_a = FullSyncRequestable;\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.GET = new FullSyncRequestable(\"get\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        const docid = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, true);\r\n        resolve(c8oFullSync.handleGetDocumentRequest(databaseName, docid, parameters));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.DELETE = new FullSyncRequestable(\"delete\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        const docid = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, true);\r\n        c8oFullSync.handleDeleteDocumentRequest(databaseName, docid, parameters).then((result) => {\r\n            resolve(result);\r\n        }).catch((error) => {\r\n            reject(error);\r\n        });\r\n    })\r\n        .catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.POST = new FullSyncRequestable(\"post\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const fullSyncPolicyParameter = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncPostDocumentParameter.POLICY.name, false);\r\n            const fullSyncPolicy = FullSyncPolicy.getFullSyncPolicy(fullSyncPolicyParameter);\r\n            let fullSyncPolicySubMerge = [];\r\n            if (fullSyncPolicyParameter == \"merge\") {\r\n                for (let elem in parameters) {\r\n                    if (elem.indexOf(\"_use_merge\") == 0) {\r\n                        let key = elem.substring(11);\r\n                        let value = parameters[elem];\r\n                        fullSyncPolicySubMerge.push({ key: key, value: value });\r\n                    }\r\n                }\r\n            }\r\n            resolve(c8oFullSync.handlePostDocumentRequest(databaseName, fullSyncPolicy, parameters, fullSyncPolicySubMerge));\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.PUT_ATTACHMENT = new FullSyncRequestable(\"put_attachment\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        const docid = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n        const name = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n        const contentType = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.CONTENT_TYPE.name, false);\r\n        const content = C8oUtilsCore.getParameterObjectValue(parameters, FullSyncAttachmentParameter.CONTENT.name, false);\r\n        resolve(c8oFullSync.handlePutAttachmentRequest(databaseName, docid, name, contentType, content));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\nFullSyncRequestable.GET_ATTACHMENT = new FullSyncRequestable(\"get_attachment\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        const docid = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n        const name = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n        resolve(c8oFullSync.handleGetAttachmentRequest(databaseName, docid, name, parameters));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.DELETE_ATTACHMENT = new FullSyncRequestable(\"delete_attachment\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        const docid = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n        const name = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n        resolve(c8oFullSync.handleDeleteAttachmentRequest(databaseName, docid, name));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.ALL = new FullSyncRequestable(\"all\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        c8oFullSync.handleAllDocumentsRequest(databaseName, parameters)\r\n            .then((result) => {\r\n            resolve(result);\r\n        });\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.ALL_LOCAL = new FullSyncRequestable(\"all_local\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        c8oFullSync.handleAllLocalDocumentsRequest(databaseName, parameters)\r\n            .then((result) => {\r\n            resolve(result);\r\n        });\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.VIEW = new FullSyncRequestable(\"view\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        const ddoc = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetViewParameter.DDOC.name, false);\r\n        const view = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetViewParameter.VIEW.name, false);\r\n        c8oFullSync.handleGetViewRequest(databaseName, ddoc, view, parameters).then((result) => {\r\n            resolve(result);\r\n        }).catch((error) => {\r\n            reject(error);\r\n        });\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.CREATEINDEX = new FullSyncRequestable(\"createIndex\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const fields = C8oUtilsCore.peekParameterObjectValue(parameters, \"fields\", false);\r\n        let result = yield c8oFullSync.handleCreateIndexRequest(databaseName, fields, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n}));\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.FIND = new FullSyncRequestable(\"find\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const selector = C8oUtilsCore.peekParameterObjectValue(parameters, \"selector\", false);\r\n        let result = yield c8oFullSync.handleGetFindRequest(databaseName, selector, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n}));\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.EXPLAIN = new FullSyncRequestable(\"explain\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const selector = C8oUtilsCore.peekParameterObjectValue(parameters, \"selector\", false);\r\n        let result = yield c8oFullSync.handleExplainRequest(databaseName, selector, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n}));\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.GETINDEXES = new FullSyncRequestable(\"getIndexes\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result = yield c8oFullSync.handleGetIndexesRequest(databaseName, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n}));\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.DELETEINDEX = new FullSyncRequestable(\"deleteIndex\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result = yield c8oFullSync.handleDeleteIndexRequest(databaseName, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n}));\r\n//noinspection JSUnusedLocalSymbols\r\nFullSyncRequestable.SEARCH = new FullSyncRequestable(\"search\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const query = C8oUtilsCore.peekParameterObjectValue(parameters, \"query\", false);\r\n        const fields = C8oUtilsCore.peekParameterObjectValue(parameters, \"fields\", false);\r\n        let result = yield c8oFullSync.handleSearchRequest(databaseName, query, fields, parameters);\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        return e;\r\n    }\r\n}));\r\nFullSyncRequestable.SYNC = new FullSyncRequestable(\"sync\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    let pullFinish = false;\r\n    let pushFinish = false;\r\n    return new Promise((resolve, reject) => {\r\n        c8oFullSync.handleSyncRequest(databaseName, parameters, new C8oResponseProgressListener((progress, parameters) => {\r\n            if (parameters[\"cancel\"] == true) {\r\n                resolve({ ok: true });\r\n            }\r\n            else {\r\n                if (!pullFinish && progress.pull && progress.finished) {\r\n                    pullFinish = true;\r\n                    c8oFullSync.c8o.log._debug(\"handleFullSyncRequest pullFinish = true: \" + progress.toString());\r\n                }\r\n                if (!pushFinish && progress.push && progress.finished) {\r\n                    pushFinish = true;\r\n                    c8oFullSync.c8o.log._debug(\"handleFullSyncRequest pushFinish = true: \" + progress.toString());\r\n                }\r\n                if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                    c8oFullSync.c8o.log._debug(\"handleFullSyncRequest onJsonResponse: \" + progress.toString());\r\n                    const varNull = null;\r\n                    c8oResponseListener.onJsonResponse(varNull, parameters);\r\n                }\r\n                if (pullFinish || pushFinish) {\r\n                    resolve({ ok: true });\r\n                }\r\n            }\r\n        })).catch((error) => {\r\n            reject(error);\r\n        });\r\n    })\r\n        .catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\nFullSyncRequestable.REPLICATE_PULL = new FullSyncRequestable(\"replicate_pull\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        c8oFullSync.handleReplicatePullRequest(databaseName, parameters, new C8oResponseProgressListener((progress, param) => {\r\n            if (parameters[\"cancel\"] == true) {\r\n                resolve({ ok: true });\r\n            }\r\n            else {\r\n                if (progress.finished) {\r\n                    resolve({ ok: true });\r\n                }\r\n                if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                    const varNull = null;\r\n                    c8oResponseListener.onJsonResponse(varNull, param);\r\n                }\r\n            }\r\n        })).catch((error) => {\r\n            reject(error);\r\n        });\r\n    })\r\n        .catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\nFullSyncRequestable.REPLICATE_PUSH = new FullSyncRequestable(\"replicate_push\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        c8oFullSync.handleReplicatePushRequest(databaseName, parameters, new C8oResponseProgressListener((progress, param) => {\r\n            if (parameters[\"cancel\"] == true) {\r\n                resolve({ ok: true });\r\n            }\r\n            else {\r\n                if (progress.finished) {\r\n                    resolve({ ok: true });\r\n                }\r\n                if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                    const varNull = null;\r\n                    c8oResponseListener.onJsonResponse(varNull, param);\r\n                }\r\n            }\r\n        })).catch((error) => {\r\n            reject(error);\r\n        });\r\n    })\r\n        .catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\nFullSyncRequestable.RESET = new FullSyncRequestable(\"reset\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        c8oFullSync.handleResetDatabaseRequest(databaseName).then((response) => {\r\n            c8oFullSync.c8o.subscriber_database_reset.next({ databaseName: databaseName, success: true, error: false });\r\n            resolve(response);\r\n        }).catch((error) => {\r\n            c8oFullSync.c8o.subscriber_database_reset.error({ databaseName: databaseName, success: false, error: true, nativeError: error });\r\n            reject(error);\r\n        });\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\nFullSyncRequestable.CREATE = new FullSyncRequestable(\"create\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        resolve(c8oFullSync.handleCreateDatabaseRequest(databaseName));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\nFullSyncRequestable.BULK = new FullSyncRequestable(\"bulk\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        resolve(c8oFullSync.handleBulkRequest(databaseName, parameters));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\nFullSyncRequestable.INFO = new FullSyncRequestable(\"info\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve) => {\r\n        resolve(c8oFullSync.handleInfoRequest(databaseName));\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\r\n//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\nFullSyncRequestable.DESTROY = new FullSyncRequestable(\"destroy\", (c8oFullSync, databaseName, parameters, c8oResponseListener) => {\r\n    return new Promise((resolve, reject) => {\r\n        c8oFullSync.handleDestroyDatabaseRequest(databaseName).then((response) => {\r\n            resolve(response);\r\n        }).catch((error) => {\r\n            reject(error);\r\n        });\r\n    }).catch((error) => {\r\n        throw error;\r\n    });\r\n});\n\nclass FullSyncResponse {\r\n}\r\n/**\r\n * The response key indicating the operation status.\r\n */\r\nFullSyncResponse.RESPONSE_KEY_OK = \"ok\";\r\n/**\r\n * The response key indicating the document ID.\r\n */\r\nFullSyncResponse.RESPONSE_KEY_DOCUMENT_ID = \"id\";\r\n/**\r\n * The response key indicating the document revision.\r\n */\r\nFullSyncResponse.RESPONSE_KEY_DOCUMENT_REVISION = \"rev\";\r\n/**\r\n * Returned by a fullSync operation without return data.\r\n */\r\nclass FullSyncAbstractResponse {\r\n    constructor(operationStatus) {\r\n        this.operationStatus = operationStatus;\r\n    }\r\n    getProperties() {\r\n        const properties = {};\r\n        properties[FullSyncResponse.RESPONSE_KEY_OK] = this.operationStatus;\r\n        return properties;\r\n    }\r\n}\r\n/**\r\n * Represents a default fullSync response.\r\n */\r\nclass FullSyncDefaultResponse extends FullSyncAbstractResponse {\r\n    constructor(operationStatus) {\r\n        super(operationStatus);\r\n    }\r\n}\r\n/**\r\n * Returned by a fullSync document operation without return data.\r\n */\r\nclass FullSyncDocumentOperationResponse extends FullSyncAbstractResponse {\r\n    constructor(documentId, documentRevision, operationStatus) {\r\n        super(operationStatus);\r\n        this.documentId = documentId;\r\n        this.documentRevision = documentRevision;\r\n    }\r\n    getProperties() {\r\n        const properties = super.getProperties();\r\n        properties[FullSyncResponse.RESPONSE_KEY_DOCUMENT_ID] = this.documentId;\r\n        properties[FullSyncResponse.RESPONSE_KEY_DOCUMENT_REVISION] = this.documentRevision;\r\n        return properties;\r\n    }\r\n}\n\nclass C8oAlldocsLocal {\r\n    constructor(c8o) {\r\n        this.c8o = c8o;\r\n        this.DB_VERSION = 5;\r\n        this.LOCAL_STORE = 'local-store';\r\n        this.ATTACH_STORE = 'attach-store';\r\n    }\r\n    alldocs(opts, db) {\r\n        return new Promise((resolve, reject) => {\r\n            let dbName = db[\"prefix\"] + db[\"name\"];\r\n            opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;\r\n            if (opts.start_key) {\r\n                opts.startkey = opts.start_key;\r\n            }\r\n            if (opts.end_key) {\r\n                opts.endkey = opts.end_key;\r\n            }\r\n            if ('keys' in opts) {\r\n                if (!Array.isArray(opts.keys)) {\r\n                    return reject(new TypeError('options.keys must be an array'));\r\n                }\r\n                var incompatibleOpt = ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {\r\n                    return incompatibleOpt in opts;\r\n                })[0];\r\n                if (incompatibleOpt) {\r\n                    reject('Some query parameter is invalid' +\r\n                        'Query parameter `' + incompatibleOpt +\r\n                        '` is not compatible with multi-get');\r\n                    return;\r\n                }\r\n                if (!this.isRemote(db)) {\r\n                    this.allDocsKeysParse(opts);\r\n                    if (opts.keys.length === 0) {\r\n                        let callback = (arg1, arg2, arg3) => {\r\n                            resolve({ arg1: arg1, arg2: arg2, arg3: arg3 });\r\n                        };\r\n                        return this.idbAllDocs({ limit: 0 }, callback, dbName);\r\n                    }\r\n                }\r\n            }\r\n            let callback = (err, result) => {\r\n                if (!err) {\r\n                    this.c8o.log._trace(\"[c8oAlldocsLocal], alldocs: ok\");\r\n                }\r\n                else {\r\n                    this.c8o.log._error(\"[c8oAlldocsLocal], alldocs: an error occured :\", err);\r\n                }\r\n                resolve({ err: err, result: result });\r\n            };\r\n            return this.idbAllDocs(opts, callback, dbName);\r\n        });\r\n    }\r\n    openBase(DB_NAME, resolve = null, reject = null) {\r\n        if (resolve != null) {\r\n            this.doOpenBase(DB_NAME, resolve, reject);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            this.doOpenBase(DB_NAME, resolve, reject);\r\n        });\r\n    }\r\n    doOpenBase(DB_NAME, resolve = null, reject = null) {\r\n        try {\r\n            let req = window.indexedDB.open(DB_NAME, this.DB_VERSION);\r\n            req.onsuccess = (event) => {\r\n                if (req.result.objectStoreNames.length == 0) {\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, we need to re-initialized it\");\r\n                    this.restaureDb(DB_NAME)\r\n                        .then(() => {\r\n                        this.c8o.log._debug(\"[alldocs] database has been re-initialized, we will execute all docs\");\r\n                        this.openBase(DB_NAME, resolve, reject);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    resolve(req.result);\r\n                }\r\n            };\r\n        }\r\n        catch (err) {\r\n            reject(err);\r\n        }\r\n    }\r\n    restaureDb(DB_NAME) {\r\n        return new Promise((resolve, reject) => {\r\n            var dbDeleteRequest = window.indexedDB.deleteDatabase(DB_NAME);\r\n            dbDeleteRequest.onerror = (event) => {\r\n                this.c8o.log._error(\"[alldocs] database is corrupted, failed to re-initialized database\");\r\n                reject(event);\r\n            };\r\n            dbDeleteRequest.onsuccess = (event) => {\r\n                this.c8o.log._debug(\"[alldocs] database is corrupted, deletion successfull\");\r\n                // Let us open our database\r\n                var DBOpenRequest = window.indexedDB.open(DB_NAME, 5);\r\n                DBOpenRequest.onsuccess = (event) => {\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, creation successfull\");\r\n                    resolve();\r\n                };\r\n                DBOpenRequest.onupgradeneeded = (event) => {\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, database need to be upgraded\");\r\n                };\r\n                DBOpenRequest.onerror = (event) => {\r\n                    this.c8o.log._error(\"[alldocs] database is corrupted, creation errored\", event);\r\n                    reject(event);\r\n                };\r\n            };\r\n        });\r\n    }\r\n    idbAllDocs(opts, callback, DB_NAME) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let idb = yield this.openBase(DB_NAME);\r\n            var start = 'startkey' in opts ? opts.startkey : false;\r\n            var end = 'endkey' in opts ? opts.endkey : false;\r\n            var key = 'key' in opts ? opts.key : false;\r\n            var keys = 'keys' in opts ? opts.keys : false;\r\n            var skip = opts.skip || 0;\r\n            var limit = typeof opts.limit === 'number' ? opts.limit : -1;\r\n            var inclusiveEnd = opts.inclusive_end !== false;\r\n            var keyRange;\r\n            var keyRangeError;\r\n            if (!keys) {\r\n                keyRange = this.createKeyRange(start, end, inclusiveEnd, key, opts.descending);\r\n                keyRangeError = keyRange && keyRange.error;\r\n                if (keyRangeError &&\r\n                    !(keyRangeError.name === \"DataError\" && keyRangeError.code === 0)) {\r\n                    // DataError with error code 0 indicates start is less than end, so\r\n                    // can just do an empty query. Else need to throw\r\n                    return callback(\"indexed_db_went_bad\" +\r\n                        keyRangeError.name, keyRangeError.message);\r\n                }\r\n            }\r\n            var stores = [this.LOCAL_STORE];\r\n            if (opts.attachments) {\r\n                stores.push(this.ATTACH_STORE);\r\n            }\r\n            var txnResult = this.openTransactionSafely(idb, stores, 'readonly');\r\n            if (txnResult[\"error\"]) {\r\n                return callback(txnResult[\"error\"]);\r\n            }\r\n            var txn = txnResult[\"txn\"];\r\n            txn.oncomplete = onTxnComplete;\r\n            txn.onabort = callback;\r\n            var localStore = txn.objectStore(this.LOCAL_STORE);\r\n            var results = [];\r\n            var docCount;\r\n            var countRequest = localStore.count();\r\n            countRequest.onsuccess = function () {\r\n                docCount = countRequest.result;\r\n            };\r\n            function allDocsInner(winningRev$$1, metadata) {\r\n                var row = {\r\n                    id: metadata.id,\r\n                    key: metadata.id,\r\n                    value: {\r\n                        rev: winningRev$$1\r\n                    }\r\n                };\r\n                var deleted = metadata.deleted;\r\n                if (deleted) {\r\n                    if (keys) {\r\n                        results.push(row);\r\n                        // deleted docs are okay with \"keys\" requests\r\n                        row[\"value\"][\"deleted\"] = true;\r\n                        row[\"doc\"] = null;\r\n                    }\r\n                }\r\n                else if (skip-- <= 0) {\r\n                    results.push(row);\r\n                    if (opts.include_docs) {\r\n                        row[\"doc\"] = metadata[\"_c8o_inlcude\"];\r\n                    }\r\n                }\r\n            }\r\n            let processBatch = (batchValues) => {\r\n                for (var i = 0, len = batchValues.length; i < len; i++) {\r\n                    if (results.length === limit) {\r\n                        break;\r\n                    }\r\n                    var batchValue = batchValues[i];\r\n                    if (batchValue.error && keys) {\r\n                        // key was not found with \"keys\" requests\r\n                        results.push(batchValue);\r\n                        continue;\r\n                    }\r\n                    var metadata = this.decodeMetadata(batchValue);\r\n                    var winningRev$$1 = metadata[\"winningRev\"];\r\n                    metadata[\"_c8o_inlcude\"] = batchValue;\r\n                    allDocsInner(winningRev$$1, metadata);\r\n                }\r\n            };\r\n            function onBatch(batchKeys, batchValues, cursor) {\r\n                if (!cursor) {\r\n                    return;\r\n                }\r\n                processBatch(batchValues);\r\n                if (results.length < limit) {\r\n                    cursor.continue();\r\n                }\r\n            }\r\n            function onGetAll(e) {\r\n                var values = e.target.result;\r\n                if (opts.descending) {\r\n                    values = values.reverse();\r\n                }\r\n                processBatch(values);\r\n            }\r\n            function onResultsReady() {\r\n                var returnVal = {\r\n                    total_rows: docCount,\r\n                    offset: opts.skip,\r\n                    rows: results\r\n                };\r\n                callback(null, returnVal);\r\n            }\r\n            function onTxnComplete() {\r\n                if (opts.attachments) {\r\n                    this.postProcessAttachments(results, opts.binary).then(onResultsReady);\r\n                }\r\n                else {\r\n                    onResultsReady();\r\n                }\r\n            }\r\n            // don't bother doing any requests if start > end or limit === 0\r\n            if (keyRangeError || limit === 0) {\r\n                return;\r\n            }\r\n            if (keys) {\r\n                return this.allDocsKeys(opts.keys, localStore, onBatch);\r\n            }\r\n            if (limit === -1) { // just fetch everything\r\n                return this.getAll(localStore, keyRange, onGetAll);\r\n            }\r\n            // else do a cursor\r\n            // choose a batch size based on the skip, since we'll need to skip that many\r\n            this.runBatchedCursor(localStore, keyRange, opts.descending, limit + skip, onBatch);\r\n        });\r\n    }\r\n    runBatchedCursor(objectStore, keyRange, descending, batchSize, onBatch) {\r\n        if (batchSize === -1) {\r\n            batchSize = 1000;\r\n        }\r\n        // Bail out of getAll()/getAllKeys() in the following cases:\r\n        // 1) either method is unsupported - we need both\r\n        // 2) batchSize is 1 (might as well use IDBCursor)\r\n        // 3) descending – no real way to do this via getAll()/getAllKeys()\r\n        var useGetAll = typeof objectStore.getAll === 'function' &&\r\n            typeof objectStore.getAllKeys === 'function' &&\r\n            batchSize > 1 && !descending;\r\n        var keysBatch;\r\n        var valuesBatch;\r\n        var pseudoCursor;\r\n        function onGetAll(e) {\r\n            valuesBatch = e.target.result;\r\n            if (keysBatch) {\r\n                onBatch(keysBatch, valuesBatch, pseudoCursor);\r\n            }\r\n        }\r\n        function onGetAllKeys(e) {\r\n            keysBatch = e.target.result;\r\n            if (valuesBatch) {\r\n                onBatch(keysBatch, valuesBatch, pseudoCursor);\r\n            }\r\n        }\r\n        function continuePseudoCursor() {\r\n            if (!keysBatch.length) { // no more results\r\n                return onBatch();\r\n            }\r\n            // fetch next batch, exclusive start\r\n            var lastKey = keysBatch[keysBatch.length - 1];\r\n            var newKeyRange;\r\n            if (keyRange && keyRange.upper) {\r\n                try {\r\n                    newKeyRange = IDBKeyRange.bound(lastKey, keyRange.upper, true, keyRange.upperOpen);\r\n                }\r\n                catch (e) {\r\n                    if (e.name === \"DataError\" && e.code === 0) {\r\n                        return onBatch(); // we're done, startkey and endkey are equal\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                newKeyRange = IDBKeyRange.lowerBound(lastKey, true);\r\n            }\r\n            keyRange = newKeyRange;\r\n            keysBatch = null;\r\n            valuesBatch = null;\r\n            objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;\r\n            objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;\r\n        }\r\n        function onCursor(e) {\r\n            var cursor = e.target.result;\r\n            if (!cursor) { // done\r\n                return onBatch();\r\n            }\r\n            // regular IDBCursor acts like a batch where batch size is always 1\r\n            onBatch([cursor.key], [cursor.value], cursor);\r\n        }\r\n        if (useGetAll) {\r\n            pseudoCursor = { \"continue\": continuePseudoCursor };\r\n            objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;\r\n            objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;\r\n        }\r\n        else if (descending) {\r\n            objectStore.openCursor(keyRange, 'prev').onsuccess = onCursor;\r\n        }\r\n        else {\r\n            objectStore.openCursor(keyRange).onsuccess = onCursor;\r\n        }\r\n    }\r\n    getAll(objectStore, keyRange, onSuccess) {\r\n        if (typeof objectStore.getAll === 'function') {\r\n            // use native getAll\r\n            objectStore.getAll(keyRange).onsuccess = onSuccess;\r\n            return;\r\n        }\r\n        // fall back to cursors\r\n        var values = [];\r\n        function onCursor(e) {\r\n            var cursor = e.target.result;\r\n            if (cursor) {\r\n                values.push(cursor.value);\r\n                cursor.continue();\r\n            }\r\n            else {\r\n                onSuccess({\r\n                    target: {\r\n                        result: values\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        objectStore.openCursor(keyRange).onsuccess = onCursor;\r\n    }\r\n    allDocsKeys(keys, docStore, onBatch) {\r\n        // It's not guaranted to be returned in right order  \r\n        var valuesBatch = new Array(keys.length);\r\n        var count = 0;\r\n        keys.forEach(function (key, index) {\r\n            docStore.get(key).onsuccess = function (event) {\r\n                if (event.target.result) {\r\n                    valuesBatch[index] = event.target.result;\r\n                }\r\n                else {\r\n                    valuesBatch[index] = { key: key, error: 'not_found' };\r\n                }\r\n                count++;\r\n                if (count === keys.length) {\r\n                    onBatch(keys, valuesBatch, {});\r\n                }\r\n            };\r\n        });\r\n    }\r\n    decodeMetadata(storedObject) {\r\n        if (!storedObject) {\r\n            return null;\r\n        }\r\n        var metadata = {};\r\n        metadata[\"winningRev\"] = storedObject._rev;\r\n        metadata[\"id\"] = storedObject._id;\r\n        return metadata;\r\n    }\r\n    openTransactionSafely(idb, stores, mode) {\r\n        try {\r\n            return {\r\n                txn: idb.transaction(stores, mode)\r\n            };\r\n        }\r\n        catch (err) {\r\n            return {\r\n                error: err\r\n            };\r\n        }\r\n    }\r\n    isRemote(db) {\r\n        if (typeof db._remote === 'boolean') {\r\n            return db._remote;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (typeof db.type === 'function') {\r\n            return db.type() === 'http';\r\n        }\r\n        /* istanbul ignore next */\r\n        return false;\r\n    }\r\n    allDocsKeysParse(opts) {\r\n        var keys = ('limit' in opts) ?\r\n            opts.keys.slice(opts.skip, opts.limit + opts.skip) :\r\n            (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;\r\n        opts.keys = keys;\r\n        opts.skip = 0;\r\n        delete opts.limit;\r\n        if (opts.descending) {\r\n            keys.reverse();\r\n            opts.descending = false;\r\n        }\r\n    }\r\n    createKeyRange(start, end, inclusiveEnd, key, descending) {\r\n        try {\r\n            if (start && end) {\r\n                if (descending) {\r\n                    return IDBKeyRange.bound(end, start, !inclusiveEnd, false);\r\n                }\r\n                else {\r\n                    return IDBKeyRange.bound(start, end, false, !inclusiveEnd);\r\n                }\r\n            }\r\n            else if (start) {\r\n                if (descending) {\r\n                    return IDBKeyRange.upperBound(start);\r\n                }\r\n                else {\r\n                    return IDBKeyRange.lowerBound(start);\r\n                }\r\n            }\r\n            else if (end) {\r\n                if (descending) {\r\n                    return IDBKeyRange.lowerBound(end, !inclusiveEnd);\r\n                }\r\n                else {\r\n                    return IDBKeyRange.upperBound(end, !inclusiveEnd);\r\n                }\r\n            }\r\n            else if (key) {\r\n                return IDBKeyRange.only(key);\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { error: e };\r\n        }\r\n        return null;\r\n    }\r\n}\n\nclass C8oFullSync {\r\n    constructor(c8o) {\r\n        this.c8o = c8o;\r\n        this.fullSyncDatabaseUrlBase = c8o.endpointConvertigo + C8oFullSync.FULL_SYNC_URL_PATH;\r\n        this.localSuffix = (c8o.fullSyncLocalSuffix !== null) ? c8o.fullSyncLocalSuffix : \"_device\";\r\n    }\r\n    /**\r\n     * Handles a fullSync request.<br/>\r\n     * It determines the type of the request thanks to parameters.\r\n     *\r\n     * @param _parameters\r\n     * @param listener\r\n     * @return promise<any>\r\n     * @throws C8oException\r\n     */\r\n    handleFullSyncRequest(_parameters, listener) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => {\r\n                const parameters = {};\r\n                for (const val in _parameters) {\r\n                    if (_parameters[val] instanceof Blob != true && typeof _parameters[val] !== \"function\") {\r\n                        //if it's not a blob then stringify and parse the value to make some values like true case insensitive ( from string to boolean)\r\n                        parameters[val] = JSON.parse(JSON.stringify(_parameters[val]));\r\n                    }\r\n                    else {\r\n                        parameters[val] = _parameters[val];\r\n                    }\r\n                }\r\n                const projectParameterValue = C8oUtilsCore.peekParameterStringValue(parameters, C8oCore.ENGINE_PARAMETER_PROJECT, true);\r\n                if (projectParameterValue.indexOf(C8oFullSync.FULL_SYNC_PROJECT) !== 0) {\r\n                    reject(new C8oException(C8oExceptionMessage.invalidParameterValue(projectParameterValue, \"its don't start with\" + C8oFullSync.FULL_SYNC_PROJECT)));\r\n                }\r\n                let fullSyncRequestableValue = C8oUtilsCore.peekParameterStringValue(parameters, C8oCore.ENGINE_PARAMETER_SEQUENCE, true);\r\n                //  get rid of the optional trailing #RouteHint present in the sequence\r\n                if (fullSyncRequestableValue.indexOf(\"#\") !== -1) {\r\n                    fullSyncRequestableValue = fullSyncRequestableValue.substring(0, fullSyncRequestableValue.indexOf(\"#\"));\r\n                }\r\n                const fullSyncRequestable = FullSyncRequestable.getFullSyncRequestable(fullSyncRequestableValue);\r\n                if (fullSyncRequestable === null) {\r\n                    reject(new C8oException(C8oExceptionMessage.invalidParameterValue(C8oCore.ENGINE_PARAMETER_PROJECT, C8oExceptionMessage.unknownValue(\"fullSync requestable\", fullSyncRequestableValue))));\r\n                }\r\n                let databaseName = projectParameterValue.substring(C8oFullSync.FULL_SYNC_PROJECT.length);\r\n                if (databaseName.length < 1) {\r\n                    databaseName = this.c8o.defaultDatabaseName;\r\n                    if (databaseName === null) {\r\n                        reject(new C8oException(C8oExceptionMessage.invalidParameterValue(C8oCore.ENGINE_PARAMETER_PROJECT, C8oExceptionMessage.missingValue(\"fullSync database name\"))));\r\n                    }\r\n                }\r\n                let response;\r\n                fullSyncRequestable.handleFullSyncRequest(this, databaseName, parameters, listener).then((result) => {\r\n                    response = result;\r\n                    if (response === null || response === undefined) {\r\n                        reject(new C8oException(C8oExceptionMessage.couchNullResult()));\r\n                    }\r\n                    resolve(this.handleFullSyncResponse(response, listener));\r\n                }).catch((error) => {\r\n                    if (error instanceof C8oException) {\r\n                        reject(error);\r\n                    }\r\n                    else {\r\n                        reject(new C8oException(C8oExceptionMessage.FullSyncRequestFail(), error));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    //noinspection JSUnusedLocalSymbols\r\n    /**\r\n     *\r\n     * @param response\r\n     * @param listener\r\n     * @return response\r\n     * @throws C8oException Failed to parse response.\r\n     */\r\n    handleFullSyncResponse(response, listener) {\r\n        return response;\r\n    }\r\n    /**\r\n     * Checks if request parameters correspond to a fullSync request.\r\n     */\r\n    static isFullSyncRequest(requestParameter) {\r\n        if (C8oUtilsCore.getParameterStringValue(requestParameter, C8oCore.ENGINE_PARAMETER_PROJECT, false) !== null) {\r\n            return C8oUtilsCore.getParameterStringValue(requestParameter, C8oCore.ENGINE_PARAMETER_PROJECT, false).indexOf(C8oFullSync.FULL_SYNC_PROJECT) === 0;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nC8oFullSync.FULL_SYNC_URL_PATH = \"/fullsync/\";\r\n/**\r\n * The project requestable value to execute a fullSync request.\r\n */\r\nC8oFullSync.FULL_SYNC_PROJECT = \"fs://\";\r\nC8oFullSync.FULL_SYNC__ID = \"_id\";\r\nC8oFullSync.FULL_SYNC__REV = \"_rev\";\r\nC8oFullSync.FULL_SYNC__ATTACHMENTS = \"_attachments\";\r\nclass C8oFullSyncCbl extends C8oFullSync {\r\n    constructor(c8o) {\r\n        super(c8o);\r\n        this.fullSyncChangeListeners = [];\r\n        this.cblChangeListeners = [];\r\n        this.replicationsToRestart = [];\r\n        this.canceled = false;\r\n        this.fullSyncDatabases = {};\r\n        if (window[\"C8oFullSyncCbl\"] == undefined) {\r\n            window[\"C8oFullSyncCbl\"] = [];\r\n        }\r\n    }\r\n    /**\r\n     * Returns the database with this name in the list.<br/>\r\n     * If it does not already exist yet then creates it and adds it to the list.\r\n     *\r\n     * @param databaseName\r\n     * @return C8oFullSyncDatabase\r\n     * @throws C8oException Failed to create a new fullSync database.\r\n     */\r\n    getOrCreateFullSyncDatabase(databaseName, isLocalCache = false) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let mutex = window[\"C8oFullSyncCbl\"][databaseName] == undefined ? window[\"C8oFullSyncCbl\"][databaseName] = new Semaphore(1) : window[\"C8oFullSyncCbl\"][databaseName];\r\n            yield mutex.acquire();\r\n            let localDatabaseName = databaseName + this.localSuffix;\r\n            localDatabaseName = this.c8o.database.localName(localDatabaseName, true);\r\n            let prefix = this.c8o.prefixBase == true && isLocalCache == false ? this.c8o.session.user.name + \"_\" : \"\";\r\n            if (this.fullSyncDatabases[localDatabaseName] == null) {\r\n                this.fullSyncDatabases[localDatabaseName] = new C8oFullSyncDatabase(this.c8o, databaseName, this.fullSyncDatabaseUrlBase, this.localSuffix, prefix);\r\n            }\r\n            mutex.release();\r\n            return this.fullSyncDatabases[localDatabaseName];\r\n        });\r\n    }\r\n    handleFullSyncResponse(response, listener) {\r\n        response = super.handleFullSyncResponse(response, listener);\r\n        if (listener instanceof C8oResponseJsonListener) {\r\n            if (response instanceof FullSyncDocumentOperationResponse) {\r\n                return C8oFullSyncTranslator.fullSyncDocumentOperationResponseToJson(response);\r\n            }\r\n            else if (response instanceof FullSyncDefaultResponse) {\r\n                return C8oFullSyncTranslator.fullSyncDefaultResponseToJson(response);\r\n            }\r\n            else if (response instanceof Object) {\r\n                return response;\r\n            }\r\n            else {\r\n                throw new C8oException(C8oExceptionMessage.illegalArgumentIncompatibleListener(listener.toString(), typeof response));\r\n            }\r\n        }\r\n    }\r\n    handleGetAttachmentUrlRequest(fullSyncDatabaseName, docid, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase = null;\r\n            fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(fullSyncDatabaseName);\r\n            const attachmentName = C8oUtilsCore.getParameterStringValue(parameters, \"attachment_name\", false);\r\n            return new Promise((resolve) => {\r\n                fullSyncDatabase.getdatabase.getAttachment(docid, attachmentName).then((buffer) => {\r\n                    resolve(buffer);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleGetDocumentRequest(fullSyncDatabaseName, docid, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase = null;\r\n            let param;\r\n            param = parameters[\"attachments\"] ? { attachments: true } : {};\r\n            parameters[\"binary\"] ? param[\"binary\"] = true : {};\r\n            fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(fullSyncDatabaseName);\r\n            return new Promise((resolve, reject) => {\r\n                fullSyncDatabase.getdatabase.get(docid, param).then((document) => {\r\n                    if (document == null) {\r\n                        reject(new C8oRessourceNotFoundException((C8oExceptionMessage.ressourceNotFound(\"requested document \\\"\" + docid + \"\\\"\"))));\r\n                    }\r\n                    if (document === null) {\r\n                        document = {};\r\n                    }\r\n                    resolve(document);\r\n                })\r\n                    .catch((error) => {\r\n                    reject(error);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleDeleteDocumentRequest(DatabaseName, docid, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let fullSyncDatabase = null;\r\n                fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(DatabaseName);\r\n                const revParameterValue = C8oUtilsCore.getParameterStringValue(parameters, FullSyncDeleteDocumentParameter.REV.name, false);\r\n                let documentRevision;\r\n                if (revParameterValue === null) {\r\n                    fullSyncDatabase.getdatabase.get(docid).then((doc) => {\r\n                        if (doc === null) {\r\n                            reject(new C8oRessourceNotFoundException(\"Cannot find document\"));\r\n                        }\r\n                        documentRevision = doc._rev;\r\n                        return fullSyncDatabase.getdatabase.remove(doc);\r\n                    }).then((result) => {\r\n                        resolve(new FullSyncDocumentOperationResponse(docid, documentRevision, result.ok));\r\n                    }).catch((err) => {\r\n                        reject(new C8oException(C8oExceptionMessage.couchRequestDeleteDocument(), err));\r\n                    });\r\n                }\r\n                else {\r\n                    fullSyncDatabase.getdatabase.remove(docid, revParameterValue)\r\n                        .then((result) => {\r\n                        resolve(new FullSyncDocumentOperationResponse(docid, documentRevision, result.ok));\r\n                    }).catch((err) => {\r\n                        reject(new C8oException(C8oExceptionMessage.couchRequestDeleteDocument(), err));\r\n                    });\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    handlePostDocumentRequest(databaseName, fullSyncPolicy, parameters, fullsyncPolicySubMerge = null) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase;\r\n            fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            let subkeySeparatorParameterValue = C8oUtilsCore.getParameterStringValue(parameters, C8oCore.FS_SUBKEY_SEPARATOR, false);\r\n            if (subkeySeparatorParameterValue == null) {\r\n                subkeySeparatorParameterValue = \".\";\r\n            }\r\n            const newProperties = {};\r\n            for (let i = 0; i < Object.keys(parameters).length; i++) {\r\n                let parameterName = Object.keys(parameters)[i];\r\n                if (parameterName.indexOf(\"__\") !== 0 && parameterName.indexOf(\"_use_\") !== 0) {\r\n                    let objectParameterValue = parameters[Object.keys(parameters)[i]];\r\n                    const paths = parameterName.split(subkeySeparatorParameterValue);\r\n                    if (paths.length > 1) {\r\n                        parameterName = paths[0];\r\n                        let count = paths.length - 1;\r\n                        while (count > 0) {\r\n                            const tmpObject = {};\r\n                            tmpObject[paths[count]] = objectParameterValue;\r\n                            objectParameterValue = tmpObject;\r\n                            count--;\r\n                        }\r\n                        const existProperty = newProperties[parameterName];\r\n                        if (existProperty != null) {\r\n                            C8oFullSyncCbl.mergeProperties(objectParameterValue, existProperty);\r\n                        }\r\n                    }\r\n                    newProperties[parameterName] = objectParameterValue;\r\n                }\r\n            }\r\n            if (fullsyncPolicySubMerge != null) {\r\n            }\r\n            const db = fullSyncDatabase.getdatabase;\r\n            return new Promise((resolve, reject) => {\r\n                fullSyncPolicy.action(db, newProperties, { fullsyncPolicySubMerge: fullsyncPolicySubMerge, subkeySeparatorParameterValue: subkeySeparatorParameterValue })\r\n                    .then((createdDocument) => {\r\n                    const fsDocOpeResp = new FullSyncDocumentOperationResponse(createdDocument.id, createdDocument.rev, createdDocument.ok);\r\n                    resolve(fsDocOpeResp);\r\n                }).catch((error) => {\r\n                    reject(error);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handlePutAttachmentRequest(databaseName, docid, attachmentName, attachmentType, attachmentContent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let document = null;\r\n            const fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            return new Promise((resolve, reject) => {\r\n                fullSyncDatabase.getdatabase.get(docid).then((result) => {\r\n                    document = result;\r\n                    if (document !== null) {\r\n                        fullSyncDatabase.getdatabase.putAttachment(docid, attachmentName, result._rev, attachmentContent, attachmentType)\r\n                            .then((result) => {\r\n                            //  handle result\r\n                            resolve(new FullSyncDocumentOperationResponse(result._id, result._rev, result.ok));\r\n                        }).catch((err) => {\r\n                            reject(new C8oCouchBaseLiteException(\"Unable to put the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n                        });\r\n                    }\r\n                    else {\r\n                        reject(new C8oRessourceNotFoundException(\"Cannot find document\"));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleGetAttachmentRequest(databaseName, docid, attachmentName, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let document = null;\r\n            const fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            return new Promise((resolve, reject) => {\r\n                fullSyncDatabase.getdatabase.getAttachment(docid, attachmentName, parameters)\r\n                    .then((buffer) => {\r\n                    resolve(buffer);\r\n                }).catch((err) => {\r\n                    reject(new C8oCouchBaseLiteException(\"Unable to put the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleDeleteAttachmentRequest(databaseName, docid, attachmentName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let document = null;\r\n            const fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            return new Promise((resolve, reject) => {\r\n                fullSyncDatabase.getdatabase.get(docid).then((result) => {\r\n                    document = result;\r\n                }).then(() => {\r\n                    if (document !== null) {\r\n                        fullSyncDatabase.getdatabase.removeAttachment(docid, attachmentName, document._rev).catch((err) => {\r\n                            reject(new C8oCouchBaseLiteException(\"Unable to delete the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n                        });\r\n                    }\r\n                    else {\r\n                        reject(new C8oRessourceNotFoundException(\"Document do not exists\"));\r\n                    }\r\n                    resolve(new FullSyncDocumentOperationResponse(document._id, document._rev, true));\r\n                })\r\n                    .catch((err) => {\r\n                    reject(new C8oException(err.message, err));\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleAllDocumentsRequest(databaseName, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase = null;\r\n            fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            return new Promise((resolve, reject) => {\r\n                fullSyncDatabase.getdatabase\r\n                    .allDocs(parameters)\r\n                    .then((res) => {\r\n                    resolve(res);\r\n                })\r\n                    .catch((err) => {\r\n                    reject(new C8oException(err.stack));\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleAllLocalDocumentsRequest(databaseName, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase = null;\r\n            fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            let c8oAlldocsLocal = new C8oAlldocsLocal(this.c8o);\r\n            return new Promise((resolve, reject) => {\r\n                c8oAlldocsLocal.alldocs(parameters, fullSyncDatabase.database)\r\n                    .then((res) => {\r\n                    if (!res.err) {\r\n                        resolve(res.result);\r\n                    }\r\n                    else {\r\n                        if (res[\"err\"][\"stack\"] != undefined) {\r\n                            reject(new C8oException(res[\"err\"][\"stack\"]));\r\n                        }\r\n                        else {\r\n                            reject(new C8oException(JSON.stringify(res[\"err\"])));\r\n                        }\r\n                    }\r\n                })\r\n                    .catch((err) => {\r\n                    if (err[\"err\"][\"stack\"] != undefined) {\r\n                        reject(new C8oException(err[\"err\"][\"stack\"]));\r\n                    }\r\n                    else {\r\n                        reject(new C8oException(JSON.stringify(err[\"err\"])));\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleGetViewRequest(databaseName, ddocName, viewName, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase = null;\r\n            fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            let attachments;\r\n            let binary;\r\n            let include_docs;\r\n            if (parameters[\"attachments\"] && window[\"cblite\"] !== undefined) {\r\n                attachments = C8oUtilsCore.getParameterStringValue(parameters, \"attachments\", false);\r\n                binary = C8oUtilsCore.getParameterStringValue(parameters, \"binary\", false);\r\n                include_docs = C8oUtilsCore.getParameterStringValue(parameters, \"include_docs\", false);\r\n            }\r\n            return new Promise((resolve, reject) => {\r\n                fullSyncDatabase.getdatabase.query(ddocName + \"/\" + viewName, parameters)\r\n                    .then((result) => {\r\n                    if (attachments) {\r\n                        const array = [];\r\n                        let len = 0;\r\n                        for (const resp of result.rows) {\r\n                            this.handleGetDocumentRequest(databaseName, resp.id, {\r\n                                attachments: true,\r\n                                binary: true,\r\n                                include_docs: true,\r\n                            }).then((getResult) => {\r\n                                array.push(getResult);\r\n                                len++;\r\n                                if (len === result.rows.length) {\r\n                                    result.rows = array;\r\n                                    resolve(result);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        resolve(result);\r\n                    }\r\n                }).catch((error) => {\r\n                    reject(new C8oException(C8oExceptionMessage.couchRequestGetView(), error));\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleCreateIndexRequest(databaseName, fields, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            try {\r\n                parameters[\"fields\"] = fields;\r\n                var result = yield fullSyncDatabase.getdatabase.createIndex({ index: parameters });\r\n                return result;\r\n            }\r\n            catch (err) {\r\n                throw new C8oException(C8oExceptionMessage.couchRequestCreateIndex(), err);\r\n            }\r\n        });\r\n    }\r\n    handleGetFindRequest(databaseName, selector, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            try {\r\n                parameters[\"selector\"] = selector;\r\n                var result = yield fullSyncDatabase.getdatabase.find(parameters);\r\n                return result;\r\n            }\r\n            catch (err) {\r\n                throw new C8oException(C8oExceptionMessage.couchRequestFind(), err);\r\n            }\r\n        });\r\n    }\r\n    handleExplainRequest(databaseName, selector, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            try {\r\n                parameters[\"selector\"] = selector;\r\n                var result = yield fullSyncDatabase.getdatabase.explain(parameters);\r\n                return result;\r\n            }\r\n            catch (err) {\r\n                throw new C8oException(C8oExceptionMessage.couchRequestExplain(), err);\r\n            }\r\n        });\r\n    }\r\n    handleGetIndexesRequest(databaseName, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            try {\r\n                var result = yield fullSyncDatabase.getdatabase.getIndexes();\r\n                return result;\r\n            }\r\n            catch (err) {\r\n                throw new C8oException(C8oExceptionMessage.couchRequestGetIndexes(), err);\r\n            }\r\n        });\r\n    }\r\n    handleDeleteIndexRequest(databaseName, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            try {\r\n                var result = yield fullSyncDatabase.getdatabase.deleteIndex(parameters);\r\n                return result;\r\n            }\r\n            catch (err) {\r\n                throw new C8oException(C8oExceptionMessage.couchRequestDeleteIndex(), err);\r\n            }\r\n        });\r\n    }\r\n    handleSearchRequest(databaseName, query, fields, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            parameters[\"query\"] = query;\r\n            parameters[\"fields\"] = fields;\r\n            try {\r\n                var result = yield fullSyncDatabase.getdatabase.search(parameters);\r\n                return result;\r\n            }\r\n            catch (err) {\r\n                throw new C8oException(C8oExceptionMessage.couchRequestSearch(), err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Check network status before starting a replication\r\n     */\r\n    checkState() {\r\n        return this.c8o.reachable == undefined ? false : this.c8o.reachable;\r\n    }\r\n    handleSyncRequest(databaseName, parameters, c8oResponseListener) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"sync\", fullSyncDatabase);\r\n            if (!resp[0]) {\r\n                this.c8o.session.mutexCheckSession.acquire();\r\n                return fullSyncDatabase.startAllReplications(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n            }\r\n            else {\r\n                this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n                return new Promise(() => { });\r\n            }\r\n        });\r\n    }\r\n    handleReplicatePullRequest(databaseName, parameters, c8oResponseListener) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"pull\", fullSyncDatabase);\r\n            if (!resp[0]) {\r\n                this.c8o.session.mutexCheckSession.acquire();\r\n                return fullSyncDatabase.startPullReplication(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n            }\r\n            else {\r\n                this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n                return new Promise(() => { });\r\n            }\r\n        });\r\n    }\r\n    handleReplicatePushRequest(databaseName, parameters, c8oResponseListener) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"push\", fullSyncDatabase);\r\n            if (!resp[0]) {\r\n                this.c8o.session.mutexCheckSession.acquire();\r\n                return fullSyncDatabase.startPushReplication(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n            }\r\n            else {\r\n                this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n                return new Promise(() => { });\r\n            }\r\n        });\r\n    }\r\n    handleResetDatabaseRequest(databaseName) {\r\n        return new Promise((resolve, reject) => {\r\n            this.handleDestroyDatabaseRequest(databaseName)\r\n                .then(() => {\r\n                this.handleCreateDatabaseRequest(databaseName).\r\n                    then((res) => {\r\n                    resolve(res);\r\n                })\r\n                    .catch((err) => {\r\n                    reject(err);\r\n                });\r\n            })\r\n                .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    handleCreateDatabaseRequest(databaseName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            return new FullSyncDefaultResponse(true);\r\n        });\r\n    }\r\n    handleBulkRequest(databaseName, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            return new Promise((resolve, reject) => {\r\n                const header = {\r\n                    \"x-convertigo-sdk\": this.c8o.sdkVersion,\r\n                };\r\n                if (this.c8o.xsrfUsed) {\r\n                    const headerName = \"x-xsrf-token\";\r\n                    const fetch = \"Fetch\";\r\n                    header[headerName] = window.localStorage.getItem(headerName) != undefined ? window.localStorage.getItem(headerName) : fetch;\r\n                }\r\n                Object.assign(header, this.c8o.headers);\r\n                fullSyncDatabase.getdatabase.c8oload(parameters[\"data\"], {\r\n                    proxy: this.c8o.endpointConvertigo + \"/fullsync/\" + (fullSyncDatabase.getdatabseName).replace(\"_device\", \"\"),\r\n                    fetch: (url, opts) => {\r\n                        opts.credentials = 'include';\r\n                        for (let key in header) {\r\n                            opts.headers.set(key, header[key]);\r\n                        }\r\n                        return PouchDB.fetch(url, opts);\r\n                    }\r\n                }, this.c8o)\r\n                    .then(() => {\r\n                    resolve(new FullSyncDefaultResponse(true));\r\n                }).catch((err) => {\r\n                    //this.c8o.log._error(\"Error loading the \" + parameters[\"data\"] + \" database resource\" + JSON.stringify(err, Object.getOwnPropertyNames(err)))\r\n                    reject(new C8oException(\"Bulk Load failed\", err));\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleInfoRequest(databaseName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            return new Promise((resolve, reject) => {\r\n                fullSyncDatabase.getdatabase.info()\r\n                    .then((response) => {\r\n                    resolve(response);\r\n                }).catch((err) => {\r\n                    //this.c8o.log._error(\"Error loading the \" + parameters[\"data\"] + \" database resource\" + JSON.stringify(err, Object.getOwnPropertyNames(err)))\r\n                    reject(new C8oException(\"Get info failed\", err));\r\n                });\r\n            });\r\n        });\r\n    }\r\n    handleDestroyDatabaseRequest(databaseName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                const localDatabaseName = databaseName + this.localSuffix;\r\n                (yield this.getOrCreateFullSyncDatabase(databaseName)).deleteDB().then((response) => {\r\n                    if (this.fullSyncDatabases[this.c8o.database.localName(localDatabaseName)] != null) {\r\n                        delete this.fullSyncDatabases[this.c8o.database.localName(localDatabaseName)];\r\n                        this.c8o.database.cancelAllForbase(this.fullSyncDatabases[\"databaseName\"]);\r\n                    }\r\n                    resolve(new FullSyncDefaultResponse(response.ok));\r\n                }).catch((err) => {\r\n                    reject(new C8oException(err.name, err));\r\n                });\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Allow to clone object whithout reference\r\n     *\r\n     * @param obj Object: object to be cloned\r\n     */\r\n    static deepCloneObject(obj) {\r\n        if (obj === null || typeof obj !== 'object') {\r\n            return obj;\r\n        }\r\n        var temporarystorage = obj.constructor();\r\n        for (var key in obj) {\r\n            temporarystorage[key] = C8oFullSyncCbl.deepCloneObject(obj[key]);\r\n        }\r\n        return temporarystorage;\r\n    }\r\n    /**\r\n     * Recursive function that browse object to be modified and apply delete\r\n     *\r\n     * @param objToChange Object: the object to be modified\r\n     * @param path string: The path where to find object to be modified\r\n     * @param index number: index\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    static applySubPolicyDelete(objToChange, path, index, subPolicy) {\r\n        let arrayPath = path.split(subPolicy.subkeySeparatorParameterValue);\r\n        let length = arrayPath.length;\r\n        if (index + 1 == length) {\r\n            // delete key\r\n            delete objToChange[arrayPath[index]];\r\n        }\r\n        else {\r\n            //recursive call to navigate to property\r\n            C8oFullSyncCbl.applySubPolicyDelete(objToChange[arrayPath[index]], path, index + 1, subPolicy);\r\n        }\r\n    }\r\n    /**\r\n     * Recursive function that browse object to be modified and apply override\r\n     *\r\n     * @param objToChange Object: the object to be modified\r\n     * @param path string: The path where to find object to be modified\r\n     * @param index number: index\r\n     * @param source Object: the object posted\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    static applySubPolicyOverride(objToChange, path, index, source, subPolicy) {\r\n        let arrayPath = path.split(subPolicy.subkeySeparatorParameterValue);\r\n        let length = arrayPath.length;\r\n        if (index + 1 == length) {\r\n            // change key\r\n            // user has not given object to override\r\n            if (source == undefined) {\r\n            }\r\n            else if (source[arrayPath[index]] != null) {\r\n                objToChange[arrayPath[index]] = source[arrayPath[index]];\r\n            }\r\n        }\r\n        else {\r\n            //recursive call to navigate to property\r\n            if (source != undefined) {\r\n                if (objToChange == undefined) {\r\n                    objToChange = {};\r\n                }\r\n                C8oFullSyncCbl.applySubPolicyOverride(objToChange[arrayPath[index]], path, index + 1, source[arrayPath[index]], subPolicy);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Global function that will apply sub policy for merge\r\n     *\r\n     * @param override boolean: if we have to perform override sub policy or not\r\n     * @param source Object: the object posted\r\n     * @param objToChange Object: the object to be modified\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    static applySubPolicyForMerge(override, source, objToChange, subPolicy) {\r\n        for (let elem of subPolicy.fullsyncPolicySubMerge) {\r\n            switch (elem.value) {\r\n                case \"override\":\r\n                    if (override) {\r\n                        C8oFullSyncCbl.applySubPolicyOverride(objToChange, elem.key, 0, source, subPolicy);\r\n                    }\r\n                    break;\r\n                case \"delete\":\r\n                    C8oFullSyncCbl.applySubPolicyDelete(objToChange, elem.key, 0, subPolicy);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    static mergeProperties(newProperties, oldProperties, useMergePolicy = \"none\") {\r\n        for (let i = 0; i < Object.keys(oldProperties).length; i++) {\r\n            const oldPropertyKey = Object.keys(oldProperties)[i];\r\n            const oldPropertyValue = oldProperties[Object.keys(oldProperties)[i]];\r\n            // Checks if the new document contains the same key\r\n            if (newProperties[oldPropertyKey] !== null && newProperties[oldPropertyKey] !== undefined) {\r\n                const newDocumentValue = newProperties[oldPropertyKey];\r\n                if (Object.prototype.toString.call(newDocumentValue) === \"[object Array]\" && Object.prototype.toString.call(oldPropertyValue) === \"[object Array]\") {\r\n                    C8oFullSyncCbl.mergeArrayProperties(newDocumentValue, oldPropertyValue);\r\n                }\r\n                else if (typeof (newDocumentValue) === \"object\" && typeof (oldPropertyValue) === \"object\") {\r\n                    C8oFullSyncCbl.mergeProperties(newDocumentValue, oldPropertyValue);\r\n                }\r\n                else {\r\n                    // If the new document has the same key but its value is not the same type than the old one or if their type are \"simple\"\r\n                    // Does nothing cause the right value is the new one\r\n                }\r\n            }\r\n            else {\r\n                // If the new document does not contain the key then adds it\r\n                newProperties[oldPropertyKey] = oldPropertyValue;\r\n            }\r\n        }\r\n    }\r\n    static mergeArrayProperties(newArray, oldArray) {\r\n        const newArraySize = newArray.length;\r\n        const oldArraySize = oldArray.length;\r\n        for (let i = 0; i < oldArraySize; i++) {\r\n            let newArrayValue = null;\r\n            if (i < newArraySize) {\r\n                newArrayValue = newArray[i];\r\n            }\r\n            const oldArrayValue = oldArray[i];\r\n            if (newArrayValue !== null) {\r\n                if (newArrayValue instanceof Array && oldArrayValue instanceof Array) {\r\n                    C8oFullSyncCbl.mergeArrayProperties(newArrayValue, oldArrayValue);\r\n                }\r\n                else if (typeof (newArrayValue) === \"object\" && typeof (oldArrayValue) === \"object\") {\r\n                    C8oFullSyncCbl.mergeProperties(newArrayValue, oldArrayValue);\r\n                }\r\n                else {\r\n                    // If the new array value is not the same type than the old one or if their type are \"simple\"\r\n                    // Does nothing cause the right value is the new one\r\n                }\r\n            }\r\n            else {\r\n                // If the new array value is null then it means that it size is reach so we can add objects at its end\r\n                newArray.push(oldArrayValue);\r\n            }\r\n        }\r\n    }\r\n    //noinspection JSUnusedLocalSymbols\r\n    getDocucmentFromDatabase(c8o, databaseName, documentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let c8oFullSyncDatabase;\r\n                try {\r\n                    c8oFullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n                }\r\n                catch (err) {\r\n                    reject(new C8oException(C8oExceptionMessage.fullSyncGetOrCreateDatabase(databaseName), err));\r\n                }\r\n                c8oFullSyncDatabase.getdatabase().get(documentId).then((result) => {\r\n                    resolve(result);\r\n                });\r\n            }));\r\n        });\r\n    }\r\n    overrideDocument(document, properties, databaseName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            properties[C8oFullSync.FULL_SYNC__REV] = document._rev;\r\n            let c8oFullSyncDatabase;\r\n            try {\r\n                c8oFullSyncDatabase = yield this.getOrCreateFullSyncDatabase(databaseName);\r\n            }\r\n            catch (err) {\r\n                throw new C8oException(C8oExceptionMessage.fullSyncGetOrCreateDatabase(databaseName));\r\n            }\r\n            c8oFullSyncDatabase.getdatabase().put(properties)\r\n                .catch((err) => {\r\n                throw new C8oException(err.message, err);\r\n            });\r\n        });\r\n    }\r\n    getResponseFromLocalCache(c8oCallRequestIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(C8oCore.LOCAL_CACHE_DATABASE_NAME, true);\r\n            let localCacheDocument = null;\r\n            return new Promise((resolve, reject) => {\r\n                fullSyncDatabase.getdatabase.get(c8oCallRequestIdentifier).then((result) => {\r\n                    localCacheDocument = result;\r\n                    const response = JSON.stringify(localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE]);\r\n                    const responseType = localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE];\r\n                    const expirationDate = localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE];\r\n                    let responseString = null;\r\n                    let responseTypeString = null;\r\n                    let expirationDateNumber = -1;\r\n                    if (response != null) {\r\n                        if (typeof response === \"string\") {\r\n                            responseString = response;\r\n                        }\r\n                        else {\r\n                            reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                        }\r\n                    }\r\n                    if (responseType != null) {\r\n                        if (typeof responseType === \"string\") {\r\n                            responseTypeString = responseType;\r\n                        }\r\n                        else {\r\n                            reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                        }\r\n                    }\r\n                    if (expirationDate != null) {\r\n                        if (typeof expirationDate === \"number\") {\r\n                            expirationDateNumber = expirationDate;\r\n                            const currentTime = new Date().getTime();\r\n                            if (expirationDateNumber < currentTime) {\r\n                                reject(new C8oUnavailableLocalCacheException(C8oExceptionMessage.timeToLiveExpired()));\r\n                            }\r\n                        }\r\n                        else {\r\n                            reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                        }\r\n                    }\r\n                    resolve(new C8oLocalCacheResponse(responseString, responseTypeString, expirationDateNumber));\r\n                }).catch((err) => {\r\n                    if (err.status === 404) {\r\n                        resolve(new C8oUnavailableLocalCacheException(C8oExceptionMessage.localCacheDocumentJustCreated(), err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    saveResponseToLocalCache(c8oCallRequestIdentifier, localCacheResponse) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const fullSyncDatabase = yield this.getOrCreateFullSyncDatabase(C8oCore.LOCAL_CACHE_DATABASE_NAME, true);\r\n            return new Promise((resolve) => {\r\n                fullSyncDatabase.getdatabase.get(c8oCallRequestIdentifier).then((localCacheDocument) => {\r\n                    const properties = {};\r\n                    properties[C8oFullSync.FULL_SYNC__ID] = c8oCallRequestIdentifier;\r\n                    properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE] = localCacheResponse.getResponse();\r\n                    properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE] = localCacheResponse.getResponseType();\r\n                    if (localCacheResponse.getExpirationDate() > 0) {\r\n                        properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE] = localCacheResponse.getExpirationDate();\r\n                    }\r\n                    const currentRevision = localCacheDocument._rev;\r\n                    if (currentRevision !== null) {\r\n                        properties[C8oFullSyncCbl.FULL_SYNC__REV] = currentRevision;\r\n                    }\r\n                    fullSyncDatabase.getdatabase.put(properties).then((result) => {\r\n                        resolve(result);\r\n                    });\r\n                }).catch((error) => {\r\n                    if (error.status === 404) {\r\n                        const properties = {};\r\n                        properties[C8oFullSync.FULL_SYNC__ID] = c8oCallRequestIdentifier;\r\n                        properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE] = localCacheResponse.getResponse();\r\n                        properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE] = localCacheResponse.getResponseType();\r\n                        if (localCacheResponse.getExpirationDate() > 0) {\r\n                            properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE] = localCacheResponse.getExpirationDate();\r\n                        }\r\n                        fullSyncDatabase.getdatabase.put(properties).then((result) => {\r\n                            resolve(result);\r\n                        });\r\n                    }\r\n                    else {\r\n                        resolve(error);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    addFullSyncChangeListener(db, listener, parameters = {}) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (db === null || db === \"\") {\r\n                db = this.c8o.defaultDatabaseName;\r\n            }\r\n            const listeners = [];\r\n            if (this.fullSyncChangeListeners[db] != null) {\r\n                listeners[0] = this.fullSyncChangeListeners[db];\r\n            }\r\n            else {\r\n                listeners[0] = [];\r\n                this.fullSyncChangeListeners[db] = listeners[0];\r\n                if (parameters[\"since\"] == undefined) {\r\n                    parameters[\"since\"] = \"now\";\r\n                }\r\n                if (parameters[\"live\"] == undefined) {\r\n                    parameters[\"live\"] = true;\r\n                }\r\n                if (parameters[\"include_docs\"] == undefined) {\r\n                    parameters[\"include_docs\"] = true;\r\n                }\r\n                //noinspection UnnecessaryLocalVariableJS\r\n                const evtHandler = (yield this.getOrCreateFullSyncDatabase(db)).getdatabase\r\n                    .changes(parameters).on(\"change\", function (change) {\r\n                    const changes = {};\r\n                    const docs = [];\r\n                    // docs[\"isExternal\"] = false;\r\n                    const doc = {};\r\n                    doc[\"id\"] = change.doc._id;\r\n                    doc[\"rev\"] = change.doc._rev;\r\n                    doc[\"isConflict\"] = change.doc._conflicts;\r\n                    if (change.source != null) {\r\n                        doc[\"sourceUrl\"] = change.source;\r\n                    }\r\n                    docs.push(doc);\r\n                    changes[\"changes\"] = docs;\r\n                    for (const handler of listeners[0]) {\r\n                        if (handler !== undefined) {\r\n                            handler.onChange(changes);\r\n                        }\r\n                    }\r\n                });\r\n                this.cblChangeListeners[db] = evtHandler;\r\n            }\r\n            listeners[0].push(listener);\r\n        });\r\n    }\r\n    removeFullSyncChangeListener(db, listener) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (db === null || db === \"\") {\r\n                db = this.c8o.defaultDatabaseName;\r\n            }\r\n            if (this.fullSyncChangeListeners[db] != null) {\r\n                const listeners = this.fullSyncChangeListeners[db];\r\n                for (const list in listeners) {\r\n                    if (listeners[list] === listener) {\r\n                        delete listeners[list];\r\n                    }\r\n                }\r\n                if (listeners.length === 0 || listeners == null) {\r\n                    (yield this.getOrCreateFullSyncDatabase(db)).getdatabase.cancel();\r\n                    this.cblChangeListeners[db].cancel();\r\n                    delete this.fullSyncChangeListeners[db];\r\n                    delete this.cblChangeListeners[db];\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\nC8oFullSyncCbl.ATTACHMENT_PROPERTY_KEY_CONTENT_URL = \"content_url\";\n\nclass C8oLocalCache {\r\n    constructor(priority, ttl = -1, enabled = true) {\r\n        if (priority == null) {\r\n            throw new C8oException(\"Local Cache priority cannot be null\");\r\n        }\r\n        this.priority = priority;\r\n        this.ttl = ttl;\r\n        this.enabled = enabled;\r\n    }\r\n}\r\nC8oLocalCache.PARAM = \"__localCache\";\n\nclass C8oTranslator {\r\n    static stringToJSON(jsonValueString) {\r\n        return JSON.parse(jsonValueString);\r\n    }\r\n}\n\n/**\r\n * Thrown during an HTTP request.\r\n */\r\nclass C8oHttpRequestException extends C8oException {\r\n    constructor(message, cause = null) {\r\n        super(message, cause);\r\n        this.originalException = cause;\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oHttpRequestException.prototype);\r\n    }\r\n}\n\nclass C8oCallTask {\r\n    constructor(c8o, parameters, c8oResponseListener, c8oExceptionListener) {\r\n        this.c8o = c8o;\r\n        this.parameters = parameters;\r\n        this.c8oResponseListener = c8oResponseListener;\r\n        this.c8oExceptionListener = c8oExceptionListener;\r\n        c8o.log.logMethodCall(\"C8oCallTask\", parameters, c8oResponseListener, c8oExceptionListener);\r\n    }\r\n    get parameters() {\r\n        return this._parameters;\r\n    }\r\n    set parameters(value) {\r\n        this._parameters = value;\r\n    }\r\n    // called execute() in others SDK...\r\n    run() {\r\n        try {\r\n            this.handleRequest().then((response) => {\r\n                this.handleResponse(response);\r\n            }).catch((error) => {\r\n                this.c8oExceptionListener.onException(error, this.parameters);\r\n            });\r\n        }\r\n        catch (error) {\r\n            this.c8oExceptionListener.onException(error, this.parameters);\r\n        }\r\n    }\r\n    executeFromLive() {\r\n        delete this.parameters[C8oCore.FS_LIVE];\r\n        this.parameters[C8oCore.ENGINE_PARAMETER_FROM_LIVE] = true;\r\n        this.run();\r\n    }\r\n    handleRequest() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                try {\r\n                    const isFullSyncRequest = C8oFullSync.isFullSyncRequest(this.parameters);\r\n                    if (isFullSyncRequest) {\r\n                        this.c8o.log._trace(\"Is FullSync request\");\r\n                        // FS_LIVE\r\n                        const liveid = C8oUtilsCore.getParameterStringValue(this.parameters, C8oCore.FS_LIVE, false);\r\n                        if (liveid !== null) {\r\n                            const dbName = C8oUtilsCore.getParameterStringValue(this.parameters, C8oCore.ENGINE_PARAMETER_PROJECT, true).substring(C8oFullSync.FULL_SYNC_PROJECT.length);\r\n                            this.c8o.addLive(liveid, dbName, this);\r\n                        }\r\n                        yield this.c8o.c8oFullSync.handleFullSyncRequest(this.parameters, this.c8oResponseListener)\r\n                            .then((result) => {\r\n                            resolve(result);\r\n                        })\r\n                            .catch((error) => {\r\n                            if (error instanceof C8oException) {\r\n                                reject(error);\r\n                            }\r\n                            else {\r\n                                reject(new C8oException(C8oExceptionMessage.handleFullSyncRequest(), error));\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        let responseType = \"\";\r\n                        if (this.c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                            responseType = C8oCore.RESPONSE_TYPE_JSON;\r\n                        }\r\n                        else {\r\n                            // Return an Exception because the C8oListener used is unknown\r\n                            reject(new C8oException(C8oExceptionMessage.wrongListener(this.c8oResponseListener)));\r\n                        }\r\n                        let c8oCallRequestIdentifier = null;\r\n                        const localCache = C8oUtilsCore.getParameterObjectValue(this.parameters, C8oLocalCache.PARAM, false);\r\n                        let localCacheEnabled = false;\r\n                        if (localCache != null) {\r\n                            if (localCacheEnabled !== undefined) {\r\n                                delete this.parameters[C8oLocalCache.PARAM];\r\n                                localCacheEnabled = localCache.enabled;\r\n                                if (localCacheEnabled) {\r\n                                    try {\r\n                                        c8oCallRequestIdentifier = C8oUtilsCore.identifyC8oCallRequest(this.parameters, responseType);\r\n                                    }\r\n                                    catch (error) {\r\n                                        reject(new C8oException(C8oExceptionMessage.serializeC8oCallRequest(), error));\r\n                                    }\r\n                                    // here we are not testing if localcahe is available.\r\n                                    // if connection is not available this will generates an exception that will be caught\r\n                                    if (localCache.priority.isAvailable) {\r\n                                        try {\r\n                                            const result = yield this.c8o.c8oFullSync.getResponseFromLocalCache(c8oCallRequestIdentifier);\r\n                                            if (result instanceof C8oUnavailableLocalCacheException) {\r\n                                                // no entry\r\n                                            }\r\n                                            else {\r\n                                                const localCacheResponse = result;\r\n                                                if (!localCacheResponse.isExpired()) {\r\n                                                    if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                                        resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                                        return;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        catch (error) {\r\n                                            if (error instanceof C8oUnavailableLocalCacheException) {\r\n                                                // no entry\r\n                                            }\r\n                                            else {\r\n                                                reject(error);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        // Get Response\r\n                        this.parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = yield this.c8o.deviceUUID;\r\n                        this.c8oCallUrl = this.c8o.endpoint + \"/.\" + responseType;\r\n                        let params = new Object();\r\n                        params = Object.assign(params, this.parameters);\r\n                        yield this.c8o.httpInterface.handleRequest(this.c8oCallUrl, params, this.c8oResponseListener).catch((error) => __awaiter(this, void 0, void 0, function* () {\r\n                            if (localCacheEnabled) {\r\n                                yield this.c8o.c8oFullSync.getResponseFromLocalCache(c8oCallRequestIdentifier).then((localCacheResponse) => {\r\n                                    try {\r\n                                        if (!localCacheResponse.isExpired()) {\r\n                                            if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                                resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    catch (error) {\r\n                                        // no entry\r\n                                    }\r\n                                });\r\n                            }\r\n                            if (error.status === 0) {\r\n                                reject(new C8oHttpRequestException(\"ERR_INTERNET_DISCONNECTED\", error));\r\n                            }\r\n                            else {\r\n                                reject(error);\r\n                            }\r\n                        })).then((result) => __awaiter(this, void 0, void 0, function* () {\r\n                            if (result !== undefined) {\r\n                                let isErrorR = result[\"error\"] != undefined ? result[\"error\"][\"code\"] != undefined ? result[\"error\"][\"message\"] != undefined ? result[\"error\"][\"details\"] != undefined ? true : false : false : false : false;\r\n                                let isErrorDoc = result[\"document\"] != undefined ? result[\"document\"][\"error\"] != undefined ? result[\"document\"][\"error\"][\"code\"] != undefined ? result[\"document\"][\"error\"][\"message\"] != undefined ? result[\"document\"][\"error\"][\"details\"] != undefined ? true : false : false : false : false : false;\r\n                                let isError = (isErrorR || isErrorDoc);\r\n                                if (isError) {\r\n                                    if (localCacheEnabled) {\r\n                                        yield this.c8o.c8oFullSync.getResponseFromLocalCache(c8oCallRequestIdentifier).then((localCacheResponse) => {\r\n                                            try {\r\n                                                if (!localCacheResponse.isExpired()) {\r\n                                                    if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                                        resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            catch (error) {\r\n                                                // no entry\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                    if (this.c8o.errorConvertigoIntoFail) {\r\n                                        reject(result);\r\n                                    }\r\n                                    else {\r\n                                        resolve(result);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    let response;\r\n                                    let responseString;\r\n                                    if (this.c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                                        try {\r\n                                            try {\r\n                                                responseString = result;\r\n                                            }\r\n                                            catch (error) {\r\n                                                reject(new C8oException(C8oExceptionMessage.parseInputStreamToString(), error));\r\n                                            }\r\n                                            response = result;\r\n                                        }\r\n                                        catch (error) {\r\n                                            reject(error);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        reject(new C8oException(C8oExceptionMessage.wrongListener(this.c8oResponseListener)));\r\n                                    }\r\n                                    if (localCacheEnabled) {\r\n                                        try {\r\n                                            let expirationDate = -1;\r\n                                            if (localCache.ttl > 0) {\r\n                                                expirationDate = localCache.ttl + (new Date).getTime();\r\n                                            }\r\n                                            const localCacheResponse = new C8oLocalCacheResponse(responseString, responseType, expirationDate);\r\n                                            const p1 = yield this.c8o.c8oFullSync.saveResponseToLocalCache(c8oCallRequestIdentifier, localCacheResponse);\r\n                                            Promise.all([p1])\r\n                                                .then(() => {\r\n                                                resolve(response);\r\n                                            });\r\n                                        }\r\n                                        catch (error) {\r\n                                            reject(new C8oException(C8oExceptionMessage.saveResponseToLocalCache()));\r\n                                        }\r\n                                    }\r\n                                    resolve(response);\r\n                                }\r\n                            }\r\n                        }));\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    reject(error);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    handleResponse(result) {\r\n        try {\r\n            if (this.c8oResponseListener === null) {\r\n                return;\r\n            }\r\n            else if (result instanceof Error || result instanceof C8oException) {\r\n                this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, result);\r\n            }\r\n            else if (result instanceof Object) {\r\n                this.c8o.log.logC8oCallJSONResponse(result, this.c8oCallUrl, this.parameters);\r\n                this.c8oResponseListener.onJsonResponse(result, this.parameters);\r\n            }\r\n            else {\r\n                this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, new C8oException(C8oExceptionMessage.wrongResult(result)));\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, error);\r\n        }\r\n    }\r\n}\n\nclass C8oFullSyncChangeListener {\r\n    constructor(change) {\r\n        this._onchange = change;\r\n    }\r\n    onChange(changes) {\r\n        this._onchange(changes);\r\n    }\r\n}\n\nclass C8oPromise {\r\n    constructor(c8o) {\r\n        this.c8o = c8o;\r\n    }\r\n    async() {\r\n        return new Promise((resolve, reject) => {\r\n            this.then((response, parameters) => {\r\n                resolve(response);\r\n                return null;\r\n            }).fail((error, parameters) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    toObservable() {\r\n        return new Observable((observer) => {\r\n            this.then((response, parameters) => {\r\n                if (parameters[\"__live\"] == true || parameters[\"continuous\"] == true) {\r\n                    observer.next({ response: response, parameters: parameters });\r\n                }\r\n                else {\r\n                    observer.next({ response: response, parameters: parameters });\r\n                    observer.complete();\r\n                }\r\n                return null;\r\n            })\r\n                .progress((progress) => {\r\n                observer.next(progress);\r\n            })\r\n                .fail((error, parameters) => {\r\n                observer.error(error);\r\n            });\r\n        });\r\n    }\r\n    then(c8oOnResponse) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.then(c8oOnResponse);\r\n        }\r\n        else {\r\n            this.c8oResponse = c8oOnResponse;\r\n            this.nextPromise = new C8oPromise(this.c8o);\r\n            if (this.lastFailure != null) {\r\n                this.nextPromise.lastFailure = this.lastFailure;\r\n                this.nextPromise.lastParameters = this.lastParameters;\r\n            }\r\n            if (this.lastResponse != null) {\r\n                this._onResponse();\r\n            }\r\n            return this.nextPromise;\r\n        }\r\n    }\r\n    progress(c8oOnProgress) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.progress(c8oOnProgress);\r\n        }\r\n        else {\r\n            this.c8oProgress = c8oOnProgress;\r\n            this.nextPromise = new C8oPromise(this.c8o);\r\n            return this.nextPromise;\r\n        }\r\n    }\r\n    fail(c8oOnFail) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.fail(c8oOnFail);\r\n        }\r\n        else {\r\n            this.c8oFail = c8oOnFail;\r\n            this.nextPromise = new C8oPromise(this.c8o);\r\n            if (this.lastFailure != null) {\r\n                this.onFailure(this.lastFailure, this.lastParameters);\r\n            }\r\n            return this.nextPromise;\r\n        }\r\n    }\r\n    _onResponse() {\r\n        try {\r\n            if (this.c8oResponse != null) {\r\n                const promise = new Array(0);\r\n                promise.push(this.c8oResponse(this.lastResponse, this.lastParameters));\r\n                if (promise[0] != null) {\r\n                    if (this.nextPromise != null) {\r\n                        let lastPromise = promise[0];\r\n                        while (lastPromise.nextPromise != null) {\r\n                            lastPromise = lastPromise.nextPromise;\r\n                        }\r\n                        lastPromise.nextPromise = this.nextPromise;\r\n                    }\r\n                    this.nextPromise = promise[0];\r\n                }\r\n                else if (this.nextPromise != null) {\r\n                    this.nextPromise.onResponse(this.lastResponse, this.lastParameters);\r\n                }\r\n            }\r\n            else if (this.nextPromise != null) {\r\n                this.nextPromise.onResponse(this.lastResponse, this.lastParameters);\r\n            }\r\n            else {\r\n                // Response received and no handler\r\n            }\r\n        }\r\n        catch (error) {\r\n            this.onFailure(error, this.lastParameters);\r\n        }\r\n    }\r\n    onResponse(response, parameters) {\r\n        if ((this.lastResponse != null || this.lastResponse !== undefined) && parameters[C8oCore.ENGINE_PARAMETER_FROM_LIVE] === undefined) {\r\n            if (this.nextPromise != null || this.nextPromise !== undefined) {\r\n                this.nextPromise.onResponse(response, parameters);\r\n            }\r\n        }\r\n        else {\r\n            this.lastResponse = response;\r\n            this.lastParameters = parameters;\r\n            this._onResponse();\r\n        }\r\n    }\r\n    onProgress(progress) {\r\n        if (this.c8oProgress != null) {\r\n            this.c8oProgress(progress);\r\n        }\r\n        else if (this.nextPromise != null) {\r\n            this.nextPromise.onProgress(progress);\r\n        }\r\n    }\r\n    onFailure(error, parameters) {\r\n        this.lastFailure = error;\r\n        this.lastParameters = parameters;\r\n        if (this.c8oFail != null) {\r\n            this.c8oFail(this.lastFailure, parameters);\r\n        }\r\n        if (this.nextPromise != null) {\r\n            this.nextPromise.onFailure(this.lastFailure, parameters);\r\n        }\r\n    }\r\n}\n\nclass C8oExceptionListener {\r\n    constructor(onException) {\r\n        this.onException = onException;\r\n    }\r\n}\n\nclass C8oNetworkStatus {\r\n}\r\nC8oNetworkStatus.Reachable = \"Reachable\";\r\nC8oNetworkStatus.NotReachable = \"NotReachable\";\r\nC8oNetworkStatus.Offline = \"Offline\";\n\nclass C8oManagerNetwork {\r\n    constructor(c8o) {\r\n        this._listen = false;\r\n        this.c8o = c8o;\r\n    }\r\n    /**\r\n     * init NetworkManager\r\n     */\r\n    init() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.listen();\r\n            let reachable = yield this.checkReachable();\r\n            let online = window.navigator.onLine;\r\n            this.status = (reachable == true ? C8oNetworkStatus.Reachable : (online == true ? C8oNetworkStatus.NotReachable : C8oNetworkStatus.Offline));\r\n        });\r\n    }\r\n    /**\r\n     * Set network status, and notify if its had change\r\n     * @params c8oNetworkStatus : C8oNetworkStatus\r\n     */\r\n    set status(c8oNetworkStatus) {\r\n        // if the status has not changed do nothing\r\n        //this.c8o.log.warn(\"through set network status\")\r\n        if (this._status == c8oNetworkStatus) {\r\n            return;\r\n        }\r\n        this._status = c8oNetworkStatus;\r\n        this.c8o.subscriber_network.next(c8oNetworkStatus);\r\n    }\r\n    /**\r\n     * get network status\r\n     *\r\n     * @returns C8oNetworkStatus\r\n     */\r\n    get status() {\r\n        return this._status;\r\n    }\r\n    listen() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this._listen == false) {\r\n                this._listen = true;\r\n                window.addEventListener(\"online\", () => {\r\n                    this.processOnline();\r\n                }, false);\r\n                window.addEventListener(\"offline\", () => {\r\n                    this.processOffline();\r\n                }, false);\r\n                this.c8o.subscriber_network.subscribe((res) => __awaiter(this, void 0, void 0, function* () {\r\n                    this.c8o.log._debug(\"[handleNetworkEvents] Handle a network event: \" + res);\r\n                    switch (res) {\r\n                        case C8oNetworkStatus.Reachable:\r\n                            // check session status              \r\n                            this.c8o.session.doAuthReachable();\r\n                            this.c8o.database.restartReplications(\"anonymous\");\r\n                            break;\r\n                        case C8oNetworkStatus.NotReachable:\r\n                            this.c8o.database.stopReplications(this.c8o.session.user.name);\r\n                            this.c8o.database.stopReplications(\"anonymous\");\r\n                            break;\r\n                        case C8oNetworkStatus.Offline:\r\n                            this.c8o.database.stopReplications(this.c8o.session.user.name);\r\n                            this.c8o.database.stopReplications(\"anonymous\");\r\n                            break;\r\n                    }\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    processOnline() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let reachable = yield this.checkReachable();\r\n            if (reachable) {\r\n                this.status = C8oNetworkStatus.Reachable;\r\n            }\r\n            else {\r\n                this.status = C8oNetworkStatus.NotReachable;\r\n            }\r\n        });\r\n    }\r\n    processOffline() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.status = C8oNetworkStatus.Offline;\r\n        });\r\n    }\r\n    checkReachable() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let r = yield this.c8o.c8oLogger.logTest();\r\n                return true;\r\n            }\r\n            catch (_a) {\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n}\n\nclass C8oSessionStatus {\r\n}\r\nC8oSessionStatus.Connected = 1;\r\nC8oSessionStatus.HasBeenConnected = 2;\r\nC8oSessionStatus.HasBeenDisconnected = 3;\r\nC8oSessionStatus.Disconnected = 4;\r\nC8oSessionStatus.Ignore = 5;\r\nC8oSessionStatus.HasBeenConnectedToAnother = 5;\n\nclass C8oReplicationStatus {\r\n    constructor(user, listener, parameters, type, authenticated, canceled, finished, fullSyncDatabase, id) {\r\n        this.user = user;\r\n        this.listener = listener;\r\n        this.parameters = parameters;\r\n        this.type = type;\r\n        this.authenticated = authenticated;\r\n        this.canceled = canceled;\r\n        this.database = fullSyncDatabase;\r\n        this.finished = finished;\r\n        this.id = id;\r\n    }\r\n}\n\nclass C8oManagerDatabase {\r\n    constructor(c8o) {\r\n        this.replications = new Object();\r\n        this.c8o = c8o;\r\n        this.mutexCreateReplication = new Semaphore(1);\r\n    }\r\n    localName(baseName, log = false) {\r\n        if (this.c8o.prefixBase) {\r\n            if (log) {\r\n                this.c8o.log._trace(\"Database will be seteed with prefix of user name\");\r\n            }\r\n            return this.c8o.session.user.name + \"_\" + baseName;\r\n        }\r\n        else {\r\n            return baseName;\r\n        }\r\n    }\r\n    get registeredReplications() {\r\n        return this.replications;\r\n    }\r\n    /**\r\n     * Register a request attaching it to the current user\r\n     * @param listener The listener for this request\r\n     * @param parameters The parameters of this request\r\n     * @param type The type of réplication (SYNC, PULL, PUSH)\r\n     */\r\n    registerRequest(listener, parameters, type, fullSyncDatabase, handler = null) {\r\n        let user = this.c8o.session.user;\r\n        if (this.replications[user.name] == null) {\r\n            this.replications[user.name] = new Array();\r\n        }\r\n        let authenticated = (this.c8o.session.status == (C8oSessionStatus.Connected || C8oSessionStatus.HasBeenConnected));\r\n        let canceled = (this.c8o.network.status != C8oNetworkStatus.Reachable);\r\n        let id = new Date().getTime() + \"_\" + (\"\" + Math.random()).substring(2);\r\n        let rep = new C8oReplicationStatus(user, listener, parameters, type, authenticated, canceled, false, fullSyncDatabase, id);\r\n        handler = () => {\r\n            rep.finished = true;\r\n        };\r\n        this.replications[user.name].push(rep);\r\n        return [canceled, handler, id];\r\n    }\r\n    cancelAndPopRequest(id) {\r\n        var user = this.c8o.session.user;\r\n        for (var i in this.replications[user.name]) {\r\n            if (this.replications[user.name][i].id == id) {\r\n                this.c8o.log._debug(\"[c8oManagerDatabase] cancelAndPopRequest => canceling  and removing replication: \" + this.replications[user.name][i].database.getdatabase.name);\r\n                let repToCancel = this.replications[user.name][i].database.syncFullSyncReplication.replication;\r\n                repToCancel.cancel();\r\n                this.replications[user.name].splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.c8o.log._debug(\"[c8oManagerDatabase] cancelAndPopRequest => done, replication still actives: \" + JSON.stringify(this.replications[user.name].map(x => x.database.getdatabase.name)));\r\n    }\r\n    cancelAllForbase(baseName) {\r\n        var user = this.c8o.session.user;\r\n        for (var i in this.replications[user.name]) {\r\n            if (this.replications[user.name][i].databaseName == baseName) {\r\n                this.replications[user.name].splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Restart all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    restartReplications(user) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.replications[user] != undefined) {\r\n                var lastsDistinctsReps = {};\r\n                this.replications[user].forEach((rep) => { lastsDistinctsReps[rep.database.databaseName] = rep; });\r\n                this.replications[user] = Object.keys(lastsDistinctsReps).map(e => lastsDistinctsReps[e]);\r\n                for (let i in lastsDistinctsReps) {\r\n                    let rep = lastsDistinctsReps[i];\r\n                    if (rep.database != null) {\r\n                        if (rep.canceled == true) {\r\n                            if (rep.finished != true) {\r\n                                switch (rep.type) {\r\n                                    case \"sync\":\r\n                                        this.mutexCreateReplication.acquire();\r\n                                        this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb sync \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                        let handler1 = () => {\r\n                                            rep.finished = true;\r\n                                        };\r\n                                        rep.finished = false;\r\n                                        rep.canceled = false;\r\n                                        rep.manual_canceled = false;\r\n                                        rep.database.startAllReplications(rep.parameters, rep.listener, handler1, rep.id, this.mutexCreateReplication);\r\n                                        break;\r\n                                    case \"push\":\r\n                                        this.mutexCreateReplication.acquire();\r\n                                        this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb push \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                        let handler2 = () => {\r\n                                            rep.finished = true;\r\n                                        };\r\n                                        rep.finished = false;\r\n                                        rep.canceled = false;\r\n                                        rep.manual_canceled = false;\r\n                                        rep.database.startPushReplication(rep.parameters, rep.listener, handler2, rep.id, this.mutexCreateReplication);\r\n                                        break;\r\n                                    case \"pull\":\r\n                                        this.mutexCreateReplication.acquire();\r\n                                        this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb pull \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                        let handler3 = () => {\r\n                                            rep.finished = true;\r\n                                        };\r\n                                        rep.canceled = false;\r\n                                        rep.finished = false;\r\n                                        rep.manual_canceled = false;\r\n                                        rep.database.startPullReplication(rep.parameters, rep.listener, handler3, rep.id, this.mutexCreateReplication);\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Stop all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    stopReplications(user) {\r\n        if (this.replications[user] != undefined) {\r\n            for (let rep of this.replications[user]) {\r\n                if (rep.database != null) {\r\n                    if (rep.finished != true) {\r\n                        switch (rep.type) {\r\n                            case \"sync\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb sync \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelSyncReplication();\r\n                                break;\r\n                            case \"push\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb push \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelPushReplication();\r\n                                break;\r\n                            case \"pull\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb pull \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelPullReplication();\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Remove state an delte top all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    removeReplications(user) {\r\n        this.stopReplications(user);\r\n        delete this.replications[user];\r\n        this.c8o.log._trace(\"[removeReplications] replications for user \" + user + \"has been removed and stopped\");\r\n    }\r\n}\n\nclass C8oManagerLogin {\r\n    constructor(c8o) {\r\n        this.c8o = c8o;\r\n        this.mutexL = new Semaphore(1);\r\n    }\r\n    setRequestLogin(url, parameters, headers, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (url != null && parameters != null && headers != null) {\r\n                this.requestLogin = { url: url, parameters: parameters, headers: headers };\r\n            }\r\n            if (id != null && this.requestLogin != undefined) {\r\n                /**  must encrypt and save requestLogin there **/\r\n                //define buffer to save\r\n                const data = Buffer.from(JSON.stringify(this.requestLogin), 'utf-8');\r\n                // generate random iv and store it\r\n                const iv = crypto.getRandomValues(new Uint8Array(16));\r\n                window[\"localStorage\"][\"setItem\"](\"_c8o_iv\", Buffer.from(iv).toString('utf-8'));\r\n                // get key and hash it 128 bits\r\n                const key = C8oUtilsCore.MD5ArrayBuffer(id);\r\n                // defined key\r\n                const key_encoded = yield crypto.subtle.importKey(\"raw\", key.buffer, 'AES-CTR', false, [\"encrypt\", \"decrypt\"]);\r\n                // encrypt data\r\n                const encrypted_content = yield window.crypto.subtle.encrypt({\r\n                    name: \"AES-CTR\",\r\n                    counter: iv,\r\n                    length: 128\r\n                }, key_encoded, data);\r\n                // store encrypted data\r\n                window.localStorage.setItem(\"_c8o_secret\", Buffer.from(encrypted_content).toString('utf-8'));\r\n            }\r\n        });\r\n    }\r\n    defineRequestLogin(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //if requestLogin is'nt into this.requestLogin, get it and assign it to requestLogin from local encrypted data.\r\n            try {\r\n                if (this.requestLogin == undefined && window[\"localStorage\"][\"getItem\"](\"_c8o_secret\") != undefined) {\r\n                    const iv = Buffer.from(window[\"localStorage\"][\"getItem\"](\"_c8o_iv\"), 'utf-8');\r\n                    const key = C8oUtilsCore.MD5ArrayBuffer(id);\r\n                    const encrypted_content = Buffer.from(window.localStorage.getItem(\"_c8o_secret\"), 'utf-8');\r\n                    const key_encoded = yield crypto.subtle.importKey(\"raw\", key.buffer, 'AES-CTR', false, [\"encrypt\", \"decrypt\"]);\r\n                    const decrypted_content = yield window.crypto.subtle.decrypt({\r\n                        name: \"AES-CTR\",\r\n                        counter: iv,\r\n                        length: 128\r\n                    }, key_encoded, encrypted_content);\r\n                    this.requestLogin = JSON.parse(Buffer.from(decrypted_content).toString('utf-8'));\r\n                }\r\n            }\r\n            catch (e) {\r\n                this.c8o.log.error(\"[C8oManagerLogin][defineRequestLogin], failed to define request login\", e);\r\n            }\r\n        });\r\n    }\r\n    doLogin() {\r\n        return new Promise((res) => {\r\n            this.mutexL.acquire();\r\n            if (!(this.c8o.session.status == C8oSessionStatus.Connected || this.c8o.session.status == C8oSessionStatus.HasBeenConnected)) {\r\n                if (this.requestLogin != undefined) {\r\n                    let resolve = (response) => {\r\n                        if (response.headers.get(\"X-Convertigo-Authenticated\") != undefined) {\r\n                            this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins works\");\r\n                            this.c8o.subscriber_login.next({ status: true, response: response.body, error: null });\r\n                            res({ status: true, urlReq: this.requestLogin.url, parameters: this.requestLogin.parameters, headers: this.requestLogin.headers, response: response.response });\r\n                        }\r\n                        else {\r\n                            this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins failed\");\r\n                            res({ status: false });\r\n                            this.c8o.subscriber_login.next({ status: false, response: response.body, error: \"error, we are not authenticated\" });\r\n                            //this.c8o.subscriber_session.next();\r\n                        }\r\n                        this.mutexL.release();\r\n                    };\r\n                    let reject = (err) => {\r\n                        this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins failed\");\r\n                        res({ status: false });\r\n                        this.c8o.subscriber_login.next({ status: false, response: null, error: err });\r\n                        this.c8o.subscriber_session.next(null);\r\n                        this.mutexL.release();\r\n                    };\r\n                    this.c8o.httpInterface.execHttpPosts(this.requestLogin.url, this.requestLogin.parameters, this.requestLogin.headers, resolve, reject, true);\r\n                }\r\n            }\r\n            else {\r\n                this.c8o.log.warn(\"Into else\");\r\n            }\r\n        });\r\n    }\r\n}\n\nclass C8oSessionUser {\r\n    constructor(user = null) {\r\n        this.authenticated = false;\r\n        this.groups = [];\r\n        this.maxInactive = 0;\r\n        this.sessionId = \"\";\r\n        this.name = \"anonymous\";\r\n        this.hash = \"\";\r\n        if (user != null) {\r\n            this.authenticated = user[\"authenticated\"] == true;\r\n            this.groups = user[\"groups\"] != undefined ? user[\"groups\"] : [];\r\n            this.maxInactive = user[\"maxInactive\"] != undefined ? user[\"maxInactive\"] : 0;\r\n            this.sessionId = user[\"session\"] != undefined ? user[\"session\"] : \"\";\r\n            this.name = user[\"user\"] != undefined ? user[\"user\"] : \"\";\r\n        }\r\n    }\r\n}\n\nclass C8oManagerSession {\r\n    constructor(c8o) {\r\n        this.resumeListener = undefined;\r\n        // When the app begins, session is not connected*\r\n        this.c8o = c8o;\r\n        this._status = C8oSessionStatus.Disconnected;\r\n        this.loginManager = new C8oManagerLogin(c8o);\r\n        this.ignored = 0;\r\n        this._user = new C8oSessionUser();\r\n        this.mutex = new Semaphore(1);\r\n        this.mutexNetwork = new Semaphore(10000000000);\r\n        this.mutexCheckSession = new Semaphore(1);\r\n    }\r\n    /**\r\n     * Get status of the session\r\n     *\r\n     * @returns: C8oSessionStatus\r\n     *\r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    get status() {\r\n        return this._status;\r\n    }\r\n    set status(status) {\r\n        this._status = status;\r\n    }\r\n    /**\r\n     * Get status of the session\r\n     *\r\n     * @returns: C8oSessionStatus\r\n     *\r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    get user() {\r\n        return this._user;\r\n    }\r\n    /**\r\n     * Get previous status of the session\r\n     *\r\n     * @returns: C8oSessionStatus\r\n     *\r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    get olduser() {\r\n        return this._olduser;\r\n    }\r\n    set user(user) {\r\n        this._olduser = user;\r\n        this._user = user;\r\n    }\r\n    setInitalState() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const status = yield this.c8o.httpInterface.getUserServiceStatus(true);\r\n                yield this.sort(null, null, null, null, null, null, status);\r\n            }\r\n            catch (e) {\r\n                console.error(\"error getiing setInitalState\", e);\r\n            }\r\n        });\r\n    }\r\n    getInitalState() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const resp = yield this.c8o.httpInterface.getUserServiceStatus(true);\r\n                if (resp.body.authenticated) {\r\n                    this.sessId = resp.body.session;\r\n                    yield this.loginManager.defineRequestLogin(resp.body.session);\r\n                    this.user = new C8oSessionUser(resp.body);\r\n                    this.status = C8oSessionStatus.HasBeenConnected;\r\n                }\r\n            }\r\n            catch (e) {\r\n                this.c8o.log.error(\"[C8oManagerSession][getInitalState] Impossible to define user service status\", e);\r\n            }\r\n        });\r\n    }\r\n    sort(response, headers, urlReq, parametersReq, headersReq, resolve, status) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // update _status if this is a sequence\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let _status;\r\n                if (!status) {\r\n                    _status = yield this.defineSessionStatus(response, headers, urlReq, parametersReq, headersReq);\r\n                }\r\n                else {\r\n                    _status = yield this.defineSessionStatus(status, headers, urlReq, parametersReq, headersReq, status);\r\n                }\r\n                switch (_status) {\r\n                    case C8oSessionStatus.Connected:\r\n                        this.ignored = 0;\r\n                        resolve(false);\r\n                        break;\r\n                    case C8oSessionStatus.HasBeenConnectedToAnother:\r\n                        // if we called this function from setInitalState\r\n                        if (response == null && headers == null) {\r\n                            this.checkSession(headers, 0, resolve, status);\r\n                        }\r\n                        else {\r\n                            this.checkSession(headers, 0, resolve);\r\n                        }\r\n                        this.c8o.subscriber_session_changed.next(null);\r\n                        break;\r\n                    case C8oSessionStatus.HasBeenConnected:\r\n                        // if we called this function from setInitalState\r\n                        if (response == null && headers == null) {\r\n                            this.checkSession(headers, 0, resolve, status);\r\n                        }\r\n                        else {\r\n                            this.checkSession(headers, 0, resolve);\r\n                        }\r\n                        break;\r\n                    case C8oSessionStatus.HasBeenDisconnected:\r\n                        // if we called this function from setInitalState\r\n                        if (response == null && headers == null) {\r\n                            // do nothing\r\n                            resolve(false);\r\n                        }\r\n                        else {\r\n                            if (this.c8o.keepSessionAlive) {\r\n                                let objParams;\r\n                                try {\r\n                                    objParams = parametersReq.split('&')\r\n                                        .reduce((a, c) => {\r\n                                        let [key, value] = c.split('=');\r\n                                        a[key] = value;\r\n                                        return a;\r\n                                    }, {});\r\n                                }\r\n                                catch (e) {\r\n                                    objParams = {};\r\n                                }\r\n                                if (!(objParams[C8oCore.SEQ_AUTO_LOGIN_OFF] === \"true\")) {\r\n                                    this.loginManager.doLogin()\r\n                                        .then((res) => {\r\n                                        resolve(true);\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    this.c8o.database.stopReplications(this.user.name);\r\n                                    this._user = new C8oSessionUser();\r\n                                    this.c8o.subscriber_session.next(null);\r\n                                    resolve(false);\r\n                                }\r\n                            }\r\n                            else {\r\n                                this.c8o.database.stopReplications(this.user.name);\r\n                                this._user = new C8oSessionUser();\r\n                                this.c8o.subscriber_session.next(null);\r\n                                resolve(false);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case C8oSessionStatus.Disconnected:\r\n                        resolve(false);\r\n                        break;\r\n                    case C8oSessionStatus.Ignore:\r\n                        this.ignored = this.ignored + 1;\r\n                        if (this.ignored >= 20) {\r\n                            this._status = C8oSessionStatus.Connected;\r\n                            this.c8o.log._trace(\"[C8oManagerSession] We ingored 20, no setting _status Connected\");\r\n                        }\r\n                        else {\r\n                            this.c8o.log._trace(\"[C8oManagerSession] Ignore this request to analyze loss of session, we ignored \" + this.ignored + \" at total\");\r\n                        }\r\n                        resolve(false);\r\n                        break;\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    doAuthReachable() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.c8o.session.user.authenticated == true) {\r\n                yield this.mutex.acquire();\r\n                let err;\r\n                try {\r\n                    let user = yield this.c8o.httpInterface.getUserServiceStatus();\r\n                    if (user.authenticated == false || err != undefined) {\r\n                        if (this.c8o.keepSessionAlive) {\r\n                            let success = yield this.loginManager.doLogin();\r\n                            if (success.status == false) {\r\n                                this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                                this.c8o.subscriber_session.next(null);\r\n                                this.mutex.release();\r\n                            }\r\n                            else {\r\n                                this.c8o.database.restartReplications(this.user.name);\r\n                                this.checkSession(null, 0);\r\n                                this.mutex.release();\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.sessId = user.session;\r\n                            this.c8o.subscriber_session.next(null);\r\n                            this.mutex.release();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.sessId = user.session;\r\n                        this._status = C8oSessionStatus.Connected;\r\n                        this.c8o.database.restartReplications(this.user.name);\r\n                        this.checkSession(null, 0);\r\n                        yield this.mutex.release();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                    this.mutex.release();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * defineSessionStatus\r\n     *\r\n     * if haderStatus is not null => we are connected\r\n     * else if headerStatus is not null and this.id is not null, we has lost session\r\n     * else we were never connected\r\n     *\r\n     * @param response the http header response\r\n     */\r\n    defineSessionStatus(response, headers, urlReq, parametersReq, headersReq, fromSetInitalState) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // get session id sent by header\r\n            let headerStatus = C8oUtilsCore.checkHeaderArgument(response, \"x-convertigo-authenticated\");\r\n            if (headerStatus != null) {\r\n                if (this.id != null && this.id != \"\" && this.id != headerStatus) {\r\n                    this.c8o.database.stopReplications(this.user.name);\r\n                    this._user = new C8oSessionUser();\r\n                    if (!fromSetInitalState) {\r\n                        this.loginManager.setRequestLogin(urlReq, parametersReq, headersReq, this.sessId);\r\n                    }\r\n                    this._status = C8oSessionStatus.HasBeenConnectedToAnother;\r\n                    this.id = headerStatus;\r\n                    return C8oSessionStatus.HasBeenConnectedToAnother;\r\n                }\r\n                if (this.id != null || this._status == C8oSessionStatus.HasBeenConnected) {\r\n                    this._status = C8oSessionStatus.Connected;\r\n                    this.id = headerStatus;\r\n                    return C8oSessionStatus.Connected;\r\n                }\r\n                else {\r\n                    if (!fromSetInitalState) {\r\n                        this.loginManager.setRequestLogin(urlReq, parametersReq, headersReq, this.sessId);\r\n                    }\r\n                    this._status = C8oSessionStatus.HasBeenConnected;\r\n                    this.id = headerStatus;\r\n                    return C8oSessionStatus.HasBeenConnected;\r\n                }\r\n            }\r\n            else {\r\n                if (this.id != null) {\r\n                    let cancel = false;\r\n                    if (this._status == C8oSessionStatus.HasBeenConnected) {\r\n                        let user;\r\n                        try {\r\n                            user = yield this.c8o.httpInterface.getUserServiceStatus();\r\n                            cancel = user != undefined ? user.authenticated : false;\r\n                            this.sessId = user.session;\r\n                        }\r\n                        catch (e) {\r\n                            cancel = false;\r\n                        }\r\n                    }\r\n                    if (!cancel) {\r\n                        this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                        this.id = headerStatus;\r\n                        return C8oSessionStatus.HasBeenDisconnected;\r\n                    }\r\n                    else {\r\n                        return C8oSessionStatus.Ignore;\r\n                    }\r\n                }\r\n                else {\r\n                    this._status = C8oSessionStatus.Disconnected;\r\n                    this.id = headerStatus;\r\n                    return C8oSessionStatus.Disconnected;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    checkUser(fromSetInitalState) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let user = this._user;\r\n            try {\r\n                if (fromSetInitalState) {\r\n                    user = fromSetInitalState.body;\r\n                }\r\n                else {\r\n                    user = yield this.c8o.httpInterface.getUserServiceStatus();\r\n                }\r\n                if (this._user.name != user.user && this._user.name != \"anonymous\") {\r\n                    // remove & stop all replications for older user\r\n                    this.c8o.database.removeReplications(this._user.name);\r\n                }\r\n                this._user = new C8oSessionUser(user);\r\n            }\r\n            catch (e) {\r\n                if (fromSetInitalState) {\r\n                    this._status = C8oSessionStatus.Disconnected;\r\n                }\r\n                else {\r\n                    this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                }\r\n            }\r\n            finally {\r\n                return user;\r\n            }\r\n        });\r\n    }\r\n    checkSession(headers, time, resolve = null, fromSetInitalState) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (resolve == null) {\r\n                resolve = (() => { });\r\n            }\r\n            clearTimeout(this.checker);\r\n            this.checker = setTimeout(() => __awaiter(this, void 0, void 0, function* () {\r\n                let user;\r\n                user = yield this.checkUser(fromSetInitalState);\r\n                let _status = user != undefined ? user.authenticated : false;\r\n                // if we are not anymore loggedin\r\n                if (!_status) {\r\n                    this.c8o.log._debug(\"[C8oSessionManager] Session is not authenticated\");\r\n                    // if we want to keepAlive session and we are not called from setInitalState\r\n                    if (this.c8o.keepSessionAlive && fromSetInitalState) {\r\n                        // try to login\r\n                        yield this.mutex.acquire();\r\n                        yield this.mutex.release();\r\n                        if (this._status == C8oSessionStatus.Connected || this._status == C8oSessionStatus.HasBeenConnected) {\r\n                            resolve(true);\r\n                        }\r\n                        else {\r\n                            let success = yield this.loginManager.doLogin();\r\n                            if (success.status == false) {\r\n                                this.c8o.database.stopReplications(this.user.name);\r\n                                this._user = new C8oSessionUser();\r\n                                this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                                this.c8o.subscriber_session.next(null);\r\n                                resolve();\r\n                            }\r\n                            else {\r\n                                this.checkSession(headers, 0, resolve);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.c8o.database.stopReplications(this.user.name);\r\n                        this._user = new C8oSessionUser();\r\n                        // if we called this function from setInitalState\r\n                        if (fromSetInitalState) {\r\n                            this._status = C8oSessionStatus.Disconnected;\r\n                        }\r\n                        else {\r\n                            this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                            this.c8o.subscriber_session.next(null);\r\n                        }\r\n                        resolve();\r\n                    }\r\n                }\r\n                else {\r\n                    // if we are still connected\r\n                    this._status = C8oSessionStatus.Connected;\r\n                    this.loginManager.setRequestLogin(null, null, null, user.session);\r\n                    var funclistener = () => {\r\n                        this.c8o.httpInterface.p1 = new Promise((resolve) => { });\r\n                        this.c8o.httpInterface.firstCall = true;\r\n                        // safe delete previous Checker\r\n                        try {\r\n                            clearTimeout(this.checker);\r\n                        }\r\n                        catch (e) {\r\n                        }\r\n                        setTimeout(() => __awaiter(this, void 0, void 0, function* () {\r\n                            this.mutex.acquire();\r\n                            this.c8o.log.debug(\"[C8oSessionManager]: onResume checking user status\");\r\n                            let user = yield this.checkUser();\r\n                            let _status = user != undefined ? user.authenticated : false;\r\n                            // if we are not anymore loggedin\r\n                            if (!_status) {\r\n                                this.c8o.log.debug(\"[C8oSessionManager]: onResume user is no longer logged\");\r\n                                if (this.c8o.keepSessionAlive) {\r\n                                    this.c8o.log.debug(\"[C8oSessionManager]: onResume keepAlive session activated, we will try to autologin\");\r\n                                    this.c8o.session.status = C8oSessionStatus.HasBeenDisconnected;\r\n                                    // try to login\r\n                                    let success = yield this.loginManager.doLogin();\r\n                                    if (success.status == false) {\r\n                                        this.c8o.log.debug(\"[C8oSessionManager]: onResume autologin failed\");\r\n                                        this.c8o.database.stopReplications(this.user.name);\r\n                                        this._user = new C8oSessionUser();\r\n                                        this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                                        this.c8o.subscriber_session.next(null);\r\n                                        this.mutex.release();\r\n                                        this.c8o.httpInterface.p1 = Promise.resolve(true);\r\n                                        resolve();\r\n                                    }\r\n                                    else {\r\n                                        this.c8o.log.debug(\"[C8oSessionManager]: onResume autologin worked\");\r\n                                        this.mutex.release();\r\n                                        this.checkSession(headers, 0, resolve);\r\n                                        this.c8o.httpInterface.p1 = Promise.resolve(true);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    this.c8o.log.debug(\"[C8oSessionManager]: onResume stopping replications\");\r\n                                    this.c8o.database.stopReplications(this.user.name);\r\n                                    this._user = new C8oSessionUser();\r\n                                    this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                                    this.c8o.subscriber_session.next(null);\r\n                                    this.mutex.release();\r\n                                    resolve();\r\n                                }\r\n                            }\r\n                            else {\r\n                                this._status = C8oSessionStatus.Connected;\r\n                                this.mutex.release();\r\n                            }\r\n                        }), 0);\r\n                    };\r\n                    try {\r\n                        if (this.resumeListener != undefined) {\r\n                            document.removeEventListener(\"resume\", this.resumeListener, false);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(e);\r\n                    }\r\n                    this.resumeListener = funclistener;\r\n                    document.addEventListener(\"resume\", funclistener, false);\r\n                    this.c8o.database.restartReplications(this.user.name);\r\n                    let timeR = +user['maxInactive'] * 0.95 * 1000;\r\n                    if (this.c8o.keepSessionAlive) {\r\n                        this.c8o.log._debug(\"[C8oSessionManager] Pooling for session, next check will be in \" + timeR + \"ms\");\r\n                        this.checkSession(headers, timeR);\r\n                        resolve();\r\n                    }\r\n                    else {\r\n                        if (this.checker != undefined) {\r\n                            try {\r\n                                clearTimeout(this.checker);\r\n                            }\r\n                            catch (e) {\r\n                            }\r\n                        }\r\n                        this.checker =\r\n                            setTimeout(() => __awaiter(this, void 0, void 0, function* () {\r\n                                this.c8o.database.stopReplications(this.user.name);\r\n                                this._status = C8oSessionStatus.Disconnected;\r\n                                this.c8o.subscriber_session.next(null);\r\n                            }), timeR);\r\n                        resolve();\r\n                    }\r\n                }\r\n            }), time);\r\n        });\r\n    }\r\n}\n\n/**\r\n * Allows to send requests to a Convertigo Server (or Studio), these requests are called c8o calls.<br/>\r\n * C8o calls are done thanks to a HTTP request or a CouchbaseLite usage.<br/>\r\n * An instance of C8o is connected to only one Convertigo and can't change it.<br/>\r\n * To use it, you have to first initialize the C8o instance with the Convertigo endpoint, then use call methods with Convertigo variables as parameter.\r\n */\r\n// @dynamic\r\nclass C8oCore extends C8oBase {\r\n    /**\r\n     * This is the base object representing a Convertigo Server end point. This object should be instantiated\r\n     * when the apps starts and be accessible from any class of the app. Although this is not common , you may have\r\n     * several C8o objects instantiated in your app.\r\n     *\r\n     * @param http\r\n     *\r\n     * @throws C8oException In case of invalid parameter or initialization failure.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.lastChangeTimeStamp = 0;\r\n        this.lastChangeSetTimeout = null;\r\n        this.threshold = 50;\r\n        this.observanleHandleFullSyncLive = new Subject();\r\n        this._automaticRemoveSplashsCreen = true;\r\n        this.lives = [];\r\n        this.livesDb = [];\r\n        this._reply = new Subject();\r\n        this._couchUrl = null;\r\n        this.xsrfUsed = false;\r\n        //noinspection JSUnusedLocalSymbols\r\n        this.handleFullSyncLive = new C8oFullSyncChangeListener((changes) => {\r\n            console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.observanleHandleFullSyncLive.next(changes);\r\n            /*console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.debounce(()=>this.executeHandleFullSyncLive());\r\n            /*console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            _.debounce(\r\n                this.executeHandleFullSyncLive,\r\n                window[\"threshold\"] != undefined ? window[\"threshold\"] : this.threshold,\r\n                window[\"options\"] != undefined ? window[\"options\"] : {}\r\n            )();*/\r\n            /*let localLastChangeTimeStamp = new Date().getTime();\r\n            if(22)\r\n            this.lastChangeTimeStamp = localLastChangeTimeStamp;\r\n            console.log(\"Executing from handleFullSyncLive. \\nthis.lastChangeTimeStamp=\"+ this.lastChangeTimeStamp)\r\n            this.lastChangeSetTimeout = setTimeout(()=>{\r\n                let execution_time = new Date().getTime();\r\n                let sub = execution_time - this.lastChangeTimeStamp;\r\n                console.log(\"Executing from handleFullSyncLive into setTimeout. \\nthis.lastChangeTimeStamp=\"+ this.lastChangeTimeStamp+\"\\nexecution_time=\"+execution_time+\"\\nsub=\"+sub+\"\\nthreshold=\"+this.threshold);\r\n                if( sub >= this.threshold){\r\n                    console.log(\"Executing from handleFullSyncLive into setTimeout reloading lives\");\r\n                    for (const task in this.lives) {\r\n                        (this.lives[task] as C8oCallTask).executeFromLive();\r\n                    }\r\n                }\r\n                else{\r\n                    console.log(\"Executing from handleFullSyncLive into setTimeout donot reloading lives\");\r\n                }\r\n            }, this.threshold);*/\r\n        });\r\n        this.data = null;\r\n        this.c8oLogger = new C8oLogger(this, true);\r\n        this.subscriber_session = new Subject();\r\n        this.subscriber_session_changed = new Subject();\r\n        this.subscriber_network = new Subject();\r\n        this.subscriber_login = new Subject();\r\n        this.subscriber_database_reset = new Subject();\r\n        this.network = new C8oManagerNetwork(this);\r\n        this.database = new C8oManagerDatabase(this);\r\n        this.session = new C8oManagerSession(this);\r\n        this.promiseManagerNetwork = this.network.init();\r\n        this.observanleHandleFullSyncLive\r\n            .pipe(debounce(() => timer(100)))\r\n            .subscribe((val) => {\r\n            this.executeHandleFullSyncLive();\r\n        });\r\n    }\r\n    get couchUrl() {\r\n        return this._couchUrl;\r\n    }\r\n    set couchUrl(value) {\r\n        this._couchUrl = value;\r\n    }\r\n    get logC8o() {\r\n        return this._logC8o;\r\n    }\r\n    set logC8o(value) {\r\n        this._logC8o = value;\r\n    }\r\n    get logRemote() {\r\n        return this._logRemote;\r\n    }\r\n    set logRemote(value) {\r\n        this._initalLogLevel = value;\r\n        this._logRemote = value;\r\n    }\r\n    get logLevelLocal() {\r\n        return this._logLevelLocal;\r\n    }\r\n    set logLevelLocal(value) {\r\n        this._logLevelLocal = value;\r\n    }\r\n    get log() {\r\n        return this.c8oLogger;\r\n    }\r\n    toString() {\r\n        return \"C8o[\" + this._endpoint + \"]\";\r\n    }\r\n    get endpoint() {\r\n        return this._endpoint;\r\n    }\r\n    set endpoint(value) {\r\n        this._endpoint = value;\r\n    }\r\n    get endpointConvertigo() {\r\n        return this._endpointConvertigo;\r\n    }\r\n    set endpointConvertigo(value) {\r\n        this._endpointConvertigo = value;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get endpointIsSecure() {\r\n        return this._endpointIsSecure;\r\n    }\r\n    set endpointIsSecure(value) {\r\n        this._endpointIsSecure = value;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get endpointHost() {\r\n        return this._endpointHost;\r\n    }\r\n    set endpointHost(value) {\r\n        this._endpointHost = value;\r\n    }\r\n    //noinspection JSUnusedGlobalSymbols\r\n    get endpointPort() {\r\n        return this._endpointPort;\r\n    }\r\n    set endpointPort(value) {\r\n        this._endpointPort = value;\r\n    }\r\n    get endpointProject() {\r\n        return this._endpointProject;\r\n    }\r\n    set endpointProject(value) {\r\n        this._endpointProject = value;\r\n    }\r\n    get deviceUUID() {\r\n        return new Promise((resolve) => {\r\n            if (window[\"cordova\"] != undefined) {\r\n                document.addEventListener(\"deviceready\", () => {\r\n                    if (C8oCore.deviceUUID == undefined) {\r\n                        C8oCore.deviceUUID = C8oUtilsCore.getNewGUIDString();\r\n                    }\r\n                    resolve(C8oCore.deviceUUID);\r\n                }, false);\r\n            }\r\n            else {\r\n                if (C8oCore.deviceUUID == undefined) {\r\n                    C8oCore.deviceUUID = C8oUtilsCore.getNewGUIDString();\r\n                }\r\n                resolve(C8oCore.deviceUUID);\r\n            }\r\n        });\r\n    }\r\n    get httpPublic() {\r\n        return this._http;\r\n    }\r\n    get resetBase() {\r\n        return this._resetBase;\r\n    }\r\n    set resetBase(resetBase) {\r\n        this._resetBase = resetBase;\r\n    }\r\n    get prefixBase() {\r\n        return this._prefixBase;\r\n    }\r\n    set prefixBase(resetBase) {\r\n        this._prefixBase = resetBase;\r\n    }\r\n    get coreVersion() {\r\n        return \"1.0.7\"; //require(\"../../package.json\").version;\r\n    }\r\n    importLoginState(c8o) {\r\n        let session = c8o.session;\r\n        this.session = session;\r\n    }\r\n    extractendpoint() {\r\n        if (!C8oUtilsCore.isValidUrl(this.endpoint)) {\r\n            throw new C8oException(C8oExceptionMessage.illegalArgumentInvalidURL(this.endpoint).toString());\r\n        }\r\n        const matches = C8oCore.RE_ENDPOINT.exec(this.endpoint.toString());\r\n        if (matches === null) {\r\n            throw new C8oException(C8oExceptionMessage.illegalArgumentInvalidEndpoint(this.endpoint.toString()));\r\n        }\r\n        this.endpointConvertigo = matches[0].substring(0, (matches[0].indexOf(\"/projects\")));\r\n        this.endpointIsSecure = matches[1] != null;\r\n        this.endpointHost = matches[2];\r\n        this.endpointPort = matches[3];\r\n        this.endpointProject = matches[4];\r\n    }\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters.<br/>\r\n     * To not use a C8oExceptionListener you can set the parameter to null\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters - Contains c8o variables\r\n     * @param c8oResponseListener - Define the behavior with the c8o call response\r\n     * @param c8oExceptionListener - Define the behavior when there is an exception during execution\r\n     */\r\n    call(requestable, parameters = null, c8oResponseListener = null, c8oExceptionListener = null) {\r\n        try {\r\n            if (requestable === null || requestable === undefined) {\r\n                //noinspection ExceptionCaughtLocallyJS\r\n                throw new C8oException(C8oExceptionMessage.illegalArgumentNullParameter(\"resquestable\"));\r\n            }\r\n            if (parameters === null || parameters === undefined) {\r\n                parameters = {};\r\n            }\r\n            else {\r\n                if (this._normalizeParameters == true) {\r\n                    try {\r\n                        parameters = (JSON.parse(JSON.stringify(parameters)));\r\n                    }\r\n                    catch (error) {\r\n                        this.log.debug(\"[C8o] can't normalize parameters due to cyclic error. We will use parameters non normalized\");\r\n                    }\r\n                }\r\n            }\r\n            const regex = C8oCore.RE_REQUESTABLE.exec(requestable);\r\n            if (regex === null || regex === undefined) {\r\n                //noinspection ExceptionCaughtLocallyJS\r\n                throw new C8oException(C8oExceptionMessage.InvalidArgumentInvalidEndpoint(this._endpoint));\r\n            }\r\n            if (regex[1] !== \"\") {\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROJECT.toString()] = regex[1];\r\n            }\r\n            if (regex[2] != null) {\r\n                parameters[C8oCore.ENGINE_PARAMETER_SEQUENCE.toString()] = regex[2];\r\n            }\r\n            else {\r\n                parameters[C8oCore.ENGINE_PARAMETER_CONNECTOR.toString()] = regex[3];\r\n                parameters[C8oCore.ENGINE_PARAMETER_TRANSACTION.toString()] = regex[4];\r\n            }\r\n            return this._call(parameters, c8oResponseListener, c8oExceptionListener);\r\n        }\r\n        catch (error) {\r\n            this.handleCallException(c8oExceptionListener, parameters, error);\r\n        }\r\n        finally {\r\n        }\r\n    }\r\n    /**\r\n     * Makes a c8o call with c8o requestable in parameters ('__project' and ('__sequence' or ('__connector' and '__transaction'))).<br/>\r\n     * To not use a C8oExceptionListener you can set the parameter to null.\r\n     *\r\n     * @param parameters - Contains c8o variables\r\n     * @param c8oResponseListener - Define the behavior with the c8o call response\r\n     * @param c8oExceptionListener - Define the behavior when there is an exception during execution\r\n     */\r\n    _call(parameters = null, c8oResponseListener = null, c8oExceptionListener = null) {\r\n        // IMPORTANT: all c8o calls have to end here !\r\n        Promise.all([this.promiseFinInit, this.promiseManagerNetwork]).then(() => {\r\n            try {\r\n                this.c8oLogger.logMethodCall(\"call\", parameters, c8oResponseListener, c8oExceptionListener);\r\n                if (parameters == null) {\r\n                    parameters = {};\r\n                }\r\n                else {\r\n                    if (this._normalizeParameters == true) {\r\n                        try {\r\n                            parameters = (JSON.parse(JSON.stringify(parameters)));\r\n                        }\r\n                        catch (error) {\r\n                            this.log.debug(\"[C8o] can't normalize parameters due to cyclic error. We will use parameters non normalized\");\r\n                        }\r\n                    }\r\n                }\r\n                const task = new C8oCallTask(this, parameters, c8oResponseListener, c8oExceptionListener);\r\n                task.run();\r\n            }\r\n            catch (error) {\r\n                this.handleCallException(c8oExceptionListener, parameters, error);\r\n            }\r\n            finally {\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters, expecting a JSON response through a C8oPromise.<br/>\r\n     * The C8oPromise allow to register response handler with .then and .thenUI,\r\n     * error handler with .fail and failUI,\r\n     * replication handler with .progress\r\n     * and synchronous response with .sync().\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters: Object - Contains c8o variables as key/value pair in the Map\r\n     * @return A C8oPromise that can deliver the JSON response\r\n     */\r\n    callJsonObject(requestable, parameters) {\r\n        this.removeNull(parameters);\r\n        const promise = new C8oPromise(this);\r\n        this.call(requestable, parameters, new C8oResponseJsonListener((response, requestParameters) => {\r\n            if (requestParameters == null) {\r\n                requestParameters = {};\r\n            }\r\n            if (response == null && requestParameters[C8oCore.ENGINE_PARAMETER_PROGRESS]) {\r\n                promise.onProgress(requestParameters[C8oCore.ENGINE_PARAMETER_PROGRESS]);\r\n            }\r\n            else {\r\n                promise.onResponse(response, requestParameters);\r\n            }\r\n        }), new C8oExceptionListener((exception, data) => {\r\n            promise.onFailure(exception, data);\r\n        }));\r\n        return promise;\r\n    }\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters, expecting a JSON response through a C8oPromise.<br/>\r\n     * The C8oPromise allow to register response handler with .then and .thenUI,\r\n     * error handler with .fail and failUI,\r\n     * replication handler with .progress\r\n     * and synchronous response with .sync().\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters - Contains c8o variables as key/value\r\n     * @return A C8oPromise that can deliver the JSON response\r\n     */\r\n    callJson(requestable, ...parameters) {\r\n        return this.callJsonObject(requestable, C8oCore.toParameters(parameters));\r\n    }\r\n    /**\r\n     * Transforms siblings values as key/value of a Map.\r\n     *\r\n     * @param parameters pair of values to transform a object\r\n     * @return a Map that contains all parameters\r\n     */\r\n    static toParameters(parameters) {\r\n        const newParameters = {};\r\n        if (0 !== parameters.length % 2) {\r\n            throw new C8oException(\"Incorrect number of parameters\");\r\n        }\r\n        for (let i = 0; i < parameters.length; i += 2) {\r\n            newParameters[parameters[i]] = parameters[i + 1];\r\n        }\r\n        return newParameters;\r\n    }\r\n    /**\r\n     * Remove null value from parameters\r\n     *\r\n     * @param parameters an object\r\n     * @return a Map that contains all parameters\r\n     */\r\n    removeNull(parameters) {\r\n        for (let val in parameters) {\r\n            if (parameters[val] == null) {\r\n                delete parameters[val];\r\n                this.log._trace(\"remove parameters \" + val + \" since its value is null or undefined\");\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the exception listener callback if it is not null, else prints the exception stack trace.\r\n     *\r\n     * @param c8oExceptionListener\r\n     * @param requestParameters\r\n     * @param exception\r\n     */\r\n    handleCallException(c8oExceptionListener, requestParameters, exception) {\r\n        this.c8oLogger.warn(\"Handle a call exception\", exception);\r\n        if (c8oExceptionListener != null) {\r\n            c8oExceptionListener.onException(exception, requestParameters);\r\n        }\r\n    }\r\n    /**\r\n     * Return an subject that call next if session has been lost\r\n     */\r\n    handleSessionLost() {\r\n        this.subscriber_session.subscribe((res) => {\r\n            this.c8oLogger.debug(\"[C8o][handleSessionLost] Handle a session lost\");\r\n            /*            (this.c8oFullSync as C8oFullSyncCbl).canceled = false;\r\n                        (this.c8oFullSync as C8oFullSyncCbl).cancelActiveReplications();\r\n              */\r\n        });\r\n        return this.subscriber_session;\r\n    }\r\n    /**\r\n     * Return an subject that call next if session authenticated user change\r\n     */\r\n    handleSessionAuthenticatedUserChanged() {\r\n        this.subscriber_session_changed.subscribe((res) => {\r\n            this.c8oLogger.debug(\"[C8o][handleSessionLost] Handle a session change of authenticated user\");\r\n        });\r\n        return this.subscriber_session_changed;\r\n    }\r\n    /**\r\n     * Return an subject that call next if network has change\r\n     */\r\n    handleNetworkEvents() {\r\n        return this.subscriber_network;\r\n    }\r\n    /**\r\n     * Return an subject that call next if autologin is triggered with its result\r\n     */\r\n    handleAutoLoginResponse() {\r\n        return this.subscriber_login;\r\n    }\r\n    /**\r\n     * Return an subject that call next if database has been reset\r\n     */\r\n    handleResetDatabase() {\r\n        return this.subscriber_database_reset;\r\n    }\r\n    ;\r\n    /**\r\n     * get an attachment for a given object\r\n     *\r\n     * @param id: string\r\n     * @param attachment_name: string\r\n     *\r\n     * @returns a promise containing a buffer\r\n     */\r\n    get_attachment(id, attachment_name, database_name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                if (database_name == null) {\r\n                    database_name = this.defaultDatabaseName;\r\n                }\r\n                if (this.c8oFullSync != undefined) {\r\n                    const fullsyncdb = yield this.c8oFullSync.getOrCreateFullSyncDatabase(database_name);\r\n                    fullsyncdb.getdatabase.getAttachment(id, attachment_name).then((buffer) => {\r\n                        resolve(buffer);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add a listener to monitor all changes of the 'db'.\r\n     *\r\n     * @param db the name of the fullsync database to monitor. Use the default database for a blank or a null value.\r\n     * @param listener the listener to trigger on change.\r\n     */\r\n    addFullSyncChangeListener(db, listener, parameters = {}) {\r\n        this.c8oFullSync.addFullSyncChangeListener(db, listener, parameters);\r\n    }\r\n    /**\r\n     * Remove a listener for changes of the 'db'.\r\n     *\r\n     * @param db the name of the fullsync database to monitor. Use the default database for a blank or a null value.\r\n     * @param listener the listener instance to remove.\r\n     */\r\n    removeFullSyncChangeListener(db, listener) {\r\n        this.c8oFullSync.removeFullSyncChangeListener(db, listener);\r\n    }\r\n    addLive(liveid, db, task) {\r\n        this.cancelLive(liveid);\r\n        this.lives[liveid] = task;\r\n        this.livesDb[liveid] = db;\r\n        this.addFullSyncChangeListener(db, this.handleFullSyncLive);\r\n    }\r\n    cancelLive(liveid) {\r\n        if (this.livesDb[liveid] !== undefined) {\r\n            let db = this.livesDb[liveid];\r\n            delete this.livesDb[liveid];\r\n            if (this.livesDb[db] !== undefined) {\r\n                db = null;\r\n            }\r\n            if (db !== null) {\r\n                this.removeFullSyncChangeListener(db, this.handleFullSyncLive);\r\n            }\r\n        }\r\n        delete this.lives[liveid];\r\n    }\r\n    executeHandleFullSyncLive() {\r\n        console.log(\"Executing from handleFullSyncLive into debounce\");\r\n        for (const task in this.lives) {\r\n            this.lives[task].executeFromLive();\r\n        }\r\n    }\r\n    doAlog() {\r\n        console.log(\"Executing from handleFullSyncLive into debounce\");\r\n    }\r\n    debounce(func, timeout = 300) {\r\n        let timer;\r\n        return (...args) => {\r\n            clearTimeout(timer);\r\n            timer = setTimeout(() => { func.apply(this, args); }, timeout);\r\n        };\r\n    }\r\n    truc() {\r\n        for (var i = 0; i < 10; i++) {\r\n            console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.debounce(() => this.doAlog());\r\n        }\r\n    }\r\n    /**\r\n     * This is the base object representing a Convertigo Server end point. This object should be instantiated\r\n     * when the apps starts and be accessible from any class of the app. Although this is not common , you may have\r\n     * several C8o objects instantiated in your app.\r\n     *\r\n     * @param c8oSettings Initialization options.<br/>\r\n     *                    Example: new C8oSettings().setLogRemote(false).setDefaultDatabaseName(\"sample\")\r\n     *\r\n     * @throws C8oException In case of invalid parameter or initialization failure.\r\n     */\r\n    init(c8oSettings) {\r\n        let nullableEndpoint = true;\r\n        if (c8oSettings !== undefined) {\r\n            if (c8oSettings.endpoint != null) {\r\n                nullableEndpoint = false;\r\n            }\r\n        }\r\n        if (nullableEndpoint) {\r\n            this.promiseConstructor = new Promise((resolve) => {\r\n                // if project is running into web browser served by convertigo\r\n                // get the url from window.location\r\n                if (window.location.href.startsWith(\"http\") && window.location.href.indexOf(\"/DisplayObjects\") != -1) {\r\n                    let n = window.location.href.indexOf(\"/DisplayObjects\");\r\n                    this.endpoint = window.location.href.substring(0, n);\r\n                    resolve();\r\n                }\r\n                // else if project is running on device or serve by ionic serve\r\n                // get the uri from env.json\r\n                else {\r\n                    let uri = \"\";\r\n                    if (window.location.href.startsWith(\"file://\")) {\r\n                        uri = (window.location.href.substring(0, window.location.href.indexOf(\"/index.html\"))) + \"/env.json\";\r\n                    }\r\n                    else {\r\n                        uri = window.location.origin + \"/env.json\";\r\n                    }\r\n                    this.httpGetObservable(uri)\r\n                        .subscribe(data => {\r\n                        this.data = data;\r\n                        //noinspection TypeScriptUnresolvedVariable\r\n                        let remoteBase = data[\"remoteBase\"].toString();\r\n                        let n = remoteBase.indexOf(\"/_private\");\r\n                        this.endpoint = remoteBase.substring(0, n);\r\n                        this._automaticRemoveSplashsCreen = data[\"splashScreenRemoveMode\"] !== \"manual\";\r\n                        resolve();\r\n                    }, error => {\r\n                        alert(\"Missing env.json file\");\r\n                        let errMsg;\r\n                        if (error instanceof Error) {\r\n                            errMsg = error.message;\r\n                        }\r\n                        else {\r\n                            errMsg = `${error.status} - ${error.statusText || \"\"} ${error}`;\r\n                        }\r\n                        //@ts-ignore\r\n                        if (throwError != undefined) {\r\n                            //@ts-ignore\r\n                            return throwError(errMsg);\r\n                        }\r\n                        else {\r\n                            //@ts-ignore\r\n                            return Observable.throw(errMsg);\r\n                        }\r\n                    });\r\n                }\r\n            }).then(() => {\r\n                this.extractendpoint();\r\n            });\r\n        }\r\n        else {\r\n            this.promiseConstructor = new Promise((resolve) => {\r\n                this.endpoint = c8oSettings.endpoint;\r\n                this.extractendpoint();\r\n                resolve();\r\n            });\r\n        }\r\n        this.promiseInit = Promise.all([this.promiseConstructor]).then(() => {\r\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\r\n                this.copy(c8oSettings);\r\n                this.initC8oHttInterface();\r\n                try {\r\n                    yield this.session.setInitalState();\r\n                }\r\n                catch (e) {\r\n                    console.error(\"Error calling setInitalState\", e);\r\n                }\r\n                this.c8oLogger.affect_val(this, false);\r\n                try {\r\n                    yield this.c8oLogger.logRemoteInit();\r\n                }\r\n                catch (e) {\r\n                    console.error(\"Error calling logRemoteInit\", e);\r\n                }\r\n                this.c8oLogger.logMethodCall(\"C8o Constructor\");\r\n                this.c8oFullSync = new C8oFullSyncCbl(this);\r\n                resolve();\r\n            }));\r\n        });\r\n        return this.promiseInit;\r\n    }\r\n    /**\r\n     * This should be called OnPlatform Ready to remove splashscreen if necessary\r\n     *\r\n     */\r\n    finalizeInit() {\r\n        if (this.promiseFinInit != null) {\r\n            return this.promiseFinInit;\r\n        }\r\n        else {\r\n            this.promiseFinInit = new Promise((resolve) => {\r\n                Promise.all([this.promiseInit]).then(() => {\r\n                    /**\r\n                     * Looking for splashScreen timeOut\r\n                     */\r\n                    if (this._automaticRemoveSplashsCreen) {\r\n                        if (navigator[\"splashscreen\"] !== undefined) {\r\n                            navigator[\"splashscreen\"].hide();\r\n                        }\r\n                    }\r\n                    /**\r\n                     * Looking for wkWebView\r\n                     */\r\n                    if (window[\"wkWebView\"] != undefined) {\r\n                        window[\"wkWebView\"].injectCookie(this.endpointConvertigo);\r\n                        this.log.debug(\"[C8O] wkWebView detected: We will inject Cookie for endpoint: \" + this.endpointConvertigo);\r\n                    }\r\n                    /**\r\n                     * Looking for cblite\r\n                     */\r\n                    if (window[\"cblite\"] != undefined) {\r\n                        window[\"cblite\"].getURL((err, url) => {\r\n                            if (err) {\r\n                                //this.checkReachable()\r\n                                resolve();\r\n                            }\r\n                            else {\r\n                                url = url.replace(new RegExp(\"/$\"), \"\");\r\n                                this.couchUrl = url;\r\n                                //this.checkReachable()\r\n                                resolve();\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        //this.checkReachable()\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n            return this.promiseFinInit;\r\n        }\r\n    }\r\n}\r\n// Log:\r\n// - VERBOSE (v): methods parameters,\r\n// - DEBUG (d): methods calls,\r\n// - INFO (i):\r\n// - WARN (w):\r\n// - ERROR (e):\r\n/*** Regular expression ***/\r\n/**\r\n * The regex used to handle the c8o requestable syntax (\"&lt;project&gt;.&lt;sequence&gt;\" or \"&lt;project&gt;.&lt;connector&gt;.&lt;transaction&gt;\")\r\n */\r\nC8oCore.RE_REQUESTABLE = /^([^.]*)\\.(?:([^.]+)|(?:([^.]+)\\.([^.]+)))$/;\r\n/**\r\n * The regex used to get the part of the endpoint before '/projects/...'\r\n */\r\nC8oCore.RE_ENDPOINT = /^(https?:\\/\\/([^:/]+)(:[0-9]+)?\\/?.*?)\\/projects\\/([^\\/]+)$/;\r\n/**\r\n *  Engine reserved parameters\r\n */\r\nC8oCore.ENGINE_PARAMETER_PROJECT = \"__project\";\r\nC8oCore.ENGINE_PARAMETER_SEQUENCE = \"__sequence\";\r\nC8oCore.ENGINE_PARAMETER_CONNECTOR = \"__connector\";\r\nC8oCore.ENGINE_PARAMETER_TRANSACTION = \"__transaction\";\r\nC8oCore.ENGINE_PARAMETER_ENCODED = \"__encoded\";\r\nC8oCore.ENGINE_PARAMETER_DEVICE_UUID = \"__uuid\";\r\nC8oCore.ENGINE_PARAMETER_PROGRESS = \"__progress\";\r\nC8oCore.ENGINE_PARAMETER_FROM_LIVE = \"__fromLive\";\r\n/**\r\n * FULLSYNC parameters\r\n */\r\nC8oCore.use_merge_prefix = \"_use_merge\";\r\n/**\r\n * Constant to use as a parameter for a Call of \"fs://.post\" and must be followed by a FS_POLICY_* constant.\r\n * <pre>{@code\r\n * c8o.callJson(\"fs://.post\",\r\n *   C8o.FS_POLICY, C8o.FS_POLICY_MERGE,\r\n *   \"docid\", myid,\r\n *   \"mykey\", myvalue\r\n * ).sync();\r\n * }</pre>\r\n */\r\nC8oCore.FS_POLICY = \"_use_policy\";\r\n/**\r\n Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n This is the default post policy that don't alter the document before the CouchbaseLite's insertion.\r\n */\r\nC8oCore.FS_POLICY_NONE = \"none\";\r\n/**\r\n Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n This post policy remove the \"_id\" and \"_rev\" of the document before the CouchbaseLite's insertion.\r\n */\r\nC8oCore.FS_POLICY_CREATE = \"create\";\r\n/**\r\n Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n This post policy inserts the document in CouchbaseLite even if a document with the same \"_id\" already exists.\r\n */\r\nC8oCore.FS_POLICY_OVERRIDE = \"override\";\r\n/**\r\n Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n This post policy merge the document with an existing document with the same \"_id\" before the CouchbaseLite's insertion.\r\n */\r\nC8oCore.FS_POLICY_MERGE = \"merge\";\r\n/**\r\n Use it with \"fs://.post\". Default value is \".\".\r\n\r\n This key allow to override the sub key separator in case of document depth modification.\r\n */\r\nC8oCore.FS_SUBKEY_SEPARATOR = \"_use_subkey_separator\";\r\n/**\r\n Use it with \"project.sequence\". Default value is \".\".\r\n\r\n This key allow to disable autologin feature for a given callJson\r\n */\r\nC8oCore.SEQ_AUTO_LOGIN_OFF = \"__disableAutologin\";\r\n/**\r\n * Use it with \"fs://\" request as parameter to enable the live request feature.<br/>\r\n * Must be followed by a string parameter, the 'liveid' that can be use to cancel the live\r\n * request using c8o.cancelLive(liveid) method.<br/>\r\n * A live request automatically recall the then or thenUI handler when the database changed.\r\n */\r\nC8oCore.FS_LIVE = \"__live\";\r\n/** Local cache keys **/\r\nC8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE = \"response\";\r\nC8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE = \"responseType\";\r\nC8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE = \"expirationDate\";\r\nC8oCore.LOCAL_CACHE_DATABASE_NAME = \"c8olocalcache\";\r\n/** Response type **/\r\nC8oCore.RESPONSE_TYPE_XML = \"pxml\";\r\nC8oCore.RESPONSE_TYPE_JSON = \"json\";\r\n// @dynamic\r\nclass FullSyncPolicy {\r\n    constructor(value, action) {\r\n        this.value = value;\r\n        this.action = action;\r\n    }\r\n    static values() {\r\n        return [this.NONE, this.CREATE, this.OVERRIDE, this.MERGE];\r\n    }\r\n    static getFullSyncPolicy(value) {\r\n        if (value != null) {\r\n            const fullSyncPolicyValues = FullSyncPolicy.values();\r\n            for (const fullSyncPolicy of fullSyncPolicyValues) {\r\n                if (fullSyncPolicy.value === value) {\r\n                    return fullSyncPolicy;\r\n                }\r\n            }\r\n        }\r\n        return this.NONE;\r\n    }\r\n}\r\nFullSyncPolicy.NONE = new FullSyncPolicy(C8oCore.FS_POLICY_NONE, (database, newProperties) => {\r\n    let documentId = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n    if (documentId === \"\") {\r\n        documentId = null;\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        database.post(newProperties).then((createdDocument) => {\r\n            resolve(createdDocument);\r\n        }).catch((error) => {\r\n            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n        });\r\n    });\r\n});\r\nFullSyncPolicy.CREATE = new FullSyncPolicy(C8oCore.FS_POLICY_CREATE, (database, newProperties) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n            delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n            database.post(newProperties).then((createdDocument) => {\r\n                resolve(createdDocument);\r\n            });\r\n        }\r\n        catch (error) {\r\n            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n        }\r\n    });\r\n});\r\nFullSyncPolicy.OVERRIDE = new FullSyncPolicy(C8oCore.FS_POLICY_OVERRIDE, (database, newProperties) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const documentId = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n            delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n            delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n            if (documentId == null) {\r\n                database.post(newProperties).then((createdDocument) => {\r\n                    resolve(createdDocument);\r\n                });\r\n            }\r\n            else {\r\n                database.get(documentId).then((doc) => {\r\n                    newProperties[\"_id\"] = documentId;\r\n                    newProperties[\"_rev\"] = doc._rev;\r\n                    return database.put(newProperties);\r\n                }).then((createdDocument) => {\r\n                    resolve(createdDocument);\r\n                }).catch((error) => {\r\n                    if (error.status === \"404\" || error.status === 404) {\r\n                        newProperties[\"_id\"] = documentId;\r\n                        return database.post(newProperties);\r\n                    }\r\n                    else {\r\n                        reject(error);\r\n                    }\r\n                }).then((createdDocument) => {\r\n                    resolve(createdDocument);\r\n                });\r\n            }\r\n        }\r\n        catch (error) {\r\n            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n        }\r\n    });\r\n});\r\nFullSyncPolicy.MERGE = new FullSyncPolicy(C8oCore.FS_POLICY_MERGE, (database, newProperties, subPolicy = null) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const documentId = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n            // delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n            delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n            // copy newProperties object to be able to apply subPolicy merge\r\n            let copyNewProperties = C8oFullSyncCbl.deepCloneObject(newProperties);\r\n            if (documentId == null) {\r\n                // Apply subPolicy for merge (here can only be delete since, there is no previous doc)\r\n                C8oFullSyncCbl.applySubPolicyForMerge(false, copyNewProperties, newProperties, subPolicy);\r\n                // Put document\r\n                database.put(newProperties)\r\n                    .then((createdDocument) => {\r\n                    resolve(createdDocument);\r\n                }).catch((error) => {\r\n                    reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                });\r\n            }\r\n            else {\r\n                database.get(documentId)\r\n                    .then((doc) => {\r\n                    // Apply Policy merge\r\n                    C8oFullSyncCbl.mergeProperties(newProperties, doc);\r\n                    // Apply subPolicy for merge\r\n                    C8oFullSyncCbl.applySubPolicyForMerge(true, copyNewProperties, newProperties, subPolicy);\r\n                    // Put document\r\n                    database.put(newProperties)\r\n                        .then((createdDocument) => {\r\n                        resolve(createdDocument);\r\n                    })\r\n                        .catch((error) => {\r\n                        reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                    });\r\n                }).catch((error) => {\r\n                    if (error.status === 404) {\r\n                        // Apply subPolicy for merge (here can only be delete since, there is no previous doc)\r\n                        C8oFullSyncCbl.applySubPolicyForMerge(false, copyNewProperties, newProperties, subPolicy);\r\n                        // Put document\r\n                        database.put(newProperties)\r\n                            .then((createdDocument) => {\r\n                            resolve(createdDocument);\r\n                        })\r\n                            .catch((error) => {\r\n                            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                        });\r\n                    }\r\n                    else {\r\n                        reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        catch (error) {\r\n            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n        }\r\n    });\r\n});\r\nclass FullSyncPostDocumentParameter {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n    static values() {\r\n        const array = [];\r\n        array.push(this.POLICY, this.SUBKEY_SEPARATOR);\r\n        return array;\r\n    }\r\n}\r\nFullSyncPostDocumentParameter.POLICY = new FullSyncPostDocumentParameter(C8oCore.FS_POLICY);\r\nFullSyncPostDocumentParameter.SUBKEY_SEPARATOR = new FullSyncPostDocumentParameter(C8oCore.FS_SUBKEY_SEPARATOR);\n\nclass C8oHttpInterfaceCore {\r\n    constructor(c8o, js = true) {\r\n        this.firstCall = true;\r\n        this._isCordova = null;\r\n        this.js = true;\r\n        this.session = \"\";\r\n        /**\r\n         * As we must support Angular 5.x, 6.x and 7.x, they need as peerDependencies diffrent versions of Rxjs.\r\n         * We alson need rxjs, but switch version of rxjs methods and paths to import are diffrents.\r\n         * So we test presence or not of module in some paths into rxjs to define in which version we are and execute the good import.\r\n        */\r\n        let rxjs = rxjs0; //require('rxjs');\r\n        if (rxjs != undefined) {\r\n            if (rxjs.from != undefined) {\r\n                this.from = rxjs.from;\r\n                c8o.log._trace(\"[C8oHttpInterfaceCore] Detect rxjs 6.x\");\r\n            }\r\n            else {\r\n                rxjs = rxjs1; //require('rxjs/observable/fromPromise');\r\n                c8o.log._trace(\"[C8oHttpInterfaceCore] Detect rxjs 5.x\");\r\n                if (rxjs != undefined) {\r\n                    // @ts-ignore\r\n                    this.from = rxjs.fromPromise;\r\n                }\r\n            }\r\n        }\r\n        this.c8o = c8o;\r\n        this.timeout = this.c8o.timeout;\r\n        this.firstcheckSessionR = false;\r\n        this._notifySessionLost = false;\r\n        /**\r\n         *  As this package will be used in two diffrent library, wee need to test in which platform we are,\r\n         *  to perform diffrent platform specific actions.\r\n         */\r\n        this.js = js;\r\n    }\r\n    forceInit() {\r\n        this.firstcheckSessionR = false;\r\n        this._notifySessionLost = false;\r\n    }\r\n    /**\r\n     * Method to bastract http get\r\n     * @param uri the uri for given request\r\n     */\r\n    httpGetObservable(uri, param1 = null, param2 = null) {\r\n        if (this.js) {\r\n            if (param1 == null) {\r\n                return this.from(this.c8o.httpPublic.get(uri));\r\n            }\r\n            else if (param2 == null) {\r\n                return this.from(this.c8o.httpPublic.get(uri, param1));\r\n            }\r\n            else {\r\n                return this.from(this.c8o.httpPublic.get(uri, param1, param2));\r\n            }\r\n        }\r\n        else {\r\n            if (param1 == null) {\r\n                return this.c8o.httpPublic.get(uri);\r\n            }\r\n            else if (param2 == null) {\r\n                return this.c8o.httpPublic.get(uri, param1);\r\n            }\r\n            else {\r\n                return this.c8o.httpPublic.get(uri, param1, param2);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Method to bastract http post\r\n     * @param uri the uri for given request\r\n     */\r\n    httpPostObservable(uri, param1, param2) {\r\n        if (this.js) {\r\n            return this.from(this.c8o.httpPublic.post(uri, param1, param2));\r\n        }\r\n        else {\r\n            return this.c8o.httpPublic.post(uri, param1, param2);\r\n        }\r\n    }\r\n    /**\r\n     * Call user service\r\n     * @param headers headers for request\r\n     */\r\n    getUserServiceStatus(observe) {\r\n        return new Promise((resolve, reject) => {\r\n            let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n            Object.assign(headersObject, this.c8o.headers);\r\n            let params = {\r\n                headers: this.getHeaders(headersObject),\r\n                withCredentials: true,\r\n            };\r\n            if (observe) {\r\n                params[\"observe\"] = \"response\";\r\n            }\r\n            this.httpPostObservable(this.c8o.endpointConvertigo + \"/services/user.Get\", {}, params)\r\n                .pipe(retry(1))\r\n                .subscribe(response => {\r\n                resolve(response);\r\n            }, error => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n    * Make an http post\r\n    * @param {string} url\r\n    * @param {Object} parameters\r\n    * @return {Promise<any>}\r\n    */\r\n    httpPost(url, parameters) {\r\n        parameters = this.transformRequest(parameters);\r\n        let headersObject = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"x-convertigo-sdk\": this.c8o.sdkVersion, headers: { 'Accept-Encoding': 'gzip' } };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        let headers = this.getHeaders(headersObject);\r\n        if (this.firstCall) {\r\n            this.p1 = new Promise((resolve, reject) => {\r\n                this.firstCall = false;\r\n                this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n            });\r\n            return this.p1;\r\n        }\r\n        else {\r\n            return new Promise((resolve, reject) => {\r\n                Promise.all([this.p1]).then(() => {\r\n                    this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n                }).catch((error) => {\r\n                    this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n                });\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Execute http Posts\r\n     * @param url\r\n     * @param parameters\r\n     * @param headers\r\n     * @param resolve\r\n     * @param reject\r\n     */\r\n    execHttpPosts(url, parameters, headers, resolve, reject, headers_return = false, doLogin = false) {\r\n        let _timeout = this.c8o.timeout;\r\n        if (parameters[\"_c8oTimeout\"] != undefined) {\r\n            _timeout = +parameters[\"_c8oTimeout\"];\r\n        }\r\n        this.httpPostObservable(url, parameters, {\r\n            headers: headers,\r\n            withCredentials: true,\r\n            observe: 'response'\r\n        })\r\n            .pipe(timeout(_timeout))\r\n            .pipe(retry(1))\r\n            .subscribe(response => {\r\n            this.handleResponseHttpPost(response, headers, resolve, url, parameters, headers, headers_return, reject, doLogin);\r\n        }, error => {\r\n            this.handleErrorHttpPost(error, reject, url);\r\n        });\r\n    }\r\n    /**\r\n     * Handle response of http Posts\r\n     * @param response\r\n     * @param headers\r\n     * @param resolve\r\n     */\r\n    handleResponseHttpPost(response, headers, resolve, urlReq, parametersReq, headersReq, returns_header = false, reject = null, doLogin = false) {\r\n        //this.checkReachable();\r\n        //this.triggerSessionCheck(response, headers, urlReq, parametersReq, headersReq);\r\n        if (urlReq.indexOf(\".json\") != -1) {\r\n            if (doLogin == true) {\r\n                resolve({ body: response[\"body\"], headers: response[\"headers\"] });\r\n            }\r\n            else {\r\n                this.c8o.session.sort(response, headers, urlReq, parametersReq, headersReq)\r\n                    .then((res) => {\r\n                    if (res != true || parametersReq[C8oCore.SEQ_AUTO_LOGIN_OFF] === true) {\r\n                        if (returns_header) {\r\n                            resolve({ body: response[\"body\"], headers: response[\"headers\"] });\r\n                        }\r\n                        else {\r\n                            resolve(response.body);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.execHttpPosts(urlReq, parametersReq, headersReq, resolve, reject, returns_header);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            resolve(response.body);\r\n        }\r\n    }\r\n    /**\r\n     * Handle errors of http Posts\r\n     * @param error\r\n     * @param reject\r\n     */\r\n    handleErrorHttpPost(error, reject, url = undefined) {\r\n        if (url != undefined) {\r\n            if (url.indexOf(\".Add\") == -1) {\r\n                this.c8o.network.init();\r\n            }\r\n        }\r\n        reject((new C8oHttpRequestException(C8oExceptionMessage.runHttpRequest(), error)));\r\n    }\r\n    /**\r\n     * Check type of file given in parameters\r\n     * 0 : No file to upload\r\n     * 1 : FileList Or File\r\n     * 2 : url when running in cordova\r\n     * @param {Object} parameters\r\n     * @return {number}\r\n     */\r\n    checkFile(parameters) {\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    //noinspection JSUnfilteredForInLoop\r\n                    if (parameters[p][p1] instanceof FileList || parameters[p][p1] instanceof File || parameters[p][p1] instanceof Blob) {\r\n                        return 1;\r\n                    }\r\n                    else if (this.isCordova()) {\r\n                        if (parameters[p][p1] instanceof URL) {\r\n                            return 2;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof FileList || parameters[p] instanceof File || parameters[p] instanceof Blob) {\r\n                    return 1;\r\n                }\r\n                else if (this.isCordova()) {\r\n                    if (parameters[p] instanceof URL) {\r\n                        return 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * Check if we are in cordova environment\r\n     * @return {boolean}\r\n     */\r\n    isCordova() {\r\n        if (this._isCordova == null) {\r\n            if (window[\"cordova\"] != undefined) {\r\n                this._isCordova = true;\r\n            }\r\n            else {\r\n                this._isCordova = false;\r\n            }\r\n        }\r\n        return this._isCordova;\r\n    }\r\n    /**\r\n     * Url encode parameters\r\n     * @param {Object} parameters\r\n     * @return {string}\r\n     */\r\n    transformRequest(parameters) {\r\n        let str = [];\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    //noinspection JSUnfilteredForInLoop\r\n                    str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(parameters[p][p1]));\r\n                }\r\n            }\r\n            else {\r\n                str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(parameters[p]));\r\n            }\r\n        }\r\n        let query = str.join(\"&\");\r\n        // Add this to instruct Convertigo server to remove any name space in the jSON keys\r\n        // to prevent keys like this:  'namespace:key'\r\n        return (query + \"&__removeNamespaces=true\");\r\n    }\r\n    /**\r\n     * Transform FormData parameters\r\n     * @param {Object} parameters\r\n     * @return {FormData}\r\n     */\r\n    transformRequestformdata(parameters) {\r\n        let formdata = new FormData();\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    if (parameters[p][p1] instanceof FileList) {\r\n                        for (var i = 0; i < parameters[p][p1].length; i++) {\r\n                            formdata.append(p, parameters[p][p1][i], parameters[p][p1][i].name);\r\n                        }\r\n                    }\r\n                    else if (parameters[p][p1] instanceof File || parameters[p][p1] instanceof Blob) {\r\n                        formdata.append(p, parameters[p][p1], parameters[p][p1].name);\r\n                    }\r\n                    else {\r\n                        formdata.append(p, parameters[p][p1]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof FileList) {\r\n                    for (var j = 0; j < parameters[p].length; j++) {\r\n                        formdata.append(p, parameters[p][j], parameters[p][j].name);\r\n                    }\r\n                }\r\n                else if (parameters[p] instanceof File || parameters[p] instanceof Blob) {\r\n                    formdata.append(p, parameters[p], parameters[p].name);\r\n                }\r\n                else {\r\n                    formdata.append(p, parameters[p]);\r\n                }\r\n            }\r\n        }\r\n        return formdata;\r\n    }\r\n    /**\r\n     * Extract file from parameters and return and array containing a file and params\r\n     * @param {Object} parameters\r\n     * @return {any}\r\n     */\r\n    transformRequestfileNative(parameters) {\r\n        let file = new Array();\r\n        let params = new Object();\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    if (parameters[p][p1] instanceof URL) {\r\n                        file.push([p1, parameters[p][p1]]);\r\n                    }\r\n                    else {\r\n                        params[p1] = parameters[p][p1][\"href\"];\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof URL) {\r\n                    file.push([p, parameters[p][\"href\"]]);\r\n                }\r\n                else {\r\n                    params[p] = parameters[p];\r\n                }\r\n            }\r\n        }\r\n        return [file, params];\r\n    }\r\n    /**\r\n     * Handle the request\r\n     * @param {string} url\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    handleRequest(url, parameters, c8oResponseListener) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (parameters[\"__sequence\"] !== undefined) {\r\n                if (parameters[\"__sequence\"].indexOf(\"#\") !== -1) {\r\n                    parameters[\"__sequence\"] = parameters[\"__sequence\"].substring(0, parameters[\"__sequence\"].indexOf(\"#\"));\r\n                }\r\n            }\r\n            switch (this.checkFile(parameters)) {\r\n                case 0: {\r\n                    return this.httpPost(url, parameters);\r\n                }\r\n                case 1: {\r\n                    let form = this.transformRequestformdata(parameters);\r\n                    return this.uploadFileHttp(url, form, parameters, c8oResponseListener);\r\n                }\r\n                case 2: {\r\n                    return this.uploadFilePluginNative(url, parameters, c8oResponseListener);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Upload file with native plugin\r\n     * @param {string} url\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    uploadFilePluginNative(url, parameters, c8oResponseListener) {\r\n        let progress = new C8oProgress();\r\n        progress.pull = false;\r\n        let varNull = null;\r\n        let data = this.transformRequestfileNative(parameters);\r\n        let files = data[0];\r\n        let options = new window[\"FileUploadOptions\"]();\r\n        options.fileKey = files[0][0];\r\n        options.fileName = files[0][1].substr(files[0][1].lastIndexOf('/') + 1);\r\n        options.params = data[1];\r\n        let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        options.headers = headersObject;\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all([this.p1]).then(() => {\r\n                var ft = new window[\"FileTransfer\"]();\r\n                ft.onprogress = (progressEvent) => {\r\n                    if (progressEvent.lengthComputable) {\r\n                        this.handleProgress(progressEvent, progress, parameters, c8oResponseListener, varNull);\r\n                    }\r\n                };\r\n                ft.upload(files[0][1], encodeURI(url), ((resp => {\r\n                    resolve(resp);\r\n                })), ((err) => {\r\n                    reject(err);\r\n                }), options);\r\n            })\r\n                .catch(() => {\r\n                var ft = new window[\"FileTransfer\"]();\r\n                ft.onprogress = (progressEvent) => {\r\n                    if (progressEvent.lengthComputable) {\r\n                        this.handleProgress(progressEvent, progress, parameters, c8oResponseListener, varNull);\r\n                    }\r\n                };\r\n                ft.upload(files[0][1], encodeURI(url), ((resp => {\r\n                    resolve(resp);\r\n                })), ((err) => {\r\n                    reject(err);\r\n                }), options);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Upload File using an Http client\r\n     * @param {string} url\r\n     * @param {FormData} form\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    uploadFileHttp(url, form, parameters, c8oResponseListener) {\r\n        let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        let progress = new C8oProgress();\r\n        progress.pull = false;\r\n        let varNull = null;\r\n        if (this.firstCall) {\r\n            this.p1 = new Promise((resolve) => {\r\n                this.firstCall = false;\r\n                this.getuploadRequester(url, form, headersObject)\r\n                    .subscribe(event => {\r\n                    this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                }, error => {\r\n                    this.handleErrorFileUpload(error, resolve);\r\n                });\r\n            });\r\n            return this.p1;\r\n        }\r\n        else {\r\n            return new Promise((resolve, reject) => {\r\n                Promise.all([this.p1]).then(() => {\r\n                    this.getuploadRequester(url, form, headersObject)\r\n                        .subscribe(event => {\r\n                        this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                    }, error => {\r\n                        this.handleErrorFileUpload(error, resolve);\r\n                    });\r\n                })\r\n                    .catch(() => {\r\n                    this.getuploadRequester(url, form, headersObject)\r\n                        .subscribe(event => {\r\n                        this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                    }, error => {\r\n                        this.handleErrorFileUpload(error, resolve);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * handle FileuploadResponses\r\n     * @param event\r\n     * @param progress\r\n     * @param parameters\r\n     * @param c8oResponseListener\r\n     * @param varNull\r\n     * @param resolve\r\n     */\r\n    handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve) {\r\n        if (!this.js) {\r\n            if (event.type === 1) {\r\n                this.handleProgress(event, progress, parameters, c8oResponseListener, varNull);\r\n            }\r\n            else if (this.isHttpResponse(event)) {\r\n                resolve(event.body);\r\n            }\r\n        }\r\n        else {\r\n            if (event.type == \"progress\") {\r\n                this.handleProgress(event.response, progress, parameters, c8oResponseListener, varNull);\r\n            }\r\n            else {\r\n                resolve(event.response);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Handle errors for file upload\r\n     * @param error\r\n     * @param resolve\r\n     */\r\n    handleErrorFileUpload(error, resolve) {\r\n        resolve({ \"error\": (new C8oHttpRequestException(C8oExceptionMessage.runHttpRequest(), error)) });\r\n    }\r\n    /**\r\n     * Handle progress\r\n     * @param event\r\n     * @param {C8oProgress} progress\r\n     * @param parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @param {JSON} varNull\r\n     */\r\n    handleProgress(event, progress, parameters, c8oResponseListener, varNull) {\r\n        progress.current = event.loaded;\r\n        progress.total = event.total;\r\n        if (event.loaded != event.total) {\r\n            progress.finished = false;\r\n        }\r\n        else {\r\n            progress.finished = true;\r\n        }\r\n        parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n        c8oResponseListener.onJsonResponse(varNull, parameters);\r\n    }\r\n}\n\n/**\r\n * Contains optional parameters of a C8o class instantiation.<br/>\r\n * Note that setters return the setting instance thereby C8oSettings can be instantiate like that:<br/>\r\n * new C8oSettings().setTimeout(5000).setTrustAllCertificates(true).setUseEncryption(true);\r\n *\r\n */\r\nclass C8oSettings extends C8oBase {\r\n    constructor(c8oSettings = null) {\r\n        super();\r\n        if (c8oSettings != null) {\r\n            if (c8oSettings != null) {\r\n                this.copy(c8oSettings);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Clone C8osettings object\r\n     * @return {C8oSettings}\r\n     */\r\n    clone() {\r\n        return new C8oSettings(this);\r\n    }\r\n    /**\r\n     * Sets the normalizeParameters. define if we normalize parameters of every calls using JSON.parse(JSON.stringify(parameters))<br/>\r\n     * @param normalize boolean.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setUseWorker(worker) {\r\n        this._useworker = worker;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the normalizeParameters. define if we normalize parameters of every calls using JSON.parse(JSON.stringify(parameters))<br/>\r\n     * @param normalize boolean.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setNormalizeParameters(normalize) {\r\n        this._normalizeParameters = normalize;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the if session has to be maintain alive<br/>\r\n     * @param keepAlive if session has to be keep Alive\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setKeepSessionAlive(keepAlive) {\r\n        this._keepSessionAlive = keepAlive;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets if the error convertigo is throw in fail or not<br/>\r\n     * @param errorConvertigoIntoFail boolean\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setErrorConvertigoIntoFail(errorConvertigoIntoFail) {\r\n        this._errorConvertigoIntoFail = errorConvertigoIntoFail;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the if base has to be reseted on dectecting diffrent versions<br/>\r\n     * @param resetBase if you to able reset base\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setDisableResetBase(resetBase) {\r\n        this._resetBase = resetBase;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the if base has to be prefixed by user name<br/>\r\n     * @param prefixBase if you to able prefix base\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setEnablePrefixBase(prefixBase) {\r\n        this._prefixBase = prefixBase;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the endpoint (override env.json).<br/>\r\n     * @param endpoint The endpoint.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setEndPoint(endpoint) {\r\n        this._endpointSettings = endpoint;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the connection timeout to Convertigo in milliseconds. A value of zero means the timeout is not used.<br/>\r\n     * Default is <b>0</b>.\r\n     * @param timeout The timeout.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setTimeout(timeout) {\r\n        if (timeout <= 0) {\r\n            timeout = -1;\r\n        }\r\n        this._timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Add a header\r\n     * @param name The name of header.\r\n     * @param value The value of header.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    addHeader(name, value) {\r\n        this._headers[name] = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * addClientCertificate\r\n     * @param anyCertificate\r\n     * @param {string} password\r\n     * @return {C8oSettings}\r\n     */\r\n    addClientCertificate(anyCertificate, password) {\r\n        if (typeof anyCertificate === \"string\") {\r\n            if (this._clientCertificateFiles == null) {\r\n                this._clientCertificateFiles = {};\r\n            }\r\n            this._clientCertificateFiles[anyCertificate] = password;\r\n        }\r\n        else if (typeof anyCertificate === \"number\") {\r\n            if (this._clientCertificateBinaries == null) {\r\n                this._clientCertificateBinaries = {};\r\n            }\r\n            this._clientCertificateBinaries[anyCertificate] = password;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Add a new cookie to the initial cookies send to the Convertigo server.\r\n     * @param name The name of the new cookie.\r\n     * @param value The value of the new cookie.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    addCookie(name, value) {\r\n        if (this._cookies == null) {\r\n            this._cookies = {};\r\n        }\r\n        this._cookies[name] = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a value indicating if logs are sent to the Convertigo server.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setLogRemote(logRemote) {\r\n        this._logRemote = logRemote;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a value indicating the log level you want in the device console\r\n     * 0: ALL, 1: NONE, 2: TRACE, 3: DEBUG, 4: INFO, 5: WARN, 6: ERROR, 7: FATAL\r\n     * or use the android.util.Log constants\r\n     * Default is <b>0</b>.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setLogLevelLocal(logLevelLocal) {\r\n        this._logLevelLocal = logLevelLocal;\r\n        return this;\r\n    }\r\n    /**\r\n     * setLogC8o\r\n     * @param {boolean} logC8o\r\n     * @return {C8oSettings}\r\n     */\r\n    setLogC8o(logC8o) {\r\n        this._logC8o = logC8o;\r\n        return this;\r\n    }\r\n    /**\r\n     * setLogOnFail\r\n     * @param {(exception: Error, parameters: Object) => void} logOnFail\r\n     * @return {C8oSettings}\r\n     */\r\n    setLogOnFail(logOnFail) {\r\n        this._logOnFail = logOnFail;\r\n        return this;\r\n    }\r\n    /**\r\n     * Specify the default FullSync database name. Must match a Convertigo Server\r\n     * FullSync connector name\r\n     *\r\n     * @param defaultDatabaseName: string\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setDefaultDatabaseName(defaultDatabaseName) {\r\n        this._defaultDatabaseName = defaultDatabaseName;\r\n        return this;\r\n    }\r\n    /**\r\n     * setAuthenticationCookieValue\r\n     * @param {string} authenticationCookieValue\r\n     * @return {C8oSettings}\r\n     */\r\n    setAuthenticationCookieValue(authenticationCookieValue) {\r\n        this._authenticationCookieValue = authenticationCookieValue;\r\n        return this;\r\n    }\r\n    /**\r\n     * setFullSyncServerUrl\r\n     * @param {string} fullSyncServerUrl\r\n     * @return {C8oSettings}\r\n     */\r\n    setFullSyncServerUrl(fullSyncServerUrl) {\r\n        this._fullSyncServerUrl = fullSyncServerUrl;\r\n        return this;\r\n    }\r\n    /**\r\n     * setFullSyncUsername\r\n     * @param {string} fullSyncUsername\r\n     * @return {C8oSettings}\r\n     */\r\n    setFullSyncUsername(fullSyncUsername) {\r\n        this._fullSyncUsername = fullSyncUsername;\r\n        return this;\r\n    }\r\n    /**\r\n     * setFullSyncPassword\r\n     * @param {string} fullSyncPassword\r\n     * @return {C8oSettings}\r\n     */\r\n    setFullSyncPassword(fullSyncPassword) {\r\n        this._fullSyncPassword = fullSyncPassword;\r\n        return this;\r\n    }\r\n    /**\r\n     * setFullSyncLocalSuffix\r\n     * @param {string} fullSyncLocalSuffix\r\n     * @return {C8oSettings}\r\n     */\r\n    setFullSyncLocalSuffix(fullSyncLocalSuffix) {\r\n        this._fullSyncLocalSuffix = fullSyncLocalSuffix;\r\n        return this;\r\n    }\r\n    /**\r\n     * Set if c8o calls variables are encrypted or not\r\n     *\r\n     * @param useEncryption\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    setUseEncryption(useEncryption) {\r\n        this._useEncryption = useEncryption;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * Defines whether the response should be retrieved from local cache or from Convertigo server when the device can access the network.<br/>\r\n * When the device has no network access, the local cache response is used, if existing.\r\n */\r\nclass Priority {\r\n    constructor(isAvailable) {\r\n        this.isAvailable = isAvailable;\r\n    }\r\n}\r\n//noinspection JSUnusedLocalSymbols\r\nPriority.SERVER = new Priority(false);\r\n//noinspection JSUnusedLocalSymbols\r\nPriority.LOCAL = new Priority(true);\n\nclass C8oHttpInterface extends C8oHttpInterfaceCore {\r\n    constructor(c8o) {\r\n        super(c8o, false);\r\n    }\r\n    /**\r\n     * get headers;\r\n     * @param object headers object\r\n     */\r\n    getHeaders(object) {\r\n        return new HttpHeaders(object);\r\n    }\r\n    /**\r\n     * Angular implementation to post with progress\r\n     * @param url the url to post\r\n     * @param form the form data to post\r\n     * @param headersObject Headers to use\r\n     */\r\n    getuploadRequester(url, form, headersObject) {\r\n        let headers = new HttpHeaders(headersObject);\r\n        const httpRequest = new HttpRequest('POST', url, form, { reportProgress: true, withCredentials: true, headers: headers });\r\n        return this.c8o.httpPublic.request(httpRequest);\r\n    }\r\n    /**\r\n     * test type of request\r\n     * @param event any\r\n     */\r\n    isHttpResponse(event) {\r\n        return (event instanceof HttpResponse);\r\n    }\r\n}\n\nclass C8o extends C8oCore {\r\n    constructor(http) {\r\n        super();\r\n        this.http = http;\r\n        this._http = http;\r\n    }\r\n    /**\r\n     * get current sdk version\r\n     */\r\n    get sdkVersion() {\r\n        return \"3.0.16-beta49\";\r\n    }\r\n    /**\r\n     * Method to bastract http get\r\n     * @param uri the uri for given request\r\n     */\r\n    httpGetObservable(uri) {\r\n        return this.httpPublic.get(uri);\r\n    }\r\n    /**\r\n     * Init http interface in client sdk\r\n     */\r\n    initC8oHttInterface() {\r\n        this.httpInterface = new C8oHttpInterface(this);\r\n    }\r\n}\r\nC8o.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8o, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\r\nC8o.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8o });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8o, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass C8oUtils extends C8oUtilsCore {\r\n    constructor(http) {\r\n        super();\r\n        this.http = http;\r\n        this.http = http;\r\n    }\r\n}\r\nC8oUtils.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8oUtils, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\r\nC8oUtils.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8oUtils });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: C8oUtils, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nclass HttpXsrfInterceptor {\r\n    constructor(tokenExtractor, c8o) {\r\n        this.tokenExtractor = tokenExtractor;\r\n        this.c8o = c8o;\r\n        this.headerName = \"x-xsrf-token\";\r\n        this.fetch = \"Fetch\";\r\n        this.c8o.xsrfUsed = true;\r\n    }\r\n    intercept(req, next) {\r\n        // get stored headerValue or fetch if the is no stored headerValue\r\n        const headerValue = window.localStorage.getItem(this.headerName) != undefined ? window.localStorage.getItem(this.headerName) : this.fetch;\r\n        // clone request adding xsrf header\r\n        req = req.clone({ headers: req.headers.set(this.headerName, headerValue) });\r\n        // re-execute request, and get HttResponses or HttpErrorResponses\r\n        return next.handle(req)\r\n            .pipe(filter(event => event instanceof HttpResponse || event instanceof HttpErrorResponse), tap((event) => {\r\n            // get and store new xsrf value\r\n            const xsrfResponseHeader = event[\"headers\"][\"get\"](this.headerName);\r\n            xsrfResponseHeader != undefined ? window.localStorage.setItem(this.headerName, xsrfResponseHeader) : null;\r\n        }));\r\n    }\r\n}\r\nHttpXsrfInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i1.HttpXsrfTokenExtractor }, { token: C8o }], target: i0.ɵɵFactoryTarget.Injectable });\r\nHttpXsrfInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: HttpXsrfInterceptor });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.1\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i1.HttpXsrfTokenExtractor }, { type: C8o }]; } });\n\n/*\r\n * Public API Surface of c8osdkangular\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { C8o, C8oAlldocsLocal, C8oBase, C8oCallTask, C8oCore, C8oCouchBaseLiteException, C8oException, C8oExceptionListener, C8oExceptionMessage, C8oFullSync, C8oFullSyncCbl, C8oFullSyncChangeListener, C8oFullSyncDatabase, C8oFullSyncTranslator, C8oHttpInterface, C8oHttpInterfaceCore, C8oHttpRequestException, C8oLocalCache, C8oLocalCacheResponse, C8oLogLevel, C8oLogger, C8oManagerDatabase, C8oManagerLogin, C8oManagerNetwork, C8oManagerSession, C8oNetworkStatus, C8oProgress, C8oPromise, C8oReplicationStatus, C8oResponseJsonListener, C8oResponseProgressListener, C8oRessourceNotFoundException, C8oSessionStatus, C8oSessionUser, C8oSettings, C8oTranslator, C8oUnavailableLocalCacheException, C8oUtils, C8oUtilsCore, FullSyncAbstractResponse, FullSyncAttachmentParameter, FullSyncDefaultResponse, FullSyncDeleteDocumentParameter, FullSyncDocumentOperationResponse, FullSyncGetDocumentParameter, FullSyncGetViewParameter, FullSyncPolicy, FullSyncPostDocumentParameter, FullSyncReplication, FullSyncRequestable, FullSyncResponse, HttpXsrfInterceptor, Priority, Queue, Semaphore };\n//# sourceMappingURL=c8osdkangular.mjs.map\n","map":{"version":3,"file":"c8osdkangular.mjs","sources":["../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oLogLevel.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oBase.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oUtilsCore.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oException.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oExceptionMessage.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oLogger.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oFullSyncTranslator.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oLocalCacheResponse.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oResponse.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oCouchBaseLiteException.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oRessourceNotFoundException.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oUnavailableLocalCacheException.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oProgress.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncReplication.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oload.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncDatabase.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncDeleteDocumentParameter.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncAttachmentParameter.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncGetDocumentParameter.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncGetViewParameter.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncRequestable.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/fullSyncResponse.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oAlldocsLocal.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oFullSync.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oLocalCache.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oTranslator.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oHttpRequestException.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oCallTask.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oFullSyncChangeListener.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oPromise.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/Exception/c8oExceptionListener.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oNetworkStatus.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oManagerNetwork.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oSessionStatus.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/C8oReplicationStatus.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oManagerDatabase.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oManagerLogin.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/C8oSessionUser.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oManagerSession.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oCore.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oHttpInterfaceCore.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/c8oSettings.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdk-js-core/src/c8o/priority.service.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/lib/c8oHttpInterface.service.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/lib/c8o.service.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/lib/c8oUtils.service.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/lib/c8oHttpxsrfInterceptor.service.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/public_api.ts","../../../projects/c8osdkangular/src/c8osdk-angular-core/c8osdkangular.ts"],"sourcesContent":["export class C8oLogLevel {\r\n    // private static JSON_KEY_REMOTE_LOG_LEVEL: string = \"remoteLogLevel\";\r\n\r\n    public static NULL: C8oLogLevel = new C8oLogLevel(\"\", 0);\r\n    public static NONE: C8oLogLevel = new C8oLogLevel(\"none\", 1);\r\n    public static TRACE: C8oLogLevel = new C8oLogLevel(\"trace\", 2);\r\n    public static DEBUG: C8oLogLevel = new C8oLogLevel(\"debug\", 3);\r\n    public static INFO: C8oLogLevel = new C8oLogLevel(\"info\", 4);\r\n    public static WARN: C8oLogLevel = new C8oLogLevel(\"warn\", 5);\r\n    public static ERROR: C8oLogLevel = new C8oLogLevel(\"error\", 6);\r\n    public static FATAL: C8oLogLevel = new C8oLogLevel(\"fatal\", 7);\r\n\r\n    public static C8O_LOG_LEVELS = [C8oLogLevel.NULL, C8oLogLevel.NONE, C8oLogLevel.TRACE, C8oLogLevel.DEBUG, C8oLogLevel.INFO, C8oLogLevel.WARN, C8oLogLevel.ERROR, C8oLogLevel.FATAL];\r\n\r\n    public name: string;\r\n    public priority: number;\r\n\r\n    constructor(name: string, priority: number) {\r\n        this.name = name;\r\n        this.priority = priority;\r\n    }\r\n\r\n    public static getC8oLogLevel(name: string): C8oLogLevel {\r\n        for (let i = 0; i <= C8oLogLevel.C8O_LOG_LEVELS.length; i++) {\r\n            if (C8oLogLevel.C8O_LOG_LEVELS[i].name === name) {\r\n                return C8oLogLevel.C8O_LOG_LEVELS[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import {C8oLogLevel} from \"./c8oLogLevel\";\r\n\r\nexport class C8oBase {\r\n    /*HTTP*/\r\n    protected _endpointSettings: string;\r\n    protected _timeout: number = 3600000;\r\n    // protected _trustAllCertificates: boolean = false;\r\n    protected _cookies: Object = {};\r\n    protected _clientCertificateFiles: Object;\r\n    protected _clientCertificateBinaries: Object;\r\n\r\n    /*Log*/\r\n    protected _logRemote: boolean = true;\r\n    protected _initialLogRemote: boolean = true;\r\n    protected _logLevelLocal: C8oLogLevel = C8oLogLevel.NONE;\r\n    protected _logC8o: boolean = false;\r\n    protected _logOnFail: (exception: Error, parameters: Object) => void;\r\n\r\n    /* FullSync */\r\n    protected _defaultDatabaseName: string = null;\r\n    protected _authenticationCookieValue: string = null;\r\n    protected _fullSyncLocalSuffix: string = null;\r\n    protected _fullSyncServerUrl: string = \"http://localhost:5984\";\r\n    protected _fullSyncUsername: string;\r\n    protected _fullSyncPassword: string;\r\n\r\n    /* Encryption */\r\n    protected _useEncryption: boolean = false;\r\n    protected _disableSSL: boolean = false;\r\n    //noinspection JSUnusedGlobalSymbols\r\n    protected _keyStorePassword: string;\r\n    //noinspection JSUnusedGlobalSymbols\r\n    protected _trustStorePassword: string;\r\n\r\n    //Dates\r\n    protected _normalizeParameters: boolean;\r\n\r\n    //Dates\r\n    protected _useworker: boolean = false;\r\n\r\n    protected _keepSessionAlive: boolean = true;\r\n\r\n    protected _errorConvertigoIntoFail: boolean = false;\r\n\r\n    protected _resetBase: boolean = true;\r\n    \r\n    protected _prefixBase: boolean = false;\r\n\r\n    protected _headers: Object = {};\r\n    \r\n    protected _initalLogLevel: Boolean;\r\n    /** Getters **/\r\n\r\n    /**\r\n     * Gets if normalize parameters.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The timeout.\r\n     */\r\n     public get usewroker(): boolean {\r\n        return this._useworker;\r\n    }\r\n\r\n    /**\r\n     * Gets if normalize parameters.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The timeout.\r\n     */\r\n    public get normalizeParameters(): boolean {\r\n        return this._normalizeParameters;\r\n    }\r\n    /**\r\n     * Gets if session has to be keep alive.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The KeepSessionAlive status.\r\n     */\r\n    public get keepSessionAlive(): boolean {\r\n        return this._keepSessionAlive;\r\n    }\r\n\r\n    /**\r\n     * Gets if error convertigo are thrown into fail.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The errorConvertigoIntoFail status.\r\n     */\r\n    public get errorConvertigoIntoFail(): boolean {\r\n        return this._errorConvertigoIntoFail;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Gets if reset database is disabled.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The disable reset base status.\r\n     */\r\n    public get resetBase(): boolean {\r\n        return this._resetBase;\r\n    }\r\n\r\n    /**\r\n     * Gets if we have to prefix databases with user name.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns The prefix base status.\r\n     */\r\n    public get prefixBase(): boolean {\r\n        return this._prefixBase;\r\n    }\r\n    \r\n    /**\r\n     * Gets the connection timeout to Convertigo in milliseconds. A value of zero means the timeout is not used.<br/>\r\n     * Default is <b>0</b>.\r\n     * @returns The timeout.\r\n     */\r\n    public get timeout(): number {\r\n        return this._timeout;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating whether https calls trust all certificates or not.<br/>\r\n     * Default is <b>false</b>.\r\n     * @returns <b>true</b> if https calls trust all certificates; otherwise, <b>false</b>.\r\n     */\r\n    /*public get trustAllCertificates(): boolean {\r\n        return this._trustAllCertificates;\r\n    }*/\r\n\r\n    /**\r\n     * Gets initial cookies to send to the Convertigo server.<br/>\r\n     * Default is <b>null</b>.\r\n     * @returns List of cookies.\r\n     */\r\n    public get cookies(): Object {\r\n        return this._cookies;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating if logs are sent to the Convertigo server.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns <b>true</b> if logs are sent to the Convertigo server; otherwise, <b>false</b>.\r\n     */\r\n    public get logRemote(): boolean {\r\n        return this._logRemote;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating logs level local\r\n     *\r\n     * @returns C8oLogLevel object\r\n     */\r\n    public get logLevelLocal(): C8oLogLevel {\r\n        return this._logLevelLocal;\r\n    }\r\n\r\n    public get logC8o(): boolean {\r\n        return this._logC8o;\r\n    }\r\n\r\n    public get defaultDatabaseName(): string {\r\n        return this._defaultDatabaseName;\r\n    }\r\n\r\n    public get authenticationCookieValue(): string {\r\n        return this._authenticationCookieValue;\r\n    }\r\n\r\n    public get fullSyncLocalSuffix(): string {\r\n        return this._fullSyncLocalSuffix;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get fullSyncServerUrl(): string {\r\n        return this._fullSyncServerUrl;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get fullSyncUsername(): string {\r\n        return this._fullSyncUsername;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get fullSyncPassword(): string {\r\n        return this._fullSyncPassword;\r\n    }\r\n\r\n    public get logOnFail(): (exception: Error, parameters: Object) => void {\r\n        return this._logOnFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint define in C8oSettings<br/>\r\n     * @returns The current <b>endpoint</b>, if defined by c8oSettings.\r\n     */\r\n    public get endpoint(): string {\r\n        return this._endpointSettings;\r\n    }\r\n\r\n    public get headers(): Object {\r\n        return this._headers;\r\n    }\r\n\r\n    public copy(c8oBase: C8oBase) {\r\n        if (c8oBase !== undefined) {\r\n            /** HTTP **/\r\n            this._timeout = c8oBase._timeout;\r\n            // this._trustAllCertificates = c8oBase._trustAllCertificates;\r\n            if (this.cookies == null) {\r\n                this._cookies = {};\r\n            }\r\n            if (c8oBase.cookies !== null) {\r\n                this._cookies = c8oBase._cookies;\r\n            }\r\n\r\n            /** Log **/\r\n            this._logRemote = c8oBase.logRemote;\r\n            this._initialLogRemote = c8oBase.logRemote;\r\n            this._logLevelLocal = c8oBase.logLevelLocal;\r\n            this._logC8o = c8oBase.logC8o;\r\n            this._logOnFail = c8oBase.logOnFail;\r\n\r\n            /** FullSync **/\r\n            this._defaultDatabaseName = c8oBase.defaultDatabaseName;\r\n            this._authenticationCookieValue = c8oBase.authenticationCookieValue;\r\n            this._fullSyncLocalSuffix = c8oBase.fullSyncLocalSuffix;\r\n\r\n            this._fullSyncServerUrl = c8oBase.fullSyncServerUrl;\r\n            this._fullSyncUsername = c8oBase.fullSyncUsername;\r\n            this._fullSyncPassword = c8oBase.fullSyncPassword;\r\n            this._headers = c8oBase._headers;\r\n\r\n            /** Date **/\r\n            this._normalizeParameters = c8oBase._normalizeParameters;\r\n\r\n            /**Keep ALive */\r\n            this._keepSessionAlive = c8oBase._keepSessionAlive;\r\n\r\n            /** Reset base */\r\n            this._resetBase = c8oBase._resetBase;\r\n            /** Reset base */\r\n            this._prefixBase = c8oBase._prefixBase;\r\n            this._errorConvertigoIntoFail = c8oBase._errorConvertigoIntoFail;\r\n            this._useworker = c8oBase.usewroker;\r\n            \r\n        }\r\n    }\r\n}\r\n","// @dynamic\r\n\r\nexport class C8oUtilsCore {\r\n\r\n    /** FullSync parameters prefix. **/\r\n    private static USE_PARAMETER_IDENTIFIER: string = \"_use_\";\r\n    public data: JSON;\r\n\r\n    public constructor() {\r\n    }\r\n\r\n    /**\r\n     * Returns the class name of the object as a String, if the object is null then returns the String \"null\".\r\n     *\r\n     * @param object\r\n     * @returns string\r\n     */\r\n    public static getObjectClassName(object: any) {\r\n        return typeof object;\r\n    }\r\n\r\n    public static isValidUrl(url: string): boolean {\r\n        return /^(http|https):\\/\\/[^ \"]+$/.test(url.toString());\r\n    }\r\n\r\n    /**\r\n     * returns 128 bits hash using MD5 algo \r\n     * @param str any string\r\n     */\r\n    public static MD5(str: string):string{\r\n        const MD5 = (d) => {var r = M(V(Y(X(d),8*d.length)));return r.toLowerCase()};function M(d){for(var _,m=\"0123456789ABCDEF\",f=\"\",r=0;r<d.length;r++)_=d.charCodeAt(r),f+=m.charAt(_>>>4&15)+m.charAt(15&_);return f}function X(d){for(var _=Array(d.length>>2),m=0;m<_.length;m++)_[m]=0;for(m=0;m<8*d.length;m+=8)_[m>>5]|=(255&d.charCodeAt(m/8))<<m%32;return _}function V(d){for(var _=\"\",m=0;m<32*d.length;m+=8)_+=String.fromCharCode(d[m>>5]>>>m%32&255);return _}function Y(d,_){d[_>>5]|=128<<_%32,d[14+(_+64>>>9<<4)]=_;for(var m=1732584193,f=-271733879,r=-1732584194,i=271733878,n=0;n<d.length;n+=16){var h=m,t=f,g=r,e=i;f=md5_ii(f=md5_ii(f=md5_ii(f=md5_ii(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_hh(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_gg(f=md5_ff(f=md5_ff(f=md5_ff(f=md5_ff(f,r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+0],7,-680876936),f,r,d[n+1],12,-389564586),m,f,d[n+2],17,606105819),i,m,d[n+3],22,-1044525330),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+4],7,-176418897),f,r,d[n+5],12,1200080426),m,f,d[n+6],17,-1473231341),i,m,d[n+7],22,-45705983),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+8],7,1770035416),f,r,d[n+9],12,-1958414417),m,f,d[n+10],17,-42063),i,m,d[n+11],22,-1990404162),r=md5_ff(r,i=md5_ff(i,m=md5_ff(m,f,r,i,d[n+12],7,1804603682),f,r,d[n+13],12,-40341101),m,f,d[n+14],17,-1502002290),i,m,d[n+15],22,1236535329),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+1],5,-165796510),f,r,d[n+6],9,-1069501632),m,f,d[n+11],14,643717713),i,m,d[n+0],20,-373897302),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+5],5,-701558691),f,r,d[n+10],9,38016083),m,f,d[n+15],14,-660478335),i,m,d[n+4],20,-405537848),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+9],5,568446438),f,r,d[n+14],9,-1019803690),m,f,d[n+3],14,-187363961),i,m,d[n+8],20,1163531501),r=md5_gg(r,i=md5_gg(i,m=md5_gg(m,f,r,i,d[n+13],5,-1444681467),f,r,d[n+2],9,-51403784),m,f,d[n+7],14,1735328473),i,m,d[n+12],20,-1926607734),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+5],4,-378558),f,r,d[n+8],11,-2022574463),m,f,d[n+11],16,1839030562),i,m,d[n+14],23,-35309556),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+1],4,-1530992060),f,r,d[n+4],11,1272893353),m,f,d[n+7],16,-155497632),i,m,d[n+10],23,-1094730640),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+13],4,681279174),f,r,d[n+0],11,-358537222),m,f,d[n+3],16,-722521979),i,m,d[n+6],23,76029189),r=md5_hh(r,i=md5_hh(i,m=md5_hh(m,f,r,i,d[n+9],4,-640364487),f,r,d[n+12],11,-421815835),m,f,d[n+15],16,530742520),i,m,d[n+2],23,-995338651),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+0],6,-198630844),f,r,d[n+7],10,1126891415),m,f,d[n+14],15,-1416354905),i,m,d[n+5],21,-57434055),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+12],6,1700485571),f,r,d[n+3],10,-1894986606),m,f,d[n+10],15,-1051523),i,m,d[n+1],21,-2054922799),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+8],6,1873313359),f,r,d[n+15],10,-30611744),m,f,d[n+6],15,-1560198380),i,m,d[n+13],21,1309151649),r=md5_ii(r,i=md5_ii(i,m=md5_ii(m,f,r,i,d[n+4],6,-145523070),f,r,d[n+11],10,-1120210379),m,f,d[n+2],15,718787259),i,m,d[n+9],21,-343485551),m=safe_add(m,h),f=safe_add(f,t),r=safe_add(r,g),i=safe_add(i,e)}return Array(m,f,r,i)}function md5_cmn(d,_,m,f,r,i){return safe_add(bit_rol(safe_add(safe_add(_,d),safe_add(f,i)),r),m)}function md5_ff(d,_,m,f,r,i,n){return md5_cmn(_&m|~_&f,d,_,r,i,n)}function md5_gg(d,_,m,f,r,i,n){return md5_cmn(_&f|m&~f,d,_,r,i,n)}function md5_hh(d,_,m,f,r,i,n){return md5_cmn(_^m^f,d,_,r,i,n)}function md5_ii(d,_,m,f,r,i,n){return md5_cmn(m^(_|~f),d,_,r,i,n)}function safe_add(d,_){var m=(65535&d)+(65535&_);return(d>>16)+(_>>16)+(m>>16)<<16|65535&m}function bit_rol(d,_){return d<<_|d>>>32-_}\r\n        return MD5(str);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param str any string\r\n     */\r\n    public static MD5ArrayBuffer(str): any{\r\n        const MD5str = C8oUtilsCore.MD5(str);\r\n        return Buffer.from(MD5str, 'utf-8').slice(0,16);\r\n    }\r\n    \r\n    public static getNewGUIDString(): string {\r\n        if(window[\"device\"] != undefined){\r\n            let platform: string = window[\"device\"][\"platform\"];\r\n            platform = platform.substring(0,3);\r\n            let uuid = platform +\"-\"+ window[\"device\"][\"uuid\"];\r\n            return uuid;\r\n        }\r\n        else{\r\n            let uuidStored: string = localStorage.getItem(\"__c8o_uuid\");\r\n\r\n            if(uuidStored != undefined && uuidStored != \"\"){\r\n                return uuidStored;\r\n            }\r\n            else{\r\n                let platform: string = \"web-\";\r\n                let d = new Date().getTime();\r\n                let uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\r\n                    const r = (d + Math.random() * 16) % 16 | 0;\r\n                    d = Math.floor(d / 16);\r\n                    return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\r\n                });\r\n                uuid = platform + uuid;\r\n                localStorage.setItem(\"__c8o_uuid\", uuid);\r\n                return uuid;\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    /** TAG Parameter **/\r\n\r\n    public static getParameter(parameters: Object, name: string, useName: boolean): any {\r\n        for (let _i = 0; _i < Object.keys(parameters).length; _i++) {\r\n            const parameterName = Object.keys(parameters)[_i];\r\n            if ((name === parameterName) || (useName && name === this.USE_PARAMETER_IDENTIFIER + parameterName)) {\r\n                const obj = {};\r\n                obj[Object.keys(parameters)[_i]] = parameters[Object.keys(parameters)[_i]];\r\n                return obj;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Searches in the list the parameter with this specific name (or the same name with the prefix '_use_') and returns it.<br/>\r\n     * Returns null if the parameter is not found.\r\n     *\r\n     * @param parameters\r\n     * @param name\r\n     * @param useName\r\n     * @returns string\r\n     */\r\n    public static getParameterStringValue(parameters: Object, name: string, useName: boolean): string {\r\n        const parameter = C8oUtilsCore.getParameter(parameters, name, useName);\r\n        if (parameter != null) {\r\n            return \"\" + parameter[name];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static getParameterObjectValue(parameters: Object, name: string, useName: boolean = false): any {\r\n        //noinspection UnnecessaryLocalVariableJS\r\n        const parameters2 = parameters;\r\n        const parameter = C8oUtilsCore.getParameter(parameters2, name, useName);\r\n        if (parameter != null) {\r\n            return parameter[name];\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    public static peekParameterStringValue(parameters: Object, name: string, exceptionIfMissing: boolean): string {\r\n        //noinspection UnnecessaryLocalVariableJS\r\n        const parameters2 = parameters;\r\n        const value: string = this.getParameterStringValue(parameters2, name, false);\r\n        if (value == null) {\r\n            if (exceptionIfMissing) {\r\n                throw new Error(\"The parameter '\" + name + \"' is missing\");\r\n            }\r\n        } else {\r\n            delete parameters[name];\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public static peekParameterObjectValue(parameters: Object, name: string, exceptionIfMissing: boolean): string {\r\n        const parameters2 = parameters;\r\n        const value: string = this.getParameterObjectValue(parameters2, name, false);\r\n        if (value == null) {\r\n            if (exceptionIfMissing) {\r\n                throw new Error(\"The parameter '\" + name + \"' is missing\");\r\n            }\r\n        } else {\r\n            delete parameters2[name];\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Serializes a c8o call request thanks to its parameters and response type.\r\n     *\r\n     * @param parameters\r\n     * @param responseType\r\n     * @returns string\r\n     * @throws C8oException\r\n     */\r\n    public static identifyC8oCallRequest(parameters: Object, responseType: string): string {\r\n        return responseType + JSON.stringify(parameters);\r\n    }\r\n\r\n    public static checkHeaderArgument(response, argument){\r\n        return response.headers.get(argument);\r\n    }\r\n}\r\n\r\nexport class Queue<T> {\r\n    public _store: T[] = [];\r\n\r\n    public push(val: T) {\r\n        this._store.push(val);\r\n    }\r\n\r\n    public pop(): T {\r\n        return this._store.shift();\r\n    }\r\n\r\n    public count(): number {\r\n        return this._store.length;\r\n    }\r\n}\r\n\r\n\r\nexport class Semaphore {\r\n    private max: number;\r\n    private counter = 0;\r\n    private waiting = [];\r\n\r\n    constructor(max){\r\n        this.max = max;\r\n    }\r\n    \r\n    \r\n    public take () {\r\n      if (this.waiting.length > 0 && this.counter < this.max){\r\n        this.counter++;\r\n        let promise = this.waiting.shift();\r\n        promise.resolve();\r\n      }\r\n    }\r\n    \r\n    public acquire () {\r\n      if(this.counter < this.max) {\r\n        this.counter++\r\n        return new Promise<void>(resolve => {\r\n        resolve();\r\n      });\r\n      } else {\r\n        return new Promise((resolve, err) => {\r\n          this.waiting.push({resolve: resolve, err: err});\r\n        });\r\n      }\r\n    }\r\n      \r\n    public release (arg = null) {\r\n     this.counter--;\r\n     this.take();\r\n    }\r\n    \r\n    public purge () {\r\n      let unresolved = this.waiting.length;\r\n    \r\n      for (let i = 0; i < unresolved; i++) {\r\n        this.waiting[i].err('Task has been purged.');\r\n      }\r\n    \r\n      this.counter = 0;\r\n      this.waiting = [];\r\n      \r\n      return unresolved;\r\n    }\r\n  }\r\n","/**\r\n * Thrown specific exceptions to Convertigo.\r\n */\r\nexport class C8oException extends Error {\r\n\r\n    public override message: string;\r\n    protected _cause: Error;\r\n\r\n    constructor(message: string);\r\n    constructor(message: string, cause: Error);\r\n    constructor(message: string, cause: Error, all: boolean);\r\n    //noinspection JSUnusedLocalSymbols\r\n    constructor(message: string, cause: Error = null, all: boolean = false) {\r\n        if (cause == null) {\r\n            super(message);\r\n            this.message = message;\r\n            // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n            Object.setPrototypeOf(this, C8oException.prototype);\r\n        }\r\n        else {\r\n            super(message);\r\n            this.message = message;\r\n            this._cause = cause;\r\n            // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n            Object.setPrototypeOf(this, C8oException.prototype);\r\n        }\r\n    }\r\n    public get cause(): Error{\r\n        return this._cause;\r\n    }\r\n\r\n    public toJSON(){\r\n        var alt = {};\r\n        Object.getOwnPropertyNames(this).forEach(function (key) {\r\n            alt[key] = this[key];\r\n        }, this);\r\n        return alt;\r\n    }\r\n    \r\n    public override toString(){\r\n        var alt = {};\r\n        Object.getOwnPropertyNames(this).forEach(function (key) {\r\n            alt[key] = this[key];\r\n        }, this);\r\n        return alt;\r\n    }\r\n}","import {C8oResponseListener} from \"../c8oResponse\";\r\nimport {C8oUtilsCore} from \"../c8oUtilsCore\";\r\n/**\r\n * Contains static Functions returning the exception messages\r\n * in order to make simpler their modification and avoid duplication.\r\n */\r\nexport class C8oExceptionMessage {\r\n\r\n    /** TAG Illegal argument **/\r\n    static notImplementedFullSyncInterface(): string {\r\n        return \"You are using the default FullSyncInterface which is not implemented\";\r\n    }\r\n\r\n    static invalidParameterValue(parameterName: string, details: string = null): string {\r\n        let errorMessage: string = \"The parameter '\" + parameterName + \"' is invalid\";\r\n        if (details != null) {\r\n            errorMessage += \", \" + details;\r\n        }\r\n        return errorMessage;\r\n    }\r\n    static illegalArgumentInvalidEndpoint(endpoint: string): string {\r\n        return \"'\" + endpoint + \"' is not a valid Convertigo endpoint\";\r\n    }\r\n\r\n    static wrongListener(c8oListener: C8oResponseListener): string {\r\n        return \"The C8oListener class \" + C8oUtilsCore.getObjectClassName(c8oListener) + \" is not handled\";\r\n    }\r\n\r\n    static illegalArgumentNullParameter(parameterName: string): string {\r\n        return parameterName + \" must be not null\";\r\n    }\r\n\r\n    static  missingValue(valueName: string): string {\r\n        return \"The \" + valueName + \" is missing\";\r\n    }\r\n\r\n    static  unknownValue(valueName: string, value: string): string {\r\n        return \"The \" + valueName + \" value \" + value + \" is unknown\";\r\n    }\r\n\r\n    static  unknownType(variableName: string, variable: Object): string {\r\n        return \"The \" + variableName + \" type \" + C8oUtilsCore.getObjectClassName(variable) + \"is unknown\";\r\n    }\r\n\r\n    static  ressourceNotFound(ressourceName: string): string {\r\n        return \"The \" + ressourceName + \" was not found\";\r\n    }\r\n\r\n    /** TAG Illegal argument */\r\n\r\n    static  illegalArgumentInvalidFullSyncDatabaseUrl(fullSyncDatabaseUrlStr: string): string {\r\n        return \"The fullSync database url '\" + fullSyncDatabaseUrlStr + \"' is not a valid url\";\r\n    }\r\n\r\n    static  FullSyncDatabaseInitFailed(databaseName: string): string {\r\n        return \"Failed to initialize the FullSync database '\" + databaseName + \"'\";\r\n    }\r\n\r\n    static  MissParameter(parameterName: string): string {\r\n        return \"The parameter '\" + parameterName + \"' is missing\";\r\n    }\r\n\r\n    /* private static  illegalArgumentInvalidParameterValue(parameterName: string, parameterValue: string): string {\r\n     return \"'\" + parameterValue + \"' is not a valid value for the parameter '\" + parameterName + \"'\"\r\n     } */\r\n\r\n    static illegalArgumentInvalidURL(urlStr: string): string {\r\n        return \"'\" + urlStr + \"' is not a valid URL\";\r\n    }\r\n\r\n    static  InvalidArgumentInvalidURL(urlStr: string): string {\r\n        return \"'\" + urlStr + \"' is not a valid URL\";\r\n    }\r\n\r\n    static  UnknownFullSyncPolicy(policy: any): string {\r\n        return \"Unknown the FullSync policy '\" + policy + \"'\";\r\n    }\r\n\r\n    static InvalidArgumentInvalidEndpoint(endpoint: string): string {\r\n        return \"'\" + endpoint + \"' is not a valid Convertigo endpoint\";\r\n    }\r\n\r\n    static  InvalidRequestable(requestable: string): string {\r\n        return \"'\" + requestable + \"' is not a valid requestable.\";\r\n    }\r\n\r\n    static  InvalidParameterType(parameterName: string, wantedParameterType: string, actualParameterType: string): string {\r\n        return \"The parameter '\" + parameterName + \"' must be of type '\" + wantedParameterType + \"' and not '\" + actualParameterType + \"'\";\r\n    }\r\n\r\n    static  illegalArgumentIncompatibleListener(listenerType: string, responseType: string): string {\r\n        return \"The listener type '\" + listenerType + \"' is incompatible with the response type '\" + responseType + \"'\";\r\n    }\r\n\r\n    static  InvalidArgumentNullParameter(parameterName: string): string {\r\n        return parameterName + \" must be not null\";\r\n    }\r\n\r\n    /** TAG Initialization */\r\n    static  InitError(): string {\r\n        return \"Unable to initialize\";\r\n    }\r\n\r\n    static  InitRsainternalKey(): string {\r\n        return \"Unable to initialize the RSA internal key\";\r\n    }\r\n\r\n    static  InitCouchManager(): string {\r\n        return \"Unable to initialize the fullSync databases manager\";\r\n    }\r\n\r\n    static  InitSslSocketFactory(): string {\r\n        return \"Unable to initialize the ssl socket factory\";\r\n    }\r\n\r\n    static  InitDocumentBuilder(): string {\r\n        return \"Unable to initialize the XML document builder\";\r\n    }\r\n\r\n    /** TAG Parse */\r\n\r\n    static  ParseStreamToJson(): string {\r\n        return \"Unable to parse the input stream to a json document\";\r\n    }\r\n\r\n    static  ParseStreamToXml(): string {\r\n        return \"Unable to parse the input stream to an xml document\";\r\n    }\r\n\r\n    static  parseInputStreamToString(): string {\r\n        return \"Unable to parse the input stream to a string\";\r\n    }\r\n\r\n    static  parseXmlToString(): string {\r\n        return \"Unable to parse the xml document to a string\";\r\n    }\r\n\r\n    static  parseRsainternalKey(): string {\r\n        return \"Unable to parse the RSA internal key\";\r\n    }\r\n\r\n    static  parseQueryEnumeratorToJson(): string {\r\n        return \"Unable to parse the query to a json document\";\r\n    }\r\n\r\n    static  parseLogsToJson(): string {\r\n        return \"Unable to parse logs to a json document\";\r\n    }\r\n\r\n    static  parseLogsStreamToJson(): string {\r\n        return \"Unable to parse stream containing logs response to a json document\";\r\n    }\r\n\r\n    static  parseC8oReplicationResultToJson(): string {\r\n        return \"Unable to parse the replication result to a json document\";\r\n    }\r\n\r\n    static  parseFullSyncDefaultResponseToJson(): string {\r\n        return \"Unable to parse the default fullSync result to a json document\";\r\n    }\r\n\r\n    static  parseFullSyncPostDocumentResponseToJson(): string {\r\n        return \"Unable to parse the post document fullSync result to a json document\";\r\n    }\r\n\r\n    static  parseStringToJson(): string {\r\n        return \"Unable to parse the string to a JSON document\";\r\n    }\r\n\r\n    static  ParseStringToObject(type: any/*type*/): string {\r\n        return \"Unable to parse the string (JSON):string to an object of type \"; // + type\r\n    }\r\n\r\n    static  StringToJsonValue(str: string): string {\r\n        return \"Unable to translate the string '\" + str + \"' to a JSON value\";\r\n    }\r\n\r\n    /** TAG HTTP */\r\n\r\n    static  retrieveRsainternalKey(): string {\r\n        return \"Error during http request to get the RSA internal key\";\r\n    }\r\n\r\n    static  httpLogs(): string {\r\n        return \"Error during http request to send logs to the Convertigo server\";\r\n    }\r\n\r\n    /** TAG Couch */\r\n\r\n    static  couchRequestGetView(): string {\r\n        return \"Unable to run the view query\";\r\n    }\r\n\r\n    static couchRequestCreateIndex(): string {\r\n        return \"Unable to create the index\";\r\n    }\r\n    static couchRequestFind(): string {\r\n        return \"Unable to run the query find\";\r\n    }\r\n\r\n    static couchRequestExplain(): string {\r\n        return \"Unable to run the query explain\";\r\n    }\r\n\r\n    static couchRequestGetIndexes(): string {\r\n        return \"Unable to run the query getIndexes\";\r\n    }\r\n\r\n    static couchRequestDeleteIndex(): string {\r\n        return \"Unable to run the query deleteIndex\";\r\n    }\r\n\r\n    static couchRequestSearch(): string {\r\n        return \"Unable to run the query search\";\r\n    }\r\n    \r\n\r\n    static  couchRequestAllDocuments(): string {\r\n        return \"Unable to run the all query\";\r\n    }\r\n\r\n    static  couchRequestResetDatabase(): string {\r\n        return \"Unable to run the reset query\";\r\n    }\r\n\r\n    static  couchRequestDeleteDocument(): string {\r\n        return \"Unable to run the delete document query\";\r\n    }\r\n\r\n    static  couchRequestInvalidRevision(): string {\r\n        return \"The revision is invalid\";\r\n    }\r\n\r\n    static  couchRequestPostDocument(): string {\r\n        return \"Unable to run the post document query\";\r\n    }\r\n\r\n    static  unableToGetFullSyncDatabase(databaseName: string): string {\r\n        return \"Unable to get the fullSync database '\" + databaseName + \"' from the manager\";\r\n    }\r\n\r\n    static  couchNullResult(): string {\r\n        return \"An error occured during the fullSync request, its result is null\";\r\n    }\r\n\r\n    static  couchFullSyncNotActive(): string {\r\n        return \"Unable to use fullSync because it was not activated at the initialization\";\r\n    }\r\n\r\n    static  CouchDeleteFailed(): string {\r\n        return \"Delete the Couch document failed\";\r\n    }\r\n\r\n    static  fullSyncPutProperties(properties: Object): string {\r\n        return \"Unable to put the following properties in the fullSync Document: \" + JSON.stringify(properties);\r\n    }\r\n\r\n    static  fullSyncGetOrCreateDatabase(databaseName: string): string {\r\n        return \"Unable to get or create the fullSync database '\" + databaseName + \"'\";\r\n    }\r\n\r\n    static  fullSyncHandleResponse(): string {\r\n        return \"Error while handling the fullSync response\";\r\n    }\r\n\r\n    /** TAG Certificate */\r\n\r\n    static  loadKeyStore(): string {\r\n        return \"Failed to load key store\";\r\n    }\r\n\r\n    static  trustAllCertificates(): string {\r\n        return \"Unable to load a key store trusting all certificates\";\r\n    }\r\n\r\n    static  clientKeyStore(): string {\r\n        return \"Unable to load the client key store\";\r\n    }\r\n\r\n    static  serverKeyStore(): string {\r\n        return \"Unable to load the server key store\";\r\n    }\r\n\r\n    /** TAG Not found */\r\n\r\n    static  illegalArgumentNotFoundFullSyncView(viewName: string, databaseName: string): string {\r\n        return \"Cannot found the view '\" + viewName + \"' in database '\" + databaseName + \"'\";\r\n    }\r\n\r\n    /** TAG Other */\r\n\r\n    static  unhandledResponseType(responseType: string): string {\r\n        return \"The response type '\" + responseType + \"' is not handled\";\r\n    }\r\n\r\n    static  unhandledListenerType(listenerType: string): string {\r\n        return \"The listener type '\" + listenerType + \"' is not handled\";\r\n    }\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    static  WrongListener(c8oListener: C8oResponseListener): string {\r\n        return \"wrong listener\"; // \"The C8oListener class \" + C8oUtils.GetObjectClassName(c8oListener) + \" is not handled\"\r\n    }\r\n\r\n    static  wrongResult(result: any): string {\r\n        return \"The response class \" + C8oUtilsCore.getObjectClassName(result) + \" is not handled\";\r\n    }\r\n\r\n\r\n    static  unhandledFullSyncRequestable(fullSyncRequestableValue: string): string {\r\n        return \"The fullSync requestable '\" + fullSyncRequestableValue + \"' is not handled\";\r\n    }\r\n\r\n    static  closeInputStream(): string {\r\n        return \"Unable to close the input stream\";\r\n    }\r\n\r\n    static  deserializeJsonObjectFromString(str: string): string {\r\n        return \"Unable to deserialize the JSON object from the following string: '\" + str + \"'\";\r\n    }\r\n\r\n    static  postDocument(): string {\r\n        return \"Unable to post document\";\r\n    }\r\n\r\n    static  getNameValuePairObjectValue(name: string): string {\r\n        return \"Unable to get the object value from the NameValuePair named '\" + name + \"'\";\r\n    }\r\n\r\n    static  queryEnumeratorToJSON(): string {\r\n        return \"Unable to parse the QueryEnumerator to a JSON document\";\r\n    }\r\n\r\n    static  queryEnumeratorToXML(): string {\r\n        return \"Unable to parse the QueryEnumerator to a XML document\";\r\n    }\r\n\r\n    static  addparametersToQuery(): string {\r\n        return \"Unable to add parameters to the fullSync query\";\r\n    }\r\n\r\n    static  putJson(): string {\r\n        return \"Failed to put data in JSON ...\";\r\n    }\r\n\r\n    static  changeEventToJson(): string {\r\n        return \"Failed to parse ChangeEvent to JSON document\";\r\n    }\r\n\r\n    static  initC8oSslSocketFactory(): string {\r\n        return \"Failed to initialize C8oSslSocketFactory\";\r\n    }\r\n\r\n    static  createSslContext(): string {\r\n        return \"failed to create a new SSL context\";\r\n    }\r\n\r\n    static  keyManagerFactoryInstance(): string {\r\n        return \"Failed to instanciate KeyManagerFactory\";\r\n    }\r\n\r\n    static  initKeyManagerFactory(): string {\r\n        return \"Failed to initialize the key manager factory\";\r\n    }\r\n\r\n    static  InitHttpInterface(): string {\r\n        return \"Failed to initialize the secure HTTP Interface\";\r\n    }\r\n\r\n    static  trustManagerFactoryInstance(): string {\r\n        return \"Failed to instanciate KeyManagerFactory\";\r\n    }\r\n\r\n    static  initTrustManagerFactory(): string {\r\n        return \"Failed to initialize the key manager factory\";\r\n    }\r\n\r\n    static  initSslContext(): string {\r\n        return \"Failed to initialize the SSL context\";\r\n    }\r\n\r\n    static  initCipher(): string {\r\n        return \"Failed to initialize the cipher\";\r\n    }\r\n\r\n    static  urlEncode(): string {\r\n        return \"Failed to URL encode parameters\";\r\n    }\r\n\r\n    static  getParametersStringBytes(): string {\r\n        return \"Failed to get parameters string bytes\";\r\n    }\r\n\r\n    static  encodeParameters(): string {\r\n        return \"Failed to encode parameters\";\r\n    }\r\n\r\n    static  RunHttpRequest(): string {\r\n        return \"Failed to run the HTTP request\";\r\n    }\r\n\r\n    static  generateRsainternalKey(): string {\r\n        return \"Failed to generate RSA internal key\";\r\n    }\r\n\r\n    static  keyFactoryInstance(): string {\r\n        return \"Failed to get KeyFactory instance\";\r\n    }\r\n\r\n    static  getCipherInstance(): string {\r\n        return \"Failed to get Cipher instance\";\r\n    }\r\n\r\n    static  entryNotFound(entryKey: string): string {\r\n        return \"Entry key '\" + entryKey + \"' not found\";\r\n    }\r\n\r\n    static  c8oCallRequestToJson(): string {\r\n        return \"Failed to parse c8o call request to JSON\";\r\n    }\r\n\r\n    static  getJsonKey(key: string): string {\r\n        return \"Failed to get the JSON key '\" + key + \"'\";\r\n    }\r\n\r\n    static  jsonValueToXML(): string {\r\n        return \"Failed to parse JSON value to XML\";\r\n    }\r\n\r\n    static  inputStreamToXML(): string {\r\n        return \"Failed to parse InputStream to an XML document\";\r\n    }\r\n\r\n    static  inputStreamReaderEncoding(): string {\r\n        return \"Failed to instanciate the InputStreamReader\";\r\n    }\r\n\r\n    static  readLineFromBufferReader(): string {\r\n        return \"Failed to read line from the BufferReader\";\r\n    }\r\n\r\n    static  GetLocalCacheParameters(): string {\r\n        return \"Failed to get local cache parameters\";\r\n    }\r\n\r\n    static  GetLocalCachePolicy(policy: string): string {\r\n        return \"Failed to get local cache policy: \" + policy;\r\n    }\r\n\r\n    static  fullSyncJsonToXML(): string {\r\n        return \"Failed to translate full sync JSON to XML\";\r\n    }\r\n\r\n    static  takeLog(): string {\r\n        return \"Failed to take a log line in the list\";\r\n    }\r\n\r\n    static  remoteLogHttpRequest(): string {\r\n        return \"Failed while running the HTTP request sending logs to the Convertigo server\";\r\n    }\r\n\r\n    static  getInputStreamFromHttpResponse(): string {\r\n        return \"Failed to get InputStream from the HTTP response\";\r\n    }\r\n\r\n    static  inputStreamToJSON(): string {\r\n        return \"Failed to translate the input stream to a JSON document\";\r\n    }\r\n\r\n    static  httpInterfaceInstance(): string {\r\n        return \"Failed to instanciate the HTTP interface\";\r\n    }\r\n\r\n    static  FullSyncInterfaceInstance(): string {\r\n        return \"Failed to instanciate the FullSync interface\";\r\n    }\r\n\r\n    static  getDocumentFromDatabase(documentId: string): string {\r\n        return \"Failed to get fullSync document '\" + documentId + \"' from the database\";\r\n    }\r\n\r\n    static  FullSyncReplicationFail(databaseName: string, way: string): string {\r\n        return \"Failed to '\" + way + \"' replicate the '\" + databaseName + \"' database\";\r\n    }\r\n\r\n    static  localCachePolicyIsDisable(): string {\r\n        return \"Depending to the network state the local cache is disabled\";\r\n    }\r\n\r\n    static  localCacheDocumentJustCreated(): string {\r\n        return \"The local cache document is just created (empty):string\";\r\n    }\r\n\r\n    static  illegalArgumentInvalidLocalCachePolicy(localCachePolicyString: string): string {\r\n        return \"The local cache policy '\" + localCachePolicyString + \"' is invalid\";\r\n    }\r\n\r\n    static  timeToLiveExpired(): string {\r\n        return \"The time to live expired\";\r\n    }\r\n\r\n    static  InvalidLocalCacheResponseInformation(): string {\r\n        return \"Local cache response informations are invalid\";\r\n    }\r\n\r\n    static  overrideDocument(): string {\r\n        return \"Failed to override the fullSync document\";\r\n    }\r\n\r\n    static  handleFullSyncRequest(): string {\r\n        return \"Failed while running the fullSync request\";\r\n    }\r\n\r\n    static  serializeC8oCallRequest(): string {\r\n        return \"Fails to serialize the Convertigo call request\";\r\n    }\r\n\r\n    static  getResponseFromLocalCache(): string {\r\n        return \"Failed to get response from the local cache\";\r\n    }\r\n\r\n    static  getResponseFromLocalCacheDocument(): string {\r\n        return \"Failed to get response form the local cache document\";\r\n    }\r\n\r\n    static  handleC8oCallRequest(): string {\r\n        return \"Failed while running the c8o call request\";\r\n    }\r\n    public static runHttpRequest(): string {\r\n        return \"Failed to run the HTTP request\";\r\n    }\r\n\r\n    static  saveResponseToLocalCache(): string {\r\n        return \"Failed to save the response to the local cache\";\r\n    }\r\n\r\n    static  RemoteLogFail(): string {\r\n        return \"Failed to send log to the Convertigo server: disabling remote logging\";\r\n    }\r\n\r\n    static  FullSyncRequestFail(): string {\r\n        return \"Failed to process the fullsync request\";\r\n    }\r\n\r\n    static  MissingLocalCacheResponseDocument(): string {\r\n        return \"Missing local cache response document\";\r\n    }\r\n}","import {C8oCore} from \"./c8oCore\";\r\nimport {C8oLogLevel} from \"./c8oLogLevel\";\r\nimport {Queue} from \"./c8oUtilsCore\";\r\nimport {C8oException} from \"./Exception/c8oException\";\r\nimport {C8oExceptionMessage} from \"./Exception/c8oExceptionMessage\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nexport class C8oLogger {\r\n\r\n    // *** Constants ***//\r\n    // private static LOG_TAG: string = \"c8o\";\r\n    private static LOG_INTERNAL_PREFIX: string = \"[c8o] \";\r\n\r\n    public static REMOTE_LOG_LIMIT: number = 100;\r\n\r\n    private static JSON_KEY_REMOTE_LOG_LEVEL: string = \"remoteLogLevel\";\r\n    private static JSON_KEY_TIME: string = \"time\";\r\n    private static JSON_KEY_LEVEL: string = \"level\";\r\n    private static JSON_KEY_MESSAGE: string = \"msg\";\r\n    private static JSON_KEY_LOGS: string = \"logs\";\r\n    private static JSON_KEY_ENV: string = \"env\";\r\n\r\n    /** Attributes */\r\n\r\n    private remoteLogUrl: string;\r\n    private remoteLogs: Queue<JSON>;\r\n    //noinspection JSMismatchedCollectionQueryUpdate\r\n    private alreadyRemoteLogging: boolean[];\r\n    private remoteLogLevel: C8oLogLevel;\r\n    private uidRemoteLogs: string;\r\n    private startTimeRemoteLog: number;\r\n    public initDone: boolean = false;\r\n    private pending_remoteLogs: Queue<JSON>;\r\n    private pending_remoteLogsLevel: Queue<C8oLogLevel>;\r\n\r\n    private c8o: C8oCore;\r\n\r\n    private env: string;\r\n    private pInit: Promise<any>;\r\n    private waitForSending: boolean = false;\r\n    constructor(c8o: C8oCore, first: boolean) {\r\n        this.pInit = this.affect_val(c8o, first);\r\n    }\r\n    public affect_val(c8o: C8oCore, first: boolean) {\r\n        return new Promise<void>(async (resolve)=>{\r\n\r\n            if (first) {\r\n                this.c8o = c8o;\r\n                this.remoteLogUrl = \"\";\r\n                this.remoteLogs = new Queue<JSON>();\r\n                this.pending_remoteLogsLevel = new Queue<C8oLogLevel>();\r\n                this.pending_remoteLogs = new Queue<JSON>();\r\n                this.alreadyRemoteLogging = [];\r\n                this.alreadyRemoteLogging.push(false);\r\n                this.remoteLogLevel = C8oLogLevel.TRACE;\r\n                this.startTimeRemoteLog = new Date().getTime();\r\n                this.uidRemoteLogs = Math.round((new Date().getTime() * Math.random())).toString(36);\r\n                const obj = {};\r\n                obj[\"uid\"] = this.uidRemoteLogs.toUpperCase();\r\n                obj[\"uuid\"] = (await this.c8o.deviceUUID).toUpperCase();\r\n                obj[\"project\"] = \"\";\r\n                this.env = JSON.stringify(obj);\r\n                resolve();\r\n            } else {\r\n                this.c8o = c8o;\r\n    \r\n                this.remoteLogUrl = c8o.endpointConvertigo + \"/admin/services/logs.Add\";\r\n                this.remoteLogs = new Queue<JSON>();\r\n                this.alreadyRemoteLogging = [];\r\n                this.alreadyRemoteLogging.push(false);\r\n    \r\n                this.remoteLogLevel = C8oLogLevel.TRACE;\r\n                this.startTimeRemoteLog = new Date().getTime();\r\n                this.uidRemoteLogs = Math.round((new Date().getTime() * Math.random())).toString(36);\r\n                const obj = {};\r\n                obj[\"uid\"] = this.uidRemoteLogs.toUpperCase();\r\n                obj[\"uuid\"] = (await this.c8o.deviceUUID).toUpperCase();\r\n                obj[\"project\"] = encodeURIComponent(c8o.endpointProject.toString());\r\n                this.env = JSON.stringify(obj);\r\n                resolve();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private isLoggableRemote(logLevel: C8oLogLevel): boolean {\r\n        return this.c8o.logRemote && logLevel != null && C8oLogLevel.TRACE.priority <= this.remoteLogLevel.priority && this.remoteLogLevel.priority <= logLevel.priority;\r\n    }\r\n\r\n    private isLoggableConsole(logLevel: C8oLogLevel): boolean {\r\n        return logLevel != null && C8oLogLevel.TRACE.priority <= this.c8o.logLevelLocal.priority && this.c8o.logLevelLocal.priority <= logLevel.priority;\r\n    }\r\n\r\n    public canLog(logLevel: C8oLogLevel): boolean {\r\n        return this.isLoggableConsole(logLevel) || this.isLoggableRemote(logLevel);\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get isFatal(): boolean {\r\n        return this.canLog(C8oLogLevel.FATAL);\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get isError(): boolean {\r\n        return this.canLog(C8oLogLevel.ERROR);\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get isWarn(): boolean {\r\n        return this.canLog(C8oLogLevel.WARN);\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get isInfo(): boolean {\r\n        return this.canLog(C8oLogLevel.INFO);\r\n    }\r\n\r\n    public get isDebug(): boolean {\r\n        return this.canLog(C8oLogLevel.DEBUG);\r\n    }\r\n\r\n    public get isTrace(): boolean {\r\n        return this.canLog(C8oLogLevel.TRACE);\r\n    }\r\n\r\n    private log(logLevel: C8oLogLevel, message: string, exception: Error) {\r\n        const isLogConsole: boolean = this.isLoggableConsole(logLevel);\r\n        const isLogRemote: boolean = this.isLoggableRemote(logLevel);\r\n        let copyMsg = \"\" + message;\r\n        if (isLogConsole || isLogRemote) {\r\n            if (exception != null) {\r\n                let messageB = false;\r\n                let messageS = false;\r\n                try {\r\n                    if(exception.message != undefined){\r\n                        message += \" : \" + JSON.stringify(exception.message);\r\n                    }\r\n                    else{\r\n                        messageB = true;\r\n                    }\r\n                    if(exception.stack != undefined){\r\n                        message += \"\\n\" + JSON.stringify(exception.stack); \r\n                    }\r\n                    else{\r\n                        messageS = true;\r\n                    }\r\n                }\r\n                catch(e){\r\n                    message += \"\\n\" + exception.toString();\r\n                }\r\n                if(messageB && messageS){\r\n                    try{\r\n                        message += \"\\n\" + JSON.stringify(exception);\r\n                    }\r\n                    catch(e){\r\n                        message += \"\\n\" + exception.toString();\r\n                    }\r\n                }\r\n                \r\n            }\r\n\r\n            const time: string = (((new Date().getTime().valueOf()) - (this.startTimeRemoteLog)) / 1000).toString();\r\n            if (!this.initDone) {\r\n                const obj = {};\r\n                obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n                obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = logLevel.name;\r\n                obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message.toString();\r\n                const objJson: JSON = obj as JSON;\r\n                this.pending_remoteLogs.push(objJson);\r\n                this.pending_remoteLogsLevel.push(logLevel);\r\n            } else {\r\n                if (isLogRemote) {\r\n                    const obj = {};\r\n                    obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n                    obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = logLevel.name;\r\n                    obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message.toString();\r\n                    const objJson: JSON = obj as JSON;\r\n                    this.remoteLogs.push(objJson);\r\n                    this.logRemote();\r\n                }\r\n                if (isLogConsole) {\r\n                    let verb = logLevel.name.toLowerCase();\r\n                    if(logLevel.name == \"FATAL\" || logLevel.name == \"fatal\"){\r\n                        verb = \"error\";\r\n                    }\r\n                    else if(logLevel.name == \"TRACE\" || logLevel.name == \"trace\"){\r\n                        verb = \"debug\";\r\n                    }\r\n                    try{\r\n                        if(exception != undefined){\r\n                            if(exception.message != undefined && exception[\"cause\"] != undefined){\r\n                                console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg, exception.message, exception[\"cause\"]);\r\n                            }\r\n                            else{\r\n                                console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg, exception);\r\n                            }\r\n                        }\r\n                        else{\r\n                            console[verb](\"(\" + time + \") [\" + logLevel.name + \"] \" + copyMsg);\r\n                        }\r\n                        \r\n                    }\r\n                    catch(e){\r\n                        console.log(\"(\" + time + \") [\" + logLevel.name + \"] \" + message);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public fatal(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.FATAL, message, exceptions);\r\n    }\r\n\r\n    public error(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.ERROR, message, exceptions);\r\n    }\r\n\r\n    public warn(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.WARN, message, exceptions);\r\n    }\r\n\r\n    public info(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.INFO, message, exceptions);\r\n    }\r\n\r\n    public debug(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.DEBUG, message, exceptions);\r\n    }\r\n\r\n    public trace(message: string, exceptions: Error = null) {\r\n        this.log(C8oLogLevel.TRACE, message, exceptions);\r\n    }\r\n\r\n    private _log(logLevel: C8oLogLevel, messages: string, exceptions: Error = null) {\r\n        if (this.c8o.logC8o) {\r\n            this.log(logLevel, C8oLogger.LOG_INTERNAL_PREFIX.toString() + messages.toString(), exceptions);\r\n        }\r\n    }\r\n\r\n    public _fatal(message: string, exceptions: Error = null) {\r\n     this._log(C8oLogLevel.FATAL, message, exceptions);\r\n    }\r\n\r\n    public _error(message: string, exceptions: Error = null) {\r\n     this._log(C8oLogLevel.ERROR, message, exceptions);\r\n    }\r\n\r\n    public _warn(message: string, exceptions: Error = null) {\r\n     this._log(C8oLogLevel.WARN, message, exceptions);\r\n    }\r\n\r\n    public _info(message: string, exceptions: Error = null) {\r\n     this._log(C8oLogLevel.INFO, message, exceptions);\r\n    } \r\n\r\n    public _debug(message: string, exceptions: Error = null) {\r\n        this._log(C8oLogLevel.DEBUG, message, exceptions);\r\n    }\r\n\r\n    public _trace(message: string, exceptions: Error = null) {\r\n        this._log(C8oLogLevel.TRACE, message, exceptions);\r\n    }\r\n\r\n    public async logRemoteInit() {\r\n        this.pInit.then(async()=>{\r\n            this.initDone = true;\r\n\r\n            let count: number = 0;\r\n            const listSize: number = this.pending_remoteLogs.count();\r\n            const logsArray = new Array<any>();\r\n    \r\n            while (count < listSize && count < C8oLogger.REMOTE_LOG_LIMIT) {\r\n                const logLvl = this.pending_remoteLogsLevel.pop();\r\n                const mvar = this.pending_remoteLogs.pop();\r\n    \r\n                if (this.isLoggableConsole(logLvl)) {\r\n                    console.log(\"(\" + mvar[\"time\"] + \") [\" + logLvl.name + \"] \" + mvar[\"msg\"]);\r\n                }\r\n                if (this.isLoggableRemote(logLvl)) {\r\n                    logsArray.push(mvar);\r\n                    count += 1;\r\n                }\r\n    \r\n            }\r\n            //noinspection JSUnusedAssignment\r\n            let canLog: boolean = false;\r\n            canLog = logsArray.length > 0;\r\n            if (canLog) {\r\n                this.alreadyRemoteLogging[0] = true;\r\n            }\r\n            const parameters: Object = {};\r\n            parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify(logsArray);\r\n            parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n            parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n    \r\n            this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                .then((response) => {\r\n                    if (response !== undefined) {\r\n                        if (response.error !== undefined) {\r\n                            this.c8o.logRemote = false;\r\n                            if (this.c8o.logOnFail != null) {\r\n                                this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), response.error), null);\r\n                            }\r\n                        }\r\n                    }\r\n                    const logLevelResponse = response[C8oLogger.JSON_KEY_REMOTE_LOG_LEVEL.toString()];\r\n                    if (logLevelResponse != null) {\r\n                        const logLevelResponseStr: string = logLevelResponse.toString();\r\n                        const c8oLogLevel = C8oLogLevel.getC8oLogLevel(logLevelResponseStr);\r\n                        if (c8oLogLevel != null) {\r\n                            this.remoteLogLevel = c8oLogLevel;\r\n                        }\r\n                        this.alreadyRemoteLogging[0] = false;\r\n                        this.logRemote();\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.c8o.logRemote = false;\r\n                    if (this.c8o.logOnFail != null) {\r\n                        this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), error), null);\r\n                    }\r\n                });\r\n        })\r\n        \r\n    }\r\n\r\n    checkInitDone(resolve = null):Promise<any>{\r\n        if(resolve == null){\r\n            return new Promise<void>((resolve)=>{\r\n                if(!this.initDone){\r\n                    setTimeout(()=>{\r\n                        this.checkInitDone(resolve)\r\n                    }, 100);\r\n                }   \r\n                else{resolve()}\r\n            })\r\n            \r\n        }\r\n        else{\r\n            if(!this.initDone){\r\n                setTimeout(()=>{\r\n                    this.checkInitDone(resolve)\r\n                }, 100);\r\n            }\r\n            else{\r\n                resolve();\r\n            }   \r\n        }\r\n        return null;\r\n        \r\n    }\r\n    public async logTest(): Promise<any>{\r\n        \r\n        await this.checkInitDone()\r\n        return this.logTestAction();\r\n        \r\n            /*if (!this.initDone) {\r\n                setTimeout(()=>{\r\n                    return this.logTest();\r\n                },100)\r\n            }\r\n            else{\r\n                return this.logTestAction();\r\n            } */   \r\n    }\r\n\r\n    private logTestAction(): Promise<any>{\r\n        return new Promise(async (resolve, reject)=>{\r\n                const message = \"[c8o] Testing if endpoint is reachable\";\r\n                const time: string = (((new Date().getTime().valueOf()) - (this.startTimeRemoteLog)) / 1000).toString();\r\n                const obj = {};\r\n                obj[(C8oLogger.JSON_KEY_TIME.valueOf())] = time;\r\n                obj[(C8oLogger.JSON_KEY_LEVEL.valueOf())] = C8oLogLevel.DEBUG.name;\r\n                obj[(C8oLogger.JSON_KEY_MESSAGE.valueOf())] = message;\r\n                const parameters: Object = {};\r\n                parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify([obj]);\r\n                parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n                parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n                this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                .then((response) => {\r\n                    resolve(true);\r\n                })\r\n                .catch((error) => {\r\n                    reject(false);\r\n                });\r\n            });\r\n    }\r\n\r\n    private timeout(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    public async logRemote(wait = 5000) {\r\n        // if sending is already processing\r\n        if(this.waitForSending){\r\n            return;\r\n        }\r\n        //noinspection JSUnusedAssignment\r\n        let canLog: boolean = false;\r\n        canLog = this.remoteLogs.count() > 0;\r\n        if (canLog) {\r\n            this.alreadyRemoteLogging[0] = true;\r\n        }\r\n\r\n        if (canLog) {\r\n            // We're using Angular Http provider to request the data,\r\n            // then on the response it'll map the JSON data to a parsed JS object.\r\n            // Next we process the data and resolve the promise with the new data.\r\n            // \"/admin/services/logs.Add\";\r\n\r\n            // wait 5000 ms to group http request with severals logs and reduce http charge\r\n            if(wait == null){\r\n                wait = 0;\r\n            }\r\n            this.waitForSending = true;\r\n            await this.timeout(wait);\r\n            this.waitForSending = false;\r\n            let count: number = 0;\r\n            const listSize: number = this.remoteLogs.count() as number;\r\n            const logsArray = [];\r\n            while (count < listSize && count < C8oLogger.REMOTE_LOG_LIMIT) {\r\n                logsArray.push(this.remoteLogs.pop());\r\n                count += 1;\r\n            }\r\n            // if there are still los to be pushed after timeout the log them\r\n            if(logsArray.length > 0){\r\n                const parameters: Object = {};\r\n                parameters[C8oLogger.JSON_KEY_LOGS.valueOf()] = JSON.stringify(logsArray);\r\n                parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n                parameters[C8oLogger.JSON_KEY_ENV] = this.env;\r\n\r\n                this.c8o.httpInterface.handleRequest(this.remoteLogUrl, parameters)\r\n                .then((response) => {\r\n                    if (response !== undefined) {\r\n                        if (response.error !== undefined) {\r\n                            this.c8o.logRemote = false;\r\n                            if (this.c8o.logOnFail != null) {\r\n                                this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), response.error), null);\r\n                            }\r\n                        }\r\n                    }\r\n                    const logLevelResponse = response[C8oLogger.JSON_KEY_REMOTE_LOG_LEVEL.toString()];\r\n                    if (logLevelResponse != null) {\r\n                        const logLevelResponseStr: string = logLevelResponse.toString();\r\n                        const c8oLogLevel = C8oLogLevel.getC8oLogLevel(logLevelResponseStr);\r\n                        if (c8oLogLevel != null) {\r\n                            this.remoteLogLevel = c8oLogLevel;\r\n                        }\r\n                        this.alreadyRemoteLogging[0] = false;\r\n                        this.logRemote();\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.c8o.logRemote = false;\r\n                    if (this.c8o.logOnFail != null) {\r\n                        this.c8o.logOnFail(new C8oException(C8oExceptionMessage.RemoteLogFail(), error), null);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    public logMethodCall(methodName: string, ...parameters: any[]) {\r\n        if (this.c8o.logC8o && this.isDebug) {\r\n            let methodCallLogMessage: string = \"Method call: \" + methodName;\r\n            if (parameters == null || Object.keys(parameters).length === 0) {\r\n                this._debug(methodCallLogMessage);\r\n            }\r\n            if (this.isTrace) {\r\n                methodCallLogMessage += \", Parameters: [\";\r\n                for (const param of parameters) {\r\n                    let paramStr = \"null\";\r\n                    if (parameters != null) {\r\n                        try{\r\n                            paramStr = JSON.stringify(param);\r\n                        }\r\n                        catch(error){\r\n                            paramStr = \"cannot view value due to circular reference\";\r\n                        }\r\n                        \r\n                    }\r\n                    methodCallLogMessage += \"\\n\" + paramStr + \", \";\r\n                }\r\n                // Remove the last character\r\n                methodCallLogMessage = methodCallLogMessage.substring(0, methodCallLogMessage.length - 2) + \"]\";\r\n\r\n                this._trace(methodCallLogMessage);\r\n            } else {\r\n                this._debug(methodCallLogMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    public logC8oCall(url: string, parameters: any) {\r\n        if (this.c8o.logC8o && this.isDebug) {\r\n            let c8oCallLogMessage: string = \"C8o call: \" + url;\r\n            if (parameters.length > 0) {\r\n                c8oCallLogMessage += \"\\n\" + String(parameters);\r\n            }\r\n            this._debug(c8oCallLogMessage);\r\n        }\r\n    }\r\n\r\n    public logC8oCallJSONResponse(response: JSON, url: string, parameters: any) {\r\n        this.logC8oCallResponse(JSON.stringify(response), \"JSON\", url, parameters);\r\n    }\r\n\r\n    public logC8oCallXMLResponse(response: Document, url: string, parameters: Object) {\r\n        this.logC8oCallResponse(response.toString(), \"XML\", url, parameters);\r\n    }\r\n\r\n    public logC8oCallResponse(responseStr: string, responseType: string, url: string, parameters: any) {\r\n        if (this.c8o.logC8o && this.isTrace) {\r\n            let c8oCallResponseLogMessage: string;\r\n            if (url == null) {\r\n                c8oCallResponseLogMessage = \"C8o call \" + responseType + \" response: \";\r\n            } else {\r\n                c8oCallResponseLogMessage = \"C8o call \" + responseType + \" response: \" + url;\r\n            }\r\n            if (parameters.count > 0) {\r\n                c8oCallResponseLogMessage += \"\\n\" + parameters.toString();\r\n            }\r\n            c8oCallResponseLogMessage += \"\\n\" + responseStr;\r\n\r\n            this._trace(c8oCallResponseLogMessage);\r\n        }\r\n    }\r\n}\r\n","import {FullSyncAbstractResponse, FullSyncDefaultResponse} from \"./fullSyncResponse\";\r\nexport class C8oFullSyncTranslator {\r\n    public static FULL_SYNC_RESPONSE_KEY_COUNT: string = \"count\";\r\n    public static FULL_SYNC_RESPONSE_KEY_ROWS: string = \"rows\";\r\n    public static FULL_SYNC_RESPONSE_KEY_CURRENT: string = \"current\";\r\n    public static FULL_SYNC_RESPONSE_KEY_DIRECTION: string = \"direction\";\r\n    public static FULL_SYNC_RESPONSE_KEY_TOTAL: string = \"total\";\r\n    public static FULL_SYNC_RESPONSE_KEY_OK: string = \"ok\";\r\n    public static FULL_SYNC_RESPONSE_KEY_STATUS: string = \"status\";\r\n\r\n    public static FULL_SYNC_RESPONSE_VALUE_DIRECTION_PUSH: string = \"push\";\r\n    public static FULL_SYNC_RESPONSE_VALUE_DIRECTION_PULL: string = \"pull\";\r\n\r\n    public static XML_KEY_DOCUMENT: string = \"document\";\r\n    public static XML_KEY_COUCHDB_OUTPUT: string = \"couchdb_output\";\r\n\r\n    public static fullSyncDocumentOperationResponseToJson(fullSyncDocumentOperationResponse: FullSyncAbstractResponse): JSON {\r\n        return fullSyncDocumentOperationResponse.getProperties() as JSON;\r\n    }\r\n\r\n    public static fullSyncDefaultResponseToJson(fullSyncDefaultResponse: FullSyncDefaultResponse): JSON {\r\n        return fullSyncDefaultResponse.getProperties() as JSON;\r\n    }\r\n\r\n}\r\n","export class C8oLocalCacheResponse {\r\n    private response: string;\r\n    private responseType: string;\r\n    private expirationDate: number;\r\n\r\n    constructor(response: string, responseType: string, expirationDate: number) {\r\n        this.response = response;\r\n        this.responseType = responseType;\r\n        this.expirationDate = expirationDate;\r\n    }\r\n\r\n    public isExpired(): boolean {\r\n        if (this.expirationDate <= 0) {\r\n            return false;\r\n        } else {\r\n            const currentDate = new Date().getTime();\r\n            return this.expirationDate < currentDate;\r\n        }\r\n    }\r\n\r\n    public getResponse(): string {\r\n        return this.response;\r\n    }\r\n\r\n    public getResponseType(): string {\r\n        return this.responseType;\r\n    }\r\n\r\n    public getExpirationDate(): number {\r\n        return this.expirationDate;\r\n    }\r\n}\r\n","/**\r\n * Created by charlesg on 10/01/2017.\r\n */\r\nexport interface C8oResponseListener {\r\n}\r\n\r\nexport class C8oResponseJsonListener implements C8oResponseListener {\r\n    /**\r\n     * Called on c8o call JSON responses.\r\n     *\r\n     * @param response - C8o call response\r\n     * @param parameters - C8o call parameters\r\n     */\r\n    public onJsonResponse: (JSON, Object) => void;\r\n\r\n    constructor(onJsonResponse: (JSON, Object) => void) {\r\n        this.onJsonResponse = onJsonResponse;\r\n    }\r\n}\r\n\r\nexport class C8oResponseProgressListener implements C8oResponseListener {\r\n    public onProgressResponse: (C8oProgress, Object) => void;\r\n    constructor(onProgressResponse: (C8oProgress, Object) => void) {\r\n        this.onProgressResponse = onProgressResponse;\r\n    }\r\n}\r\n","import {C8oException}           from \"./c8oException\";\r\n\r\nexport class C8oCouchBaseLiteException extends C8oException {\r\n    constructor(message: string);\r\n    constructor(message: string, cause: Error);\r\n    constructor(message: string, cause: Error = null) {\r\n        super(message, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oCouchBaseLiteException.prototype);\r\n    }\r\n}","import {C8oException} from \"./c8oException\";\r\n\r\nexport class C8oRessourceNotFoundException extends C8oException {\r\n\r\n    constructor(message: string);\r\n    constructor(message: string, cause: Error);\r\n    constructor(message: string, cause: Error = null) {\r\n        super(message, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oRessourceNotFoundException.prototype);\r\n    }\r\n}","import {C8oException} from \"./c8oException\";\r\n\r\n/**\r\n * This Exception is not thrown to the user, it is used to know if the requested response from the local cache is available or no.\r\n */\r\nexport class C8oUnavailableLocalCacheException extends C8oException {\r\n    constructor(detailMessage: string);\r\n    constructor(detailMessage: string, cause: Error);\r\n    constructor(detailMessage: string, cause: Error = null) {\r\n        super(detailMessage, cause);\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oUnavailableLocalCacheException.prototype);\r\n    }\r\n}","import {C8oFullSyncTranslator} from \"./c8oFullSyncTranslator\";\r\n\r\nexport class C8oProgress {\r\n    private _changed: boolean = false;\r\n    private _continuous: boolean = false;\r\n    private _finished: boolean = false;\r\n    private _pull: boolean = true;\r\n    private _current: number = -1;\r\n    private _total: number = -1;\r\n    private _status: string = \"\";\r\n    private _taskInfo: string = \"\";\r\n    private _raw: any;\r\n\r\n    // Constructor overload in typescript...\r\n    constructor();\r\n    constructor(progress: C8oProgress);\r\n    constructor(progress?: any) {\r\n        if (progress instanceof C8oProgress) {\r\n            this._changed = false;\r\n            this._continuous = progress._continuous;\r\n            this._finished = progress._finished;\r\n            this._pull = progress._pull;\r\n            this._current = progress._current;\r\n            this._total = progress._total;\r\n            this._status = progress._status;\r\n            this._taskInfo = progress._taskInfo;\r\n            this._raw = progress._raw;\r\n        } else {\r\n            if (progress === undefined) {\r\n                this._raw = null;\r\n            } else {\r\n                throw new Error(`Expected C8oProgress or empty constructor, got '${progress}'.`);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get changed(): boolean {\r\n        return this._changed;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public set changed(value: boolean) {\r\n        this._changed = value;\r\n    }\r\n\r\n    public get continuous(): boolean {\r\n        return this._continuous;\r\n    }\r\n\r\n    public set continuous(value: boolean) {\r\n        this._continuous = value;\r\n        this._changed = true;\r\n    }\r\n\r\n    public get finished(): boolean {\r\n        return this._finished;\r\n    }\r\n\r\n    public set finished(value: boolean) {\r\n        this._finished = value;\r\n        this._changed = true;\r\n    }\r\n\r\n    public get pull(): boolean {\r\n        return this._pull;\r\n    }\r\n\r\n    public set pull(value: boolean) {\r\n        this._pull = value;\r\n        this._changed = true;\r\n    }\r\n\r\n    public get push(): boolean {\r\n        return !this._pull;\r\n    }\r\n\r\n    public get current(): number {\r\n        return this._current;\r\n    }\r\n\r\n    public set current(value: number) {\r\n        this._current = value;\r\n        this._changed = true;\r\n    }\r\n\r\n    public get total(): number {\r\n        return this._total;\r\n    }\r\n\r\n    public set total(value: number) {\r\n        this._total = value;\r\n        this._changed = true;\r\n    }\r\n\r\n    public get direction(): string {\r\n        return this._pull ? C8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PULL : C8oFullSyncTranslator.FULL_SYNC_RESPONSE_VALUE_DIRECTION_PUSH;\r\n    }\r\n\r\n    public get status(): string {\r\n        return this._status;\r\n    }\r\n\r\n    public set status(value: string) {\r\n        this._changed = true;\r\n        this._status = value;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get taskInfo(): string {\r\n        return this._taskInfo;\r\n    }\r\n\r\n    public set taskInfo(value: string) {\r\n        this._changed = true;\r\n        this._taskInfo = value;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get raw(): any {\r\n        return this._raw;\r\n    }\r\n\r\n    public set raw(value: any) {\r\n        this._changed = true;\r\n        this._raw = value;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.direction + \": \" + this.current + \"/\" + this.total + \" (\" + (this.finished ? (this.continuous ? \"live\" : \"done\") : \"running\") + \")\";\r\n    }\r\n}\r\n","export class FullSyncReplication {\r\n    public pull: boolean;\r\n    public sync: boolean;\r\n    public replication: any;\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public changeListener: Event;\r\n\r\n    constructor(pull: boolean = null) {\r\n        if (pull != null) {\r\n            this.pull = pull;\r\n        } else {\r\n            this.sync = true;\r\n        }\r\n    }\r\n}\r\n","import { C8oCore } from \"./c8oCore\";\r\nexport class C8oLoad {\r\n\r\n    constructor(private c8o: C8oCore) {\r\n        \r\n    }\r\n    public plugin: any = {\r\n        c8oload: function (url, opts, c8o){\r\n            var db = this;\r\n            \r\n            var extend = require('pouchdb-extend');\r\n            var Checkpointer = require('pouchdb-checkpointer');\r\n            var genReplicationId = require('pouchdb-generate-replication-id');\r\n\r\n            let loadString = (db, datastr, opts, resolve, reject, c8o)=>{\r\n                let parsedDump = parseDump(datastr);\r\n                if (parsedDump[\"err\"]) {\r\n                    return reject(parsedDump[\"err\"]);\r\n                }\r\n                let docs = parsedDump[\"docs\"];\r\n                let lastSeq = parsedDump[\"lastSeq\"];\r\n        \r\n        \r\n                db.bulkDocs({docs: docs, new_edits: false})\r\n                .then(()=> {\r\n                    if (!opts.proxy) {\r\n                      resolve({ok:true});\r\n                    }\r\n                    else{\r\n                        writeProxyCheckpoint(db, lastSeq, opts, resolve, reject);\r\n                    }\r\n                    \r\n                  })\r\n                  .catch((err)=>{\r\n                    reject(err);\r\n                  })\r\n            };\r\n\r\n\r\n            let loadUrl = (db, url, opts, resolve, reject, c8o)=>{\r\n                let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': c8o.sdkVersion};\r\n                    Object.assign(headersObject, c8o.headers);\r\n                    let headers =  c8o.httpInterface.getHeaders(headersObject);\r\n        \r\n                    c8o.httpInterface.httpGetObservable(url, {\r\n                        headers: headers,\r\n                        withCredentials: true,\r\n                        responseType: 'text' as 'json'\r\n                    }, {})\r\n                    .subscribe(\r\n                        response => {\r\n                            loadString(db, response, opts, resolve, reject, c8o);\r\n                            \r\n                    },\r\n                    error => {\r\n                        reject(error);\r\n                    })\r\n            };\r\n\r\n            let parseDump = (data)=>{\r\n                var docs = [];\r\n                var lastSeq = 0;\r\n                try {\r\n                  data.split('\\n').forEach(function (line) {\r\n                    if (!line) {\r\n                      return;\r\n                    }\r\n                    line = JSON.parse(line);\r\n                    if (line[\"docs\"]) {\r\n                      docs = docs.concat(line[\"docs\"]);\r\n                    }\r\n                    if (line.seq) {\r\n                      lastSeq = line.seq;\r\n                    }\r\n                  });\r\n                } catch (err) {\r\n                  return {err: err};\r\n                }\r\n                return {docs: docs, lastSeq: lastSeq};\r\n            }\r\n\r\n            let writeProxyCheckpoint = (db, lastSeq, opts, resolve, reject)=>{\r\n                db.info()\r\n                .then((info)=> {\r\n        \r\n                    var src = new db.constructor(opts.proxy,\r\n                      extend(true, {}, {}, opts));\r\n        \r\n        \r\n                    var target = new db.constructor(info.db_name,\r\n                      extend(true, {}, db.__opts, opts));\r\n        \r\n                    var replIdOpts = {};\r\n        \r\n                    if (opts.filter) {\r\n                      replIdOpts[\"filter\"] = opts.filter;\r\n                    }\r\n        \r\n                    if (opts.query_params) {\r\n                      replIdOpts[\"query_params\"] = opts.query_params;\r\n                    }\r\n        \r\n                    if (opts.view) {\r\n                      replIdOpts[\"view\"] = opts.view;\r\n                    }\r\n              \r\n                    genReplicationId.default(src, target, replIdOpts)\r\n                    .then(function (replId) {\r\n                      var state = {\r\n                        cancelled: false\r\n                      };\r\n                      var checkpointer = new Checkpointer.default(src, target, replId, state);\r\n                      checkpointer.writeCheckpoint(lastSeq)\r\n                      .then((response)=>{\r\n                        resolve(response);\r\n                      })\r\n                      .catch((err)=>{\r\n                          reject(err);\r\n                      })\r\n                    })\r\n                    .catch((err)=>{\r\n                        reject(err);\r\n                    })\r\n                  });\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n            return new Promise((resolve, reject)=>{\r\n                \r\n                // if its a dumped string\r\n                if (/^\\s*\\{/.test(url)) {\r\n                    loadString(db, url, opts, resolve, reject, c8o);\r\n                  }\r\n                  else{\r\n                    loadUrl(db, url, opts, resolve, reject, c8o);\r\n                  }\r\n                  \r\n            })\r\n        }\r\n    }\r\n   \r\n      \r\n}","import { C8oCore } from \"./c8oCore\";\r\nimport { C8oProgress } from \"./c8oProgress\";\r\nimport { C8oResponseListener, C8oResponseProgressListener } from \"./c8oResponse\";\r\nimport { FullSyncReplication } from \"./fullSyncReplication\";\r\n\r\nimport PouchDB from \"pouchdb-browser\";\r\nimport PouchDBFind from \"pouchdb-find\";\r\nimport PouchDBQuickSearch from \"pouchdb-quick-search\";\r\nimport PouchDBWorker from \"worker-pouch\";\r\n\r\nimport {C8oLoad} from \"./c8oload\";\r\nimport { C8oUtilsCore } from \"./c8oUtilsCore\";\r\nimport PouchDb from \"pouchdb-core\";\r\n\r\n/**\r\n * Created by charlesg on 10/01/2017.\r\n */\r\nexport class C8oFullSyncDatabase {\r\n\r\n    /**\r\n     * Used to log.\r\n     */\r\n    private c8o: C8oCore;\r\n\r\n    /** TAG Attributes **/\r\n\r\n    /**\r\n     * The fullSync database name.\r\n     */\r\n    private databaseName: string;\r\n    private remotedatabaseName: string;\r\n    private c8oFullSyncDatabaseUrl: string;\r\n    /**\r\n     * The fullSync Database instance.\r\n     */\r\n    private database = null;\r\n    /**\r\n     * Used to make pull replication (uploads changes from the local database to the remote one).\r\n     */\r\n    private pullFullSyncReplication: FullSyncReplication = new FullSyncReplication(true);\r\n    /**\r\n     * Used to make push replication (downloads changes from the remote database to the local one).\r\n     */\r\n    private pushFullSyncReplication: FullSyncReplication = new FullSyncReplication(false);\r\n    /**\r\n     * Used to make pull replication (uploads changes from the local database to the remote one).\r\n     */\r\n    private syncFullSyncReplication: FullSyncReplication = new FullSyncReplication();\r\n\r\n    private manual_canceled = false;\r\n    private remotePouchHeader;\r\n    private _id;\r\n    private to_cancel = [];\r\n\r\n    /**\r\n     * Creates a fullSync database with the specified name and its location.\r\n     *\r\n     * @param c8o\r\n     * @param databaseName\r\n     * @param fullSyncDatabases\r\n     * @param localSuffix\r\n     * @throws C8oException Failed to get the fullSync database.\r\n     */\r\n    constructor(c8o: C8oCore, databaseName: string, fullSyncDatabases: string, localSuffix: string, localPrefix: string) {\r\n        PouchDB.plugin(PouchDBFind);\r\n        PouchDB.plugin(PouchDBQuickSearch);\r\n        var opts = {};\r\n        if(c8o.usewroker){\r\n            //@ts-ignore\r\n            PouchDB.adapter('worker', PouchDBWorker);\r\n            opts[\"adapter\"] = \"worker\";\r\n            c8o.log._debug(\"We will use experimental PouchDBWorker to speed up your requests. \\n fs://.createIndex is not supported\")\r\n        }\r\n        \r\n        let c8oload: C8oLoad = new C8oLoad(c8o);\r\n        window[\"PouchDB\"] =PouchDB;\r\n        this.c8o = c8o;\r\n        const header = {\r\n            \"x-convertigo-sdk\": this.c8o.sdkVersion,\r\n        };\r\n        if(this.c8o.xsrfUsed){\r\n            const headerName = \"x-xsrf-token\";\r\n            const fetch = \"Fetch\";\r\n            header[headerName] = window.localStorage.getItem(headerName) != undefined ? window.localStorage.getItem(headerName) : fetch;\r\n        }      \r\n        Object.assign(header, this.c8o.headers);\r\n        this.remotePouchHeader = {\r\n            fetch: (url, opts) => {\r\n                opts.credentials = 'include';\r\n                for (let key in header) {\r\n                    opts.headers.set(key, header[key]);\r\n                }\r\n                var fecthPouch: Promise<Response> = PouchDB.fetch(url, opts);\r\n                fecthPouch.then((response)=>{\r\n                    this.c8o.session.sort(response,header, null, null, null);\r\n                })\r\n                .catch((e)=>{\r\n                    \r\n                });\r\n                return fecthPouch;\r\n            }\r\n        };\r\n        this.c8oFullSyncDatabaseUrl = fullSyncDatabases + databaseName;\r\n        this.remotedatabaseName = databaseName;\r\n        this.databaseName = localPrefix + databaseName + localSuffix;\r\n        try {\r\n            if (c8o.couchUrl != null) {\r\n                this.database = new PouchDB(c8o.couchUrl + \"/\" + this.databaseName);\r\n                this.c8o.log._debug(\"PouchDb launched on couchbaselite\");\r\n            } else {\r\n                PouchDB.plugin(c8oload.plugin);\r\n\r\n                this.database = new PouchDB(this.databaseName, opts);\r\n                this.c8o.log._debug(\"PouchDb launched normally\");\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public async remoteDatabaseVersion() {\r\n        return new Promise((resolve)=>{\r\n            let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n            Object.assign(headersObject, this.c8o.headers);\r\n            let headers =  this.c8o.httpInterface.getHeaders(headersObject);\r\n\r\n            this.c8o.httpInterface.httpGetObservable(this.c8oFullSyncDatabaseUrl + \"/_design/c8o\", {\r\n                headers: headers,\r\n                withCredentials: true\r\n            }, {})\r\n            .subscribe(\r\n                response => {\r\n                    if (response != undefined && response[\"~c8oDbVersion\"] != null) {\r\n                        this.c8o.log._trace(\"Server support reset database, remote version for \" + this.remotedatabaseName + \" is \" + response[\"~c8oDbVersion\"]);\r\n                        resolve(response[\"~c8oDbVersion\"])\r\n                    }\r\n                    else {\r\n                        resolve(false);\r\n                    }\r\n            },\r\n            error => {\r\n                this.c8o.log._trace(\"Server does not support reset database\");\r\n                resolve(false);\r\n            })\r\n        });\r\n    }\r\n\r\n    public async localDatabaseVersion() {\r\n        try {\r\n            let info = await this.database.info();\r\n            let response = await this.database.get('_design/c8o')\r\n            if (response[\"~c8oDbVersion\"] != null) {\r\n                this.c8o.log._trace(\"Version for local database,  \" + this.databaseName + \" is \" + response[\"~c8oDbVersion\"]);\r\n                return response[\"~c8oDbVersion\"];\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        catch (error) {\r\n            //there is no c8odesing base has been created in local\r\n            return \"_C8O_DO_NOTHING\";\r\n        }\r\n\r\n    }\r\n\r\n    public async checkResetBase() {\r\n        let remoteVersion = await this.remoteDatabaseVersion();\r\n        let localVersion = await this.localDatabaseVersion();\r\n        let reset = false;\r\n        if(localVersion == \"_C8O_DO_NOTHING\"){\r\n            this.c8o.log._trace(\"Local database version do not contains, _design/c8o, it has been created in local, no reset needed\");\r\n        }\r\n        else{\r\n            if (remoteVersion != false) {\r\n                if (localVersion != false) {\r\n                    if (remoteVersion != localVersion) {\r\n                        // reset\r\n                        reset = true;\r\n                    }\r\n                }\r\n                else{\r\n                    reset = true;\r\n                }\r\n            }\r\n            if (reset) {\r\n                this.c8o.log._trace(\"Since remote database version is different from local database, we will reset it\");\r\n                await this.resetMyBase()\r\n            }\r\n            else {\r\n                this.c8o.log._trace(\"Remote database version and local database, had the same version, reset not needed\");\r\n            }\r\n        }\r\n        return reset;\r\n        \r\n    }\r\n\r\n    async resetMyBase() {\r\n        try {\r\n            await this.database.destroy();\r\n            if (this.c8o.couchUrl != null) {\r\n                this.database = new PouchDB(this.c8o.couchUrl + \"/\" + this.databaseName);\r\n                this.c8o.log._debug(\"PouchDb launched on couchbaselite\");\r\n            } else {\r\n                let c8oload: C8oLoad = new C8oLoad(this.c8o);\r\n                PouchDB.plugin(c8oload.plugin)\r\n                this.database = new PouchDB(this.databaseName);\r\n                this.c8o.log._debug(\"PouchDb launched normally\");\r\n            }\r\n            this.c8o.log._debug(\"Database reset successfully\");\r\n            this.c8o.subscriber_database_reset.next({ databaseName: this.databaseName, success: true, error: false });\r\n        } catch (error) {\r\n            this.c8o.subscriber_database_reset.error({ databaseName: this.databaseName, success: false, error: true, nativeError: error });\r\n            this.c8o.log._error(\"error while resetting database\");\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Start pull and push replications.\r\n     * @returns Promise<any>\r\n     */\r\n    public async startAllReplications(parameters: Object, c8oResponseListener: C8oResponseListener, handler: any, id = null, mutex = null): Promise<any> {\r\n        if(this.c8o.resetBase){\r\n            await this.checkResetBase()\r\n        }\r\n        let resp =  await this.c8o.log.logTest();\r\n        return this.startSync(this.syncFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n        \r\n    }\r\n\r\n    /**\r\n     * Start pull replication.\r\n     * @returns Promise<any>\r\n     */\r\n    public async startPullReplication(parameters: Object, c8oResponseListener: C8oResponseListener, handler: any, id = null, mutex = null): Promise<any> {\r\n        if(this.c8o.resetBase){\r\n            await this.checkResetBase()\r\n        }\r\n        let resp =  await this.c8o.log.logTest();\r\n        return this.startReplication(this.pullFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n\r\n    }\r\n\r\n    /**\r\n     * Start push replication.\r\n     * @returns Promise<any>\r\n     */\r\n    public async startPushReplication(parameters: Object, c8oResponseListener: C8oResponseListener, handler: any, id = null, mutex = null): Promise<any> {\r\n        if(this.c8o.resetBase){\r\n            await this.checkResetBase()\r\n        }\r\n        let resp =  await this.c8o.log.logTest();\r\n        return this.startReplication(this.pushFullSyncReplication, parameters, c8oResponseListener, handler, id, mutex);\r\n\r\n    }\r\n\r\n    private startSync(fullSyncReplication: FullSyncReplication, parameters: Object, c8oResponseListener: C8oResponseListener, handler, id = null, mutex = null): Promise<any> {\r\n        let continuous: boolean = false;\r\n        let cancel: boolean = false;\r\n        const parametersObj: Object = {};\r\n        //stop replication if exists\r\n        if (fullSyncReplication.replication != null) {\r\n            fullSyncReplication.replication.cancel();\r\n        }\r\n        this._id = id;\r\n        //check continuous flag\r\n        if (parameters[\"continuous\"] != null) {\r\n            if (parameters[\"continuous\"] as boolean === true) {\r\n                continuous = true;\r\n            } else {\r\n                continuous = false;\r\n            }\r\n        }\r\n        //check cancel flag\r\n        if (parameters[\"cancel\"] != null) {\r\n            //noinspection RedundantIfStatementJS\r\n            if (parameters[\"cancel\"] as boolean === true) {\r\n                cancel = true;\r\n            } else {\r\n                cancel = false;\r\n            }\r\n        }\r\n        // Set retry true by default...\r\n        parametersObj[\"retry\"] = true;\r\n\r\n        //check parameters to throw to pouchDB\r\n        if (parameters[\"retry\"] != null) {\r\n            parametersObj[\"retry\"] = parameters[\"retry\"];\r\n        }\r\n        if (parameters[\"filter\"] != null) {\r\n            parametersObj[\"filter\"] = parameters[\"filter\"];\r\n        }\r\n        if (parameters[\"doc_ids\"] != null) {\r\n            parametersObj[\"doc_ids\"] = parameters[\"doc_ids\"];\r\n        }\r\n        if (parameters[\"query_params\"] != null) {\r\n            parametersObj[\"query_params\"] = parameters[\"query_params\"];\r\n        }\r\n        if (parameters[\"view\"] != null) {\r\n            parametersObj[\"view\"] = parameters[\"view\"];\r\n        }\r\n        if (parameters[\"since\"] != null) {\r\n            parametersObj[\"since\"] = parameters[\"since\"];\r\n        }\r\n        if (parameters[\"heartbeat\"] != null) {\r\n            parametersObj[\"heartbeat\"] = parameters[\"heartbeat\"];\r\n        }\r\n        if (parameters[\"timeout\"] != null) {\r\n            parametersObj[\"timeout\"] = parameters[\"timeout\"];\r\n        }\r\n        if (parameters[\"batch_size\"] != null) {\r\n            parametersObj[\"batch_size\"] = parameters[\"batch_size\"];\r\n        }\r\n        if (parameters[\"batches_limit\"] != null) {\r\n            parametersObj[\"batches_limit\"] = parameters[\"batches_limit\"];\r\n        }\r\n        if (parameters[\"back_off_function\"] != null) {\r\n            parametersObj[\"back_off_function\"] = parameters[\"back_off_function\"];\r\n        }\r\n        if (parameters[\"checkpoint\"] != null) {\r\n            parametersObj[\"checkpoint\"] = parameters[\"checkpoint\"];\r\n        }\r\n        if (parameters[\"seq_interval\"] != null) {\r\n            parametersObj[\"seq_interval\"] = parameters[\"seq_interval\"];\r\n        }\r\n\r\n        const remoteDB = new PouchDB(this.c8oFullSyncDatabaseUrl, this.remotePouchHeader);\r\n        let rep = fullSyncReplication.replication = this.database.sync(remoteDB, parametersObj);\r\n        const param = parameters;\r\n        const progress: C8oProgress = new C8oProgress();\r\n        progress.raw = rep;\r\n        progress.continuous = false;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            rep.on(\"change\", (info) => {\r\n                progress.finished = false;\r\n                if (info.direction === \"pull\") {\r\n                    progress.pull = true;\r\n                    progress.status = rep.pull.state;\r\n                    progress.finished = rep.pull.state !== \"active\";\r\n                } else if (info.direction === \"push\") {\r\n                    progress.pull = false;\r\n                    progress.status = rep.push.state;\r\n                    progress.finished = rep.push.state !== \"active\";\r\n                }\r\n                progress.total = info.change.docs_read;\r\n                progress.current = info.change.docs_written;\r\n                param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n\r\n            }).on(\"complete\", (info) => {\r\n                progress.finished = true;\r\n                progress.pull = false;\r\n                progress.total = info.push.docs_read;\r\n                progress.current = info.push.docs_written;\r\n                progress.status = info.status;\r\n                progress.finished = true;\r\n                param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                progress.pull = true;\r\n                progress.total = info.pull.docs_read;\r\n                progress.current = info.pull.docs_written;\r\n                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                if(rep.canceled == true && continuous){\r\n                    this.c8o.log._trace(\"Replication is continuous but has been canceled\");\r\n                    rep.cancel();\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    if(!this.manual_canceled){\r\n                        handler();\r\n                    }\r\n                   \r\n                }\r\n                else if (continuous) {\r\n                    rep.cancel();\r\n                    parametersObj[\"live\"] = true;\r\n                    rep = fullSyncReplication.replication = this.database.sync(remoteDB, parametersObj);\r\n                    progress.continuous = true;\r\n                    progress.raw = rep;\r\n                    progress.taskInfo = \"n/a\";\r\n                    progress.pull = true;\r\n                    progress.status = \"live\";\r\n                    progress.finished = false;\r\n                    progress.pull = true;\r\n                    progress.total = 0;\r\n                    progress.current = 0;\r\n                    (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                    progress.pull = false;\r\n                    (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    rep.on(\"change\", (info) => {\r\n                        progress.finished = false;\r\n                        if (info.direction === \"pull\") {\r\n                            progress.pull = true;\r\n                            progress.status = rep.pull.state;\r\n                        } else if (info.direction === \"push\") {\r\n                            progress.pull = false;\r\n                            progress.status = rep.push.state;\r\n                        }\r\n                        progress.total = info.change.docs_read;\r\n                        progress.current = info.change.docs_written;\r\n                        param[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                        (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                    })\r\n                        .on(\"paused\", () => {\r\n                            try{\r\n                                if(((<Array<any>>this.c8o.database[\"replications\"]).map(x=>x.id == id)).length > 0){\r\n                                    rep.cancel();\r\n                                }\r\n                            }\r\n                            catch(e){\r\n                                \r\n                            }\r\n                            \r\n                            progress.finished = true;\r\n                            (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                            if (progress.total === 0 && progress.current === 0) {\r\n                                progress.pull = !progress.pull;\r\n                                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, param);\r\n                            }\r\n                        })\r\n                        .on(\"error\", (err) => {\r\n                            if (err.message === \"Unexpected end of JSON input\") {\r\n                                progress.finished = true;\r\n                                progress.status = \"live\";\r\n                                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n                            } else {\r\n                                rep.cancel();\r\n                                if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                                    if (parameters[\"force_retry\"] == true) {\r\n                                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Forcing Restarting replication\");\r\n                                        this.database.sync(remoteDB, { timeout: 600000, retry: true });\r\n                                    } else {\r\n                                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Restarting automatically replication\");\r\n                                    }\r\n                                } else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                                    reject(\"NO_NETWORK\");\r\n                                } else {\r\n                                    reject(err);\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                }\r\n                else if (!continuous) {\r\n                    rep.cancel();\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    this.c8o.log._trace(\"Replication is finished, modifying its state\");\r\n                    if(!this.manual_canceled){\r\n                        handler();\r\n                    }\r\n                }\r\n            }).on(\"error\", (err) => {\r\n                rep.cancel();\r\n                if(mutex != undefined){\r\n                    mutex.release();\r\n                }\r\n                if (err.message === \"Unexpected end of JSON input\") {\r\n                    progress.finished = true;\r\n                    progress.status = \"Complete\";\r\n                    (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n                    rep.cancel();\r\n\r\n                } else if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                    if (parameters[\"force_retry\"] == true) {\r\n                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Forcing Restarting replication\");\r\n                        this.database.sync(remoteDB, { timeout: 600000, retry: true });\r\n                    } else {\r\n                        this.c8o.log._warn(\"Timeout handle during fullsync replication (fs://.sync) \\n Restarting automatically replication\");\r\n                    }\r\n                } else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                    reject(\"NO_NETWORK\");\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n\r\n            if (cancel) {\r\n                if (rep != null) {\r\n                    this.c8o.log._trace(\"Replication canceled called, modifying its state\");\r\n                    handler();\r\n                    rep.cancel();\r\n                    progress.finished = true;\r\n                    if (c8oResponseListener != null && c8oResponseListener instanceof C8oResponseProgressListener) {\r\n                        c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    }\r\n                }\r\n                if(mutex != undefined){\r\n                    mutex.release();\r\n                }\r\n            }\r\n        }).catch((error) => {\r\n            throw error.toString();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Starts a replication taking into account parameters.<br/>\r\n     * This action does not directly return something but setup a callback raised when the replication raises change events.\r\n     *\r\n     * @param fullSyncReplication\r\n     * @param c8oResponseListener\r\n     * @param parameters\r\n     */\r\n    private startReplication(fullSyncReplication: FullSyncReplication, parameters: Object, c8oResponseListener: C8oResponseListener, handler, id = null, mutex = null): Promise<any> {\r\n        let continuous: boolean = false;\r\n        let cancel: boolean = false;\r\n        const parametersObj: Object = {};\r\n        //stop replication if exists\r\n        if (fullSyncReplication.replication != null) {\r\n            fullSyncReplication.replication.cancel();\r\n        }\r\n        this._id = id;\r\n        //check continuous flag\r\n        if (parameters[\"continuous\"] != null) {\r\n            if (parameters[\"continuous\"] as boolean == true) {\r\n                continuous = true;\r\n            } else {\r\n                continuous = false;\r\n            }\r\n        }\r\n        //check cancel flag\r\n        if (parameters[\"cancel\"] != null) {\r\n            //noinspection RedundantIfStatementJS\r\n            if (parameters[\"cancel\"] as boolean == true) {\r\n                cancel = true;\r\n            } else {\r\n                cancel = false;\r\n            }\r\n        }\r\n        //check parameters to throw to pouchDB\r\n        // Set retry true by default...\r\n        parametersObj[\"retry\"] = true;\r\n        if (parameters[\"retry\"] != null) {\r\n            parametersObj[\"retry\"] = parameters[\"retry\"];\r\n        }\r\n        if (parameters[\"filter\"] != null) {\r\n            parametersObj[\"filter\"] = parameters[\"filter\"];\r\n        }\r\n        if (parameters[\"doc_ids\"] != null) {\r\n            parametersObj[\"doc_ids\"] = parameters[\"doc_ids\"];\r\n        }\r\n        if (parameters[\"query_params\"] != null) {\r\n            parametersObj[\"query_params\"] = parameters[\"query_params\"];\r\n        }\r\n        if (parameters[\"view\"] != null) {\r\n            parametersObj[\"view\"] = parameters[\"view\"];\r\n        }\r\n        if (parameters[\"since\"] != null) {\r\n            parametersObj[\"since\"] = parameters[\"since\"];\r\n        }\r\n        if (parameters[\"heartbeat\"] != null) {\r\n            parametersObj[\"heartbeat\"] = parameters[\"heartbeat\"];\r\n        }\r\n        if (parameters[\"timeout\"] != null) {\r\n            parametersObj[\"timeout\"] = parameters[\"timeout\"];\r\n        }\r\n        if (parameters[\"batch_size\"] != null) {\r\n            parametersObj[\"batch_size\"] = parameters[\"batch_size\"];\r\n        }\r\n        if (parameters[\"batches_limit\"] != null) {\r\n            parametersObj[\"batches_limit\"] = parameters[\"batches_limit\"];\r\n        }\r\n        if (parameters[\"back_off_function\"] != null) {\r\n            parametersObj[\"back_off_function\"] = parameters[\"back_off_function\"];\r\n        }\r\n        if (parameters[\"checkpoint\"] != null) {\r\n            parametersObj[\"checkpoint\"] = parameters[\"checkpoint\"];\r\n        }\r\n        if (parameters[\"seq_interval\"] != null) {\r\n            parametersObj[\"seq_interval\"] = parameters[\"seq_interval\"];\r\n        }\r\n\r\n        const remoteDB = new PouchDB(this.c8oFullSyncDatabaseUrl, this.remotePouchHeader);\r\n        let rep = fullSyncReplication.replication = fullSyncReplication.pull ? this.database.replicate.from(remoteDB, parametersObj) : this.database.replicate.to(remoteDB, parametersObj);\r\n\r\n        const progress: C8oProgress = new C8oProgress();\r\n        progress.raw = rep;\r\n        progress.pull = fullSyncReplication.pull;\r\n        progress.continuous = false;\r\n        return new Promise((resolve, reject) => {\r\n\r\n            rep.on(\"change\", (info) => {\r\n                progress.total = info.docs_read;\r\n                progress.current = info.docs_written;\r\n                progress.status = \"change\";\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n            }).on(\"complete\", (info) => {\r\n                progress.finished = true;\r\n                progress.total = info.docs_read;\r\n                progress.current = info.docs_written;\r\n                progress.status = \"complete\";\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n                if(rep.canceled == true && continuous){\r\n                    this.c8o.log._trace(\"Replication is continuous but has been canceled\");\r\n                    rep.cancel();\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    if(!this.manual_canceled){\r\n                        handler();\r\n                    }\r\n                }\r\n                if (continuous) {\r\n                    rep.cancel();\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    parametersObj[\"live\"] = true;\r\n                    rep = fullSyncReplication.replication = fullSyncReplication.pull ? this.database.replicate.from(remoteDB, parametersObj) : this.database.replicate.to(remoteDB, parametersObj);\r\n                    progress.continuous = true;\r\n                    progress.raw = rep;\r\n                    progress.taskInfo = \"n/a\";\r\n                    rep.on(\"change\", (info) => {\r\n                        progress.finished = false;\r\n                        progress.total = info.docs_read;\r\n                        progress.current = info.docs_written;\r\n                        progress.status = \"change\";\r\n                        parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                        (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n                    })\r\n                    .on(\"paused\", () => {\r\n                        try{\r\n                            if(((<Array<any>>this.c8o.database[\"replications\"]).map(x=>x.id == id)).length > 0){\r\n                                rep.cancel();\r\n                            }\r\n                        }\r\n                        catch(e){\r\n                            \r\n                        }\r\n                    })\r\n                    .on(\"error\", (err) => {\r\n                        if (err.message === \"Unexpected end of JSON input\") {\r\n                            progress.finished = true;\r\n                            progress.status = \"live\";\r\n                            (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n\r\n                        } else {\r\n                            rep.cancel();\r\n                            if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                                reject(\"TIMEOUT\");\r\n                            } else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                                reject(\"NO_NETWORK\");\r\n                            } else {\r\n                                reject(err);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                else if (!continuous) {\r\n                    rep.cancel();\r\n                    if(mutex != undefined){\r\n                        mutex.release();\r\n                    }\r\n                    this.c8o.log._trace(\"Replication is finished, modifying its state\");\r\n                    if(!this.manual_canceled){\r\n                        handler();\r\n                    }\r\n                }\r\n            }).on(\"error\", (err) => {\r\n                rep.cancel();\r\n                if(mutex != undefined){\r\n                    mutex.release();\r\n                }\r\n                if (err.message === \"Unexpected end of JSON input\") {\r\n                    progress.finished = true;\r\n                    progress.status = \"complete\";\r\n                    parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n                    (c8oResponseListener as C8oResponseProgressListener).onProgressResponse(progress, parameters);\r\n                    rep.cancel();\r\n                } else if (err.code === \"ETIMEDOUT\" && err.status === 0) {\r\n                    reject(\"TIMEOUT\");\r\n                } else if (err.name === \"unknown\" && err.status === 0 && err.message === \"getCheckpoint rejected with \") {\r\n                    reject(\"NO_NETWORK\");\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n\r\n            if (cancel) {\r\n                if(mutex != undefined){\r\n                    mutex.release();\r\n                }\r\n                if (rep != null) {\r\n                    this.c8o.log._trace(\"Replication canceled called, modifying its state\");\r\n                    handler();\r\n                    rep.cancel();\r\n                    progress.finished = true;\r\n                    if (c8oResponseListener != null && c8oResponseListener instanceof C8oResponseProgressListener) {\r\n                        c8oResponseListener.onProgressResponse(progress, parameters);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }).catch((error) => {\r\n            throw error.toString();\r\n        });\r\n\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get getdatabseName(): string {\r\n        return this.databaseName;\r\n    }\r\n\r\n    public get getdatabase(): any {\r\n        return this.database;\r\n    }\r\n\r\n    public deleteDB(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.database != null) {\r\n                this.database.destroy().then((response) => {\r\n                    this.database = null;\r\n                    resolve(response);\r\n                }).catch((error) => {\r\n                    this.c8o.log._debug(\"Failed to close DB, will retry: \", error.message);\r\n                    this.database.destroy().then((response) => {\r\n                        this.database = null;\r\n                        resolve(response);\r\n                    }).catch((error) => {\r\n                        this.c8o.log._debug(\"Failed to close DB, second attempt has failed \", error.message);\r\n                        reject(error);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * cancel Pull Replication\r\n     */\r\n    public cancelPullReplication(): void {\r\n        if (this.pullFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.pullFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * cancel Push Replication\r\n     */\r\n    public cancelPushReplication(): void {\r\n        if (this.pushFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.pushFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * cancel Sync Replication\r\n     */\r\n    public cancelSyncReplication(): void {\r\n        if (this.syncFullSyncReplication.replication != undefined) {\r\n            this.manual_canceled = true;\r\n            this.syncFullSyncReplication.replication.cancel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * return current pull replication state or false if replication does not exists\r\n     */\r\n\r\n}\r\n\r\nexport interface ReplicationState {\r\n    listener: any;\r\n    parameters: any;\r\n    type: any;\r\n    database: C8oFullSyncDatabase;\r\n    stopped: Boolean\r\n}\r\n","export class FullSyncDeleteDocumentParameter {\r\n    public static DOCID: FullSyncDeleteDocumentParameter = new FullSyncDeleteDocumentParameter(\"docid\");\r\n    public static REV: FullSyncDeleteDocumentParameter = new FullSyncDeleteDocumentParameter(\"rev\");\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","export class FullSyncAttachmentParameter {\r\n    public static DOCID: FullSyncAttachmentParameter = new FullSyncAttachmentParameter(\"docid\");\r\n    public static NAME: FullSyncAttachmentParameter = new FullSyncAttachmentParameter(\"name\");\r\n    public static CONTENT_TYPE: FullSyncAttachmentParameter = new FullSyncAttachmentParameter(\"content_type\");\r\n    public static CONTENT: FullSyncAttachmentParameter = new FullSyncAttachmentParameter(\"content\");\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","export class FullSyncGetDocumentParameter {\r\n    public static DOCID: FullSyncGetDocumentParameter = new FullSyncGetDocumentParameter(\"docid\");\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n}\r\n","export class FullSyncGetViewParameter {\r\n    public static VIEW: FullSyncGetViewParameter = new FullSyncGetViewParameter(\"view\");\r\n    public static DDOC: FullSyncGetViewParameter = new FullSyncGetViewParameter(\"ddoc\");\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n}\r\n","import {C8oCore, FullSyncPolicy, FullSyncPostDocumentParameter} from \"./c8oCore\";\r\nimport {C8oFullSync, C8oFullSyncCbl} from \"./c8oFullSync\";\r\nimport {\r\n    C8oResponseJsonListener,\r\n    C8oResponseListener,\r\n    C8oResponseProgressListener,\r\n} from \"./c8oResponse\";\r\nimport {C8oUtilsCore} from \"./c8oUtilsCore\";\r\nimport {FullSyncAttachmentParameter} from \"./fullSyncAttachmentParameter\";\r\nimport {FullSyncGetDocumentParameter} from \"./fullSyncGetDocumentParameter\";\r\nimport {FullSyncGetViewParameter} from \"./fullSyncGetViewParameter\";\r\n/**\r\n * Created by charlesg on 10/01/2017.\r\n */\r\n// @dynamic\r\nexport class FullSyncRequestable {\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static GET: FullSyncRequestable = new FullSyncRequestable(\"get\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            const docid: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, true);\r\n            resolve(c8oFullSync.handleGetDocumentRequest(databaseName, docid, parameters));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static DELETE: FullSyncRequestable = new FullSyncRequestable(\"delete\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            const docid: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, true);\r\n            c8oFullSync.handleDeleteDocumentRequest(databaseName, docid, parameters).then((result) => {\r\n                resolve(result);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        })\r\n            .catch((error) => {\r\n                throw error;\r\n            });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static POST: FullSyncRequestable = new FullSyncRequestable(\"post\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                const fullSyncPolicyParameter: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncPostDocumentParameter.POLICY.name, false);\r\n                const fullSyncPolicy: FullSyncPolicy = FullSyncPolicy.getFullSyncPolicy(fullSyncPolicyParameter);\r\n                let fullSyncPolicySubMerge = [];\r\n                if(fullSyncPolicyParameter == \"merge\"){\r\n                    for(let elem in parameters){\r\n                        if(elem.indexOf(\"_use_merge\") == 0){\r\n                            let key = elem.substring(11);\r\n                            let value = parameters[elem];\r\n                            fullSyncPolicySubMerge.push({key:key, value: value});\r\n                        }\r\n                    }\r\n                }\r\n                resolve(c8oFullSync.handlePostDocumentRequest(databaseName, fullSyncPolicy, parameters, fullSyncPolicySubMerge));\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static PUT_ATTACHMENT: FullSyncRequestable = new FullSyncRequestable(\"put_attachment\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            const docid: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n            const name: string = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n            const contentType: string = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.CONTENT_TYPE.name, false);\r\n            const content = C8oUtilsCore.getParameterObjectValue(parameters, FullSyncAttachmentParameter.CONTENT.name, false);\r\n            resolve(c8oFullSync.handlePutAttachmentRequest(databaseName, docid, name, contentType, content));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    public static GET_ATTACHMENT: FullSyncRequestable = new FullSyncRequestable(\"get_attachment\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            const docid: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n            const name: string = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n            resolve(c8oFullSync.handleGetAttachmentRequest(databaseName, docid, name, parameters));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static DELETE_ATTACHMENT: FullSyncRequestable = new FullSyncRequestable(\"delete_attachment\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            const docid: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetDocumentParameter.DOCID.name, false);\r\n            const name: string = C8oUtilsCore.getParameterStringValue(parameters, FullSyncAttachmentParameter.NAME.name, false);\r\n            resolve(c8oFullSync.handleDeleteAttachmentRequest(databaseName, docid, name));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static ALL: FullSyncRequestable = new FullSyncRequestable(\"all\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            c8oFullSync.handleAllDocumentsRequest(databaseName, parameters)\r\n            .then((result) => {\r\n                resolve(result);\r\n            });\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static ALL_LOCAL: FullSyncRequestable = new FullSyncRequestable(\"all_local\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            c8oFullSync.handleAllLocalDocumentsRequest(databaseName, parameters)\r\n            .then((result) => {\r\n                resolve(result);\r\n            });\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static VIEW: FullSyncRequestable = new FullSyncRequestable(\"view\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            const ddoc: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetViewParameter.DDOC.name, false);\r\n            const view: string = C8oUtilsCore.peekParameterStringValue(parameters, FullSyncGetViewParameter.VIEW.name, false);\r\n            c8oFullSync.handleGetViewRequest(databaseName, ddoc, view, parameters).then((result) => {\r\n                resolve(result);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static CREATEINDEX: FullSyncRequestable = new FullSyncRequestable(\"createIndex\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n            try{\r\n                const fields: string = C8oUtilsCore.peekParameterObjectValue(parameters, \"fields\", false);\r\n                let result = await c8oFullSync.handleCreateIndexRequest(databaseName, fields, parameters);\r\n                return result;\r\n            }\r\n            catch(e){\r\n                return e;\r\n            }\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static FIND: FullSyncRequestable = new FullSyncRequestable(\"find\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        try{\r\n            const selector: string = C8oUtilsCore.peekParameterObjectValue(parameters, \"selector\", false);\r\n            let result = await c8oFullSync.handleGetFindRequest(databaseName, selector, parameters);\r\n            return result;\r\n        }\r\n        catch(e){\r\n            return e;\r\n        }\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static EXPLAIN: FullSyncRequestable = new FullSyncRequestable(\"explain\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        try{\r\n            const selector: string = C8oUtilsCore.peekParameterObjectValue(parameters, \"selector\", false);\r\n            let result = await c8oFullSync.handleExplainRequest(databaseName, selector, parameters);\r\n            return result;\r\n        }\r\n        catch(e){\r\n            return e;\r\n        }\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static GETINDEXES: FullSyncRequestable = new FullSyncRequestable(\"getIndexes\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        try{\r\n            let result = await c8oFullSync.handleGetIndexesRequest(databaseName, parameters);\r\n            return result;\r\n        }\r\n        catch(e){\r\n            return e;\r\n        }\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static DELETEINDEX: FullSyncRequestable = new FullSyncRequestable(\"deleteIndex\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        try{\r\n            let result = await c8oFullSync.handleDeleteIndexRequest(databaseName, parameters);\r\n            return result;\r\n        }\r\n        catch(e){\r\n            return e;\r\n        }\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static SEARCH: FullSyncRequestable = new FullSyncRequestable(\"search\", async (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        try{\r\n            const query: string = C8oUtilsCore.peekParameterObjectValue(parameters, \"query\", false);\r\n            const fields: string = C8oUtilsCore.peekParameterObjectValue(parameters, \"fields\", false);\r\n            let result = await c8oFullSync.handleSearchRequest(databaseName, query, fields, parameters);\r\n            return result;\r\n        }\r\n        catch(e){\r\n            return e;\r\n        }\r\n    });\r\n\r\n    \r\n    public static SYNC: FullSyncRequestable = new FullSyncRequestable(\"sync\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        let pullFinish: boolean = false;\r\n        let pushFinish: boolean = false;\r\n        return new Promise((resolve, reject) => {\r\n            c8oFullSync.handleSyncRequest(databaseName, parameters, new C8oResponseProgressListener((progress, parameters) => {\r\n                if(parameters[\"cancel\"] == true){\r\n                    resolve({ok: true});\r\n                }\r\n                else{\r\n                    if (!pullFinish && progress.pull && progress.finished) {\r\n                        pullFinish = true;\r\n                        c8oFullSync.c8o.log._debug(\"handleFullSyncRequest pullFinish = true: \" + progress.toString());\r\n                    }\r\n                    if (!pushFinish && progress.push && progress.finished) {\r\n                        pushFinish = true;\r\n                        c8oFullSync.c8o.log._debug(\"handleFullSyncRequest pushFinish = true: \" + progress.toString());\r\n                    }\r\n                    if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                        c8oFullSync.c8o.log._debug(\"handleFullSyncRequest onJsonResponse: \" + progress.toString());\r\n                        const varNull: JSON = null;\r\n                        (c8oResponseListener as C8oResponseJsonListener).onJsonResponse(varNull, parameters);\r\n                    }\r\n                    if (pullFinish || pushFinish) {\r\n                        resolve({ok: true});\r\n                    }\r\n                }\r\n            })).catch((error) => {\r\n                reject(error);\r\n            });\r\n        })\r\n            .catch((error) => {\r\n                throw error;\r\n            });\r\n    });\r\n\r\n    public static REPLICATE_PULL: FullSyncRequestable = new FullSyncRequestable(\"replicate_pull\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            c8oFullSync.handleReplicatePullRequest(databaseName, parameters, new C8oResponseProgressListener((progress, param) => {\r\n                if(parameters[\"cancel\"] == true){\r\n                    resolve({ok: true});\r\n                }\r\n                else{\r\n                    if (progress.finished) {\r\n                        resolve({ok: true});\r\n                    }\r\n                    if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                        const varNull: JSON = null;\r\n                        (c8oResponseListener as C8oResponseJsonListener).onJsonResponse(varNull, param);\r\n                    }\r\n                }\r\n            })).catch((error) => {\r\n                reject(error);\r\n            });\r\n        })\r\n            .catch((error) => {\r\n                throw error;\r\n            });\r\n    });\r\n\r\n    public static REPLICATE_PUSH: FullSyncRequestable = new FullSyncRequestable(\"replicate_push\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            c8oFullSync.handleReplicatePushRequest(databaseName, parameters, new C8oResponseProgressListener((progress, param) => {\r\n                if(parameters[\"cancel\"] == true){\r\n                    resolve({ok: true});\r\n                }\r\n                else{\r\n                    if (progress.finished) {\r\n                        resolve({ok: true});\r\n                    }\r\n                    if (c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                        const varNull: JSON = null;\r\n                        (c8oResponseListener as C8oResponseJsonListener).onJsonResponse(varNull, param);\r\n                    }\r\n                }\r\n            })).catch((error) => {\r\n                reject(error);\r\n            });\r\n        })\r\n            .catch((error) => {\r\n                throw error;\r\n            });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n    public static RESET: FullSyncRequestable = new FullSyncRequestable(\"reset\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            c8oFullSync.handleResetDatabaseRequest(databaseName).then((response) => {\r\n                c8oFullSync.c8o.subscriber_database_reset.next({ databaseName: databaseName, success: true, error: false });\r\n                resolve(response);\r\n            }).catch((error) => {\r\n                c8oFullSync.c8o.subscriber_database_reset.error({ databaseName: databaseName, success: false, error: true, nativeError: error });\r\n                reject(error);\r\n            });\r\n        })\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n    public static CREATE: FullSyncRequestable = new FullSyncRequestable(\"create\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            resolve(c8oFullSync.handleCreateDatabaseRequest(databaseName));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n    public static BULK: FullSyncRequestable = new FullSyncRequestable(\"bulk\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            resolve(c8oFullSync.handleBulkRequest(databaseName, parameters));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });\r\n\r\n    public static INFO: FullSyncRequestable = new FullSyncRequestable(\"info\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve) => {\r\n            resolve(c8oFullSync.handleInfoRequest(databaseName));\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n    });    \r\n\r\n\r\n    //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n    public static DESTROY: FullSyncRequestable = new FullSyncRequestable(\"destroy\", (c8oFullSync: C8oFullSyncCbl, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener) => {\r\n        return new Promise((resolve, reject) => {\r\n            c8oFullSync.handleDestroyDatabaseRequest(databaseName).then((response) => {\r\n                resolve(response);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        }).catch((error) => {\r\n            throw error;\r\n        });\r\n\r\n    });\r\n\r\n    private value: string;\r\n    private handleFullSyncRequestOp: (c8oFullSyncCbl: C8oFullSync, str: string, dictionary: Object, c8oResponseListener: C8oResponseListener) => any;\r\n\r\n    constructor(value: string, handleFullSyncRequestOp: (c8oFullSyncCbl: C8oFullSyncCbl, str: string, dictionary: Object, c8oResponseListener: C8oResponseListener) => any) {\r\n        this.value = value;\r\n        this.handleFullSyncRequestOp = handleFullSyncRequestOp;\r\n    }\r\n\r\n    public handleFullSyncRequest(c8oFullSync: C8oFullSync, databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.handleFullSyncRequestOp(c8oFullSync, databaseName, parameters, c8oResponseListener).then((result) => {\r\n                resolve(result);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    public static getFullSyncRequestable(value: string): FullSyncRequestable {\r\n        const fullSyncRequestableValues: FullSyncRequestable[] = FullSyncRequestable.values();\r\n        for (let i = 0; i < fullSyncRequestableValues.length; i++) {\r\n            if (fullSyncRequestableValues[i].value === value) {\r\n                return fullSyncRequestableValues[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static values(): FullSyncRequestable[] {\r\n        return [this.GET, this.DELETE, this.POST, this.ALL, this.ALL_LOCAL, this.VIEW, this.SYNC, this.REPLICATE_PULL, this.REPLICATE_PUSH, this.RESET, this.CREATE, this.DESTROY, this.PUT_ATTACHMENT, this.GET_ATTACHMENT,this.DELETE_ATTACHMENT, this.BULK, this.INFO, this.CREATEINDEX, this.FIND, this.DELETEINDEX, this.GETINDEXES, this.EXPLAIN, this.SEARCH];\r\n\r\n    }\r\n}\r\n","export class FullSyncResponse {\r\n\r\n    /**\r\n     * The response key indicating the operation status.\r\n     */\r\n    public static RESPONSE_KEY_OK: string = \"ok\";\r\n    /**\r\n     * The response key indicating the document ID.\r\n     */\r\n    public static RESPONSE_KEY_DOCUMENT_ID: string = \"id\";\r\n    /**\r\n     * The response key indicating the document revision.\r\n     */\r\n    public static RESPONSE_KEY_DOCUMENT_REVISION: string = \"rev\";\r\n}\r\n\r\n/**\r\n * Returned by a fullSync operation without return data.\r\n */\r\nexport class FullSyncAbstractResponse {\r\n    private operationStatus: boolean;\r\n\r\n    constructor(operationStatus: boolean) {\r\n        this.operationStatus = operationStatus;\r\n    }\r\n\r\n    public getProperties(): any {\r\n        const properties: Object = {};\r\n        properties[FullSyncResponse.RESPONSE_KEY_OK] = this.operationStatus;\r\n        return properties;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a default fullSync response.\r\n */\r\nexport class FullSyncDefaultResponse extends FullSyncAbstractResponse {\r\n    constructor(operationStatus: boolean) {\r\n        super(operationStatus);\r\n    }\r\n}\r\n\r\n/**\r\n * Returned by a fullSync document operation without return data.\r\n */\r\nexport class FullSyncDocumentOperationResponse extends FullSyncAbstractResponse {\r\n    public documentId: string;\r\n    public documentRevision: string;\r\n\r\n    constructor(documentId: string, documentRevision: string, operationStatus: boolean) {\r\n        super(operationStatus);\r\n        this.documentId = documentId;\r\n        this.documentRevision = documentRevision;\r\n    }\r\n\r\n    public override getProperties(): Object {\r\n        const properties: Object = super.getProperties();\r\n        properties[FullSyncResponse.RESPONSE_KEY_DOCUMENT_ID] = this.documentId;\r\n        properties[FullSyncResponse.RESPONSE_KEY_DOCUMENT_REVISION] = this.documentRevision;\r\n        return properties;\r\n    }\r\n\r\n}\r\n","import { C8oCore } from \"./c8oCore\";\r\n\r\nexport class C8oAlldocsLocal {\r\n\r\n    constructor(private c8o: C8oCore) {\r\n    }\r\n    private DB_VERSION = 5;\r\n    private LOCAL_STORE = 'local-store';\r\n    private ATTACH_STORE = 'attach-store';\r\n\r\n    public alldocs(opts, db): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            let dbName = db[\"prefix\"] + db[\"name\"];\r\n            opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;\r\n            if (opts.start_key) {\r\n                opts.startkey = opts.start_key;\r\n            }\r\n            if (opts.end_key) {\r\n                opts.endkey = opts.end_key;\r\n            }\r\n            if ('keys' in opts) {\r\n                if (!Array.isArray(opts.keys)) {\r\n                    return reject(new TypeError('options.keys must be an array'));\r\n                }\r\n                var incompatibleOpt =\r\n                    ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {\r\n                        return incompatibleOpt in opts;\r\n                    })[0];\r\n                if (incompatibleOpt) {\r\n                    reject('Some query parameter is invalid' +\r\n                        'Query parameter `' + incompatibleOpt +\r\n                        '` is not compatible with multi-get'\r\n                    );\r\n                    return;\r\n                }\r\n                if (!this.isRemote(db)) {\r\n                    this.allDocsKeysParse(opts);\r\n                    if (opts.keys.length === 0) {\r\n                        let callback = (arg1, arg2, arg3) => {\r\n                            resolve({ arg1: arg1, arg2: arg2, arg3: arg3 })\r\n                        }\r\n                        return this.idbAllDocs({ limit: 0 }, callback, dbName);\r\n                    }\r\n                }\r\n            }\r\n            let callback = (err, result) => {\r\n                if(!err){\r\n                    this.c8o.log._trace(\"[c8oAlldocsLocal], alldocs: ok\" );\r\n                }\r\n                else{\r\n                    this.c8o.log._error(\"[c8oAlldocsLocal], alldocs: an error occured :\", err);\r\n                }\r\n\r\n                resolve({ err: err, result: result})\r\n            }\r\n            return this.idbAllDocs(opts, callback, dbName);\r\n\r\n        });\r\n    }\r\n    private openBase(DB_NAME, resolve = null, reject= null) {\r\n        if(resolve != null){\r\n            this.doOpenBase(DB_NAME, resolve, reject)\r\n        }\r\n        return new Promise((resolve, reject)=>{\r\n            this.doOpenBase(DB_NAME, resolve, reject)\r\n        });\r\n    }\r\n\r\n    private doOpenBase(DB_NAME, resolve = null, reject= null){\r\n        try {\r\n            let req = window.indexedDB.open(DB_NAME, this.DB_VERSION);\r\n            req.onsuccess = (event) => {\r\n                if(req.result.objectStoreNames.length == 0){\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, we need to re-initialized it\");\r\n                    this.restaureDb(DB_NAME)\r\n                    .then(()=>{\r\n                        this.c8o.log._debug(\"[alldocs] database has been re-initialized, we will execute all docs\");\r\n                        this.openBase(DB_NAME, resolve, reject)\r\n                    })\r\n                    .catch((err)=>{\r\n                        reject(err)\r\n                    })\r\n                    \r\n                }\r\n                else{\r\n                    resolve(req.result);\r\n                }\r\n               \r\n           }\r\n        }\r\n        catch(err){\r\n            reject(err);\r\n        }\r\n    }\r\n\r\n    private restaureDb(DB_NAME){\r\n        return new Promise<void>((resolve, reject)=>{\r\n            var dbDeleteRequest = window.indexedDB.deleteDatabase(DB_NAME);\r\n            dbDeleteRequest.onerror = (event)=> {\r\n                this.c8o.log._error(\"[alldocs] database is corrupted, failed to re-initialized database\");\r\n                reject(event)\r\n            };\r\n        \r\n            dbDeleteRequest.onsuccess = (event)=> {\r\n                this.c8o.log._debug(\"[alldocs] database is corrupted, deletion successfull\");\r\n                // Let us open our database\r\n                var DBOpenRequest = window.indexedDB.open(DB_NAME, 5);\r\n        \r\n                DBOpenRequest.onsuccess = (event)=> {\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, creation successfull\");\r\n                    resolve();\r\n                };\r\n        \r\n                DBOpenRequest.onupgradeneeded = (event)=> {\r\n                    this.c8o.log._debug(\"[alldocs] database is corrupted, database need to be upgraded\");\r\n                };\r\n                DBOpenRequest.onerror = (event: any)=> {\r\n                    this.c8o.log._error(\"[alldocs] database is corrupted, creation errored\", event);\r\n                    reject(event)\r\n                };\r\n            };\r\n        })\r\n        \r\n    }\r\n\r\n    private async idbAllDocs(opts, callback, DB_NAME) {\r\n        let idb = await this.openBase(DB_NAME)\r\n\r\n        var start = 'startkey' in opts ? opts.startkey : false;\r\n        var end = 'endkey' in opts ? opts.endkey : false;\r\n        var key = 'key' in opts ? opts.key : false;\r\n        var keys = 'keys' in opts ? opts.keys : false;\r\n        var skip = opts.skip || 0;\r\n        var limit = typeof opts.limit === 'number' ? opts.limit : -1;\r\n        var inclusiveEnd = opts.inclusive_end !== false;\r\n\r\n        var keyRange;\r\n        var keyRangeError;\r\n        if (!keys) {\r\n            keyRange = this.createKeyRange(start, end, inclusiveEnd, key, opts.descending);\r\n            keyRangeError = keyRange && keyRange.error;\r\n            if (keyRangeError &&\r\n                !(keyRangeError.name === \"DataError\" && keyRangeError.code === 0)) {\r\n                // DataError with error code 0 indicates start is less than end, so\r\n                // can just do an empty query. Else need to throw\r\n                return callback(\"indexed_db_went_bad\" +\r\n                    keyRangeError.name, keyRangeError.message);\r\n            }\r\n        }\r\n\r\n        var stores = [this.LOCAL_STORE];\r\n\r\n        if (opts.attachments) {\r\n            stores.push(this.ATTACH_STORE);\r\n        }\r\n        var txnResult = this.openTransactionSafely(idb, stores, 'readonly');\r\n        if (txnResult[\"error\"]) {\r\n            return callback(txnResult[\"error\"]);\r\n        }\r\n        var txn = txnResult[\"txn\"];\r\n        txn.oncomplete = onTxnComplete;\r\n        txn.onabort = callback;\r\n        var localStore = txn.objectStore(this.LOCAL_STORE);\r\n        var results = [];\r\n        var docCount;\r\n\r\n        var countRequest = localStore.count();\r\n        countRequest.onsuccess = function () {\r\n            docCount = countRequest.result;\r\n        }\r\n\r\n        function allDocsInner(winningRev$$1, metadata) {\r\n            var row = {\r\n                id: metadata.id,\r\n                key: metadata.id,\r\n                value: {\r\n                    rev: winningRev$$1\r\n                }\r\n            };\r\n            var deleted = metadata.deleted;\r\n            if (deleted) {\r\n                if (keys) {\r\n                    results.push(row);\r\n                    // deleted docs are okay with \"keys\" requests\r\n                    row[\"value\"][\"deleted\"] = true;\r\n                    row[\"doc\"] = null;\r\n                }\r\n            } else if (skip-- <= 0) {\r\n                results.push(row);\r\n                if (opts.include_docs) {\r\n                    row[\"doc\"] = metadata[\"_c8o_inlcude\"];\r\n                }\r\n            }\r\n        }\r\n\r\n        let processBatch  = (batchValues) =>{\r\n            for (var i = 0, len = batchValues.length; i < len; i++) {\r\n                if (results.length === limit) {\r\n                    break;\r\n                }\r\n                var batchValue = batchValues[i];\r\n                if (batchValue.error && keys) {\r\n                    // key was not found with \"keys\" requests\r\n                    results.push(batchValue);\r\n                    continue;\r\n                }\r\n                var metadata = this.decodeMetadata(batchValue);\r\n                var winningRev$$1 = metadata[\"winningRev\"];\r\n                metadata[\"_c8o_inlcude\"] = batchValue;\r\n                allDocsInner(winningRev$$1, metadata);\r\n            }\r\n        }\r\n\r\n        function onBatch(batchKeys, batchValues, cursor) {\r\n            if (!cursor) {\r\n                return;\r\n            }\r\n            processBatch(batchValues);\r\n            if (results.length < limit) {\r\n                cursor.continue();\r\n            }\r\n        }\r\n\r\n        function onGetAll(e) {\r\n            var values = e.target.result;\r\n            if (opts.descending) {\r\n                values = values.reverse();\r\n            }\r\n            processBatch(values);\r\n        }\r\n\r\n        function onResultsReady() {\r\n            var returnVal = {\r\n                total_rows: docCount,\r\n                offset: opts.skip,\r\n                rows: results\r\n            };\r\n\r\n            callback(null, returnVal);\r\n        }\r\n\r\n        function onTxnComplete() {\r\n            if (opts.attachments) {\r\n                this.postProcessAttachments(results, opts.binary).then(onResultsReady);\r\n            } else {\r\n                onResultsReady();\r\n            }\r\n        }\r\n\r\n        // don't bother doing any requests if start > end or limit === 0\r\n        if (keyRangeError || limit === 0) {\r\n            return;\r\n        }\r\n        if (keys) {\r\n            return this.allDocsKeys(opts.keys, localStore, onBatch);\r\n        }\r\n        if (limit === -1) { // just fetch everything\r\n            return this.getAll(localStore, keyRange, onGetAll);\r\n        }\r\n        // else do a cursor\r\n        // choose a batch size based on the skip, since we'll need to skip that many\r\n        this.runBatchedCursor(localStore, keyRange, opts.descending, limit + skip, onBatch);\r\n    }\r\n\r\n    private runBatchedCursor(objectStore, keyRange, descending, batchSize, onBatch) {\r\n\r\n        if (batchSize === -1) {\r\n          batchSize = 1000;\r\n        }\r\n      \r\n        // Bail out of getAll()/getAllKeys() in the following cases:\r\n        // 1) either method is unsupported - we need both\r\n        // 2) batchSize is 1 (might as well use IDBCursor)\r\n        // 3) descending – no real way to do this via getAll()/getAllKeys()\r\n      \r\n        var useGetAll = typeof objectStore.getAll === 'function' &&\r\n          typeof objectStore.getAllKeys === 'function' &&\r\n          batchSize > 1 && !descending;\r\n      \r\n        var keysBatch;\r\n        var valuesBatch;\r\n        var pseudoCursor;\r\n      \r\n        function onGetAll(e) {\r\n          valuesBatch = e.target.result;\r\n          if (keysBatch) {\r\n            onBatch(keysBatch, valuesBatch, pseudoCursor);\r\n          }\r\n        }\r\n      \r\n        function onGetAllKeys(e) {\r\n          keysBatch = e.target.result;\r\n          if (valuesBatch) {\r\n            onBatch(keysBatch, valuesBatch, pseudoCursor);\r\n          }\r\n        }\r\n      \r\n        function continuePseudoCursor() {\r\n          if (!keysBatch.length) { // no more results\r\n            return onBatch();\r\n          }\r\n          // fetch next batch, exclusive start\r\n          var lastKey = keysBatch[keysBatch.length - 1];\r\n          var newKeyRange;\r\n          if (keyRange && keyRange.upper) {\r\n            try {\r\n              newKeyRange = IDBKeyRange.bound(lastKey, keyRange.upper,\r\n                true, keyRange.upperOpen);\r\n            } catch (e) {\r\n              if (e.name === \"DataError\" && e.code === 0) {\r\n                return onBatch(); // we're done, startkey and endkey are equal\r\n              }\r\n            }\r\n          } else {\r\n            newKeyRange = IDBKeyRange.lowerBound(lastKey, true);\r\n          }\r\n          keyRange = newKeyRange;\r\n          keysBatch = null;\r\n          valuesBatch = null;\r\n          objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;\r\n          objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;\r\n        }\r\n      \r\n        function onCursor(e) {\r\n          var cursor = e.target.result;\r\n          if (!cursor) { // done\r\n            return onBatch();\r\n          }\r\n          // regular IDBCursor acts like a batch where batch size is always 1\r\n          onBatch([cursor.key], [cursor.value], cursor);\r\n        }\r\n      \r\n        if (useGetAll) {\r\n          pseudoCursor = {\"continue\": continuePseudoCursor};\r\n          objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;\r\n          objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;\r\n        } else if (descending) {\r\n          objectStore.openCursor(keyRange, 'prev').onsuccess = onCursor;\r\n        } else {\r\n          objectStore.openCursor(keyRange).onsuccess = onCursor;\r\n        }\r\n      }\r\n\r\n    private getAll(objectStore, keyRange, onSuccess) {\r\n        if (typeof objectStore.getAll === 'function') {\r\n          // use native getAll\r\n          objectStore.getAll(keyRange).onsuccess = onSuccess;\r\n          return;\r\n        }\r\n        // fall back to cursors\r\n        var values = [];\r\n      \r\n        function onCursor(e) {\r\n          var cursor = e.target.result;\r\n          if (cursor) {\r\n            values.push(cursor.value);\r\n            cursor.continue();\r\n          } else {\r\n            onSuccess({\r\n              target: {\r\n                result: values\r\n              }\r\n            });\r\n          }\r\n        }\r\n        \r\n  objectStore.openCursor(keyRange).onsuccess = onCursor;\r\n}\r\n\r\n    private allDocsKeys(keys, docStore, onBatch) {\r\n        // It's not guaranted to be returned in right order  \r\n        var valuesBatch = new Array(keys.length);\r\n        var count = 0;\r\n        keys.forEach(function (key, index) {\r\n            docStore.get(key).onsuccess = function (event) {\r\n                if (event.target.result) {\r\n                    valuesBatch[index] = event.target.result;\r\n                } else {\r\n                    valuesBatch[index] = { key: key, error: 'not_found' };\r\n                }\r\n                count++;\r\n                if (count === keys.length) {\r\n                    onBatch(keys, valuesBatch, {});\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    \r\n    private decodeMetadata(storedObject) {\r\n        if (!storedObject) {\r\n            return null;\r\n        }\r\n        var metadata = {};\r\n        metadata[\"winningRev\"] = storedObject._rev;\r\n        metadata[\"id\"] = storedObject._id;\r\n        return metadata;\r\n    }\r\n\r\n    private openTransactionSafely(idb, stores, mode) {\r\n        try {\r\n            return {\r\n                txn: idb.transaction(stores, mode)\r\n            };\r\n        } catch (err) {\r\n            return {\r\n                error: err\r\n            };\r\n        }\r\n    }\r\n\r\n    private isRemote(db) {\r\n        if (typeof db._remote === 'boolean') {\r\n            return db._remote;\r\n        }\r\n        /* istanbul ignore next */\r\n        if (typeof db.type === 'function') {\r\n            return db.type() === 'http';\r\n        }\r\n        /* istanbul ignore next */\r\n        return false;\r\n    }\r\n\r\n    private allDocsKeysParse(opts) {\r\n        var keys = ('limit' in opts) ?\r\n            opts.keys.slice(opts.skip, opts.limit + opts.skip) :\r\n            (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;\r\n        opts.keys = keys;\r\n        opts.skip = 0;\r\n        delete opts.limit;\r\n        if (opts.descending) {\r\n            keys.reverse();\r\n            opts.descending = false;\r\n        }\r\n    }\r\n\r\n    private createKeyRange(start, end, inclusiveEnd, key, descending) {\r\n        try {\r\n            if (start && end) {\r\n                if (descending) {\r\n                    return IDBKeyRange.bound(end, start, !inclusiveEnd, false);\r\n                } else {\r\n                    return IDBKeyRange.bound(start, end, false, !inclusiveEnd);\r\n                }\r\n            } else if (start) {\r\n                if (descending) {\r\n                    return IDBKeyRange.upperBound(start);\r\n                } else {\r\n                    return IDBKeyRange.lowerBound(start);\r\n                }\r\n            } else if (end) {\r\n                if (descending) {\r\n                    return IDBKeyRange.lowerBound(end, !inclusiveEnd);\r\n                } else {\r\n                    return IDBKeyRange.upperBound(end, !inclusiveEnd);\r\n                }\r\n            } else if (key) {\r\n                return IDBKeyRange.only(key);\r\n            }\r\n        } catch (e) {\r\n            return { error: e };\r\n        }\r\n        return null;\r\n    }\r\n}","import { C8oBase } from \"./c8oBase\";\r\nimport { C8oCore, FullSyncPolicy } from \"./c8oCore\";\r\nimport { C8oFullSyncChangeListener } from \"./c8oFullSyncChangeListener\";\r\nimport { C8oFullSyncTranslator } from \"./c8oFullSyncTranslator\";\r\nimport { C8oLocalCacheResponse } from \"./c8oLocalCacheResponse\";\r\nimport { C8oResponseJsonListener, C8oResponseListener } from \"./c8oResponse\";\r\nimport { C8oUtilsCore, Semaphore } from \"./c8oUtilsCore\";\r\nimport { C8oCouchBaseLiteException } from \"./Exception/c8oCouchBaseLiteException\";\r\nimport { C8oException } from \"./Exception/c8oException\";\r\nimport { C8oExceptionMessage } from \"./Exception/c8oExceptionMessage\";\r\nimport { C8oRessourceNotFoundException } from \"./Exception/c8oRessourceNotFoundException\";\r\nimport { C8oUnavailableLocalCacheException } from \"./Exception/c8oUnavailableLocalCacheException\";\r\nimport { C8oFullSyncDatabase } from \"./fullSyncDatabase\";\r\nimport { FullSyncDeleteDocumentParameter } from \"./fullSyncDeleteDocumentParameter\";\r\nimport { FullSyncRequestable } from \"./fullSyncRequestable\";\r\nimport { FullSyncDefaultResponse, FullSyncDocumentOperationResponse } from \"./fullSyncResponse\";\r\n\r\nexport class C8oFullSync {\r\n    private static FULL_SYNC_URL_PATH: string = \"/fullsync/\";\r\n    /**\r\n     * The project requestable value to execute a fullSync request.\r\n     */\r\n    public static FULL_SYNC_PROJECT: string = \"fs://\";\r\n    public static FULL_SYNC__ID: string = \"_id\";\r\n    public static FULL_SYNC__REV: string = \"_rev\";\r\n    public static FULL_SYNC__ATTACHMENTS: string = \"_attachments\";\r\n\r\n    public c8o: C8oCore;\r\n    protected fullSyncDatabaseUrlBase: string;\r\n    protected localSuffix: string;\r\n\r\n    public constructor(c8o: C8oCore) {\r\n        this.c8o = c8o;\r\n        this.fullSyncDatabaseUrlBase = c8o.endpointConvertigo + C8oFullSync.FULL_SYNC_URL_PATH;\r\n        this.localSuffix = (c8o.fullSyncLocalSuffix !== null) ? c8o.fullSyncLocalSuffix : \"_device\";\r\n    }\r\n\r\n    /**\r\n     * Handles a fullSync request.<br/>\r\n     * It determines the type of the request thanks to parameters.\r\n     *\r\n     * @param _parameters\r\n     * @param listener\r\n     * @return promise<any>\r\n     * @throws C8oException\r\n     */\r\n    public async handleFullSyncRequest(_parameters: Object, listener: C8oResponseListener): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const parameters = {};\r\n            for (const val in _parameters) {\r\n                if (_parameters[val] instanceof Blob != true && typeof _parameters[val] !== \"function\") {\r\n                    //if it's not a blob then stringify and parse the value to make some values like true case insensitive ( from string to boolean)\r\n                    parameters[val] = JSON.parse(JSON.stringify(_parameters[val]));\r\n                } else {\r\n                    parameters[val] = _parameters[val];\r\n                }\r\n            }\r\n            const projectParameterValue: string = C8oUtilsCore.peekParameterStringValue(parameters, C8oCore.ENGINE_PARAMETER_PROJECT, true);\r\n            if (projectParameterValue.indexOf(C8oFullSync.FULL_SYNC_PROJECT) !== 0) {\r\n                reject(new C8oException(C8oExceptionMessage.invalidParameterValue(projectParameterValue, \"its don't start with\" + C8oFullSync.FULL_SYNC_PROJECT)));\r\n            }\r\n            let fullSyncRequestableValue: string = C8oUtilsCore.peekParameterStringValue(parameters, C8oCore.ENGINE_PARAMETER_SEQUENCE, true);\r\n\r\n            //  get rid of the optional trailing #RouteHint present in the sequence\r\n            if (fullSyncRequestableValue.indexOf(\"#\") !== -1) {\r\n                fullSyncRequestableValue = fullSyncRequestableValue.substring(0, fullSyncRequestableValue.indexOf(\"#\"));\r\n            }\r\n\r\n            const fullSyncRequestable: FullSyncRequestable = FullSyncRequestable.getFullSyncRequestable(fullSyncRequestableValue);\r\n            if (fullSyncRequestable === null) {\r\n                reject(new C8oException(C8oExceptionMessage.invalidParameterValue(C8oCore.ENGINE_PARAMETER_PROJECT, C8oExceptionMessage.unknownValue(\"fullSync requestable\", fullSyncRequestableValue))));\r\n            }\r\n            let databaseName: string = projectParameterValue.substring(C8oFullSync.FULL_SYNC_PROJECT.length);\r\n            if (databaseName.length < 1) {\r\n                databaseName = this.c8o.defaultDatabaseName;\r\n                if (databaseName === null) {\r\n                    reject(new C8oException(C8oExceptionMessage.invalidParameterValue(C8oCore.ENGINE_PARAMETER_PROJECT, C8oExceptionMessage.missingValue(\"fullSync database name\"))));\r\n                }\r\n            }\r\n\r\n            let response: any;\r\n\r\n            fullSyncRequestable.handleFullSyncRequest(this, databaseName, parameters, listener).then((result) => {\r\n                response = result;\r\n                if (response === null || response === undefined) {\r\n                    reject(new C8oException(C8oExceptionMessage.couchNullResult()));\r\n                }\r\n                resolve(this.handleFullSyncResponse(response, listener));\r\n            }).catch((error) => {\r\n                if (error instanceof C8oException) {\r\n                    reject(error);\r\n                } else {\r\n                    reject(new C8oException(C8oExceptionMessage.FullSyncRequestFail(), error));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    /**\r\n     *\r\n     * @param response\r\n     * @param listener\r\n     * @return response\r\n     * @throws C8oException Failed to parse response.\r\n     */\r\n    public handleFullSyncResponse(response: any, listener: C8oResponseListener): any {\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Checks if request parameters correspond to a fullSync request.\r\n     */\r\n    public static isFullSyncRequest(requestParameter: Object): boolean {\r\n        if (C8oUtilsCore.getParameterStringValue(requestParameter, C8oCore.ENGINE_PARAMETER_PROJECT, false) !== null) {\r\n            return C8oUtilsCore.getParameterStringValue(requestParameter, C8oCore.ENGINE_PARAMETER_PROJECT, false).indexOf(C8oFullSync.FULL_SYNC_PROJECT) === 0;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\nimport { ReplicationState } from \"./fullSyncDatabase\"\r\nimport { C8oAlldocsLocal } from './c8oAlldocsLocal';\r\nexport class C8oFullSyncCbl extends C8oFullSync {\r\n    private static ATTACHMENT_PROPERTY_KEY_CONTENT_URL: string = \"content_url\";\r\n    private fullSyncDatabases: Object;\r\n    private fullSyncChangeListeners: C8oFullSyncChangeListener[][] = [];\r\n    private cblChangeListeners: any[] = [];\r\n    public replicationsToRestart: Array<ReplicationState> = [];\r\n    public canceled = false;\r\n\r\n    constructor(c8o: C8oCore) {\r\n        super(c8o);\r\n        this.fullSyncDatabases = {};\r\n        if (window[\"C8oFullSyncCbl\"] == undefined) {\r\n            window[\"C8oFullSyncCbl\"] = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the database with this name in the list.<br/>\r\n     * If it does not already exist yet then creates it and adds it to the list.\r\n     *\r\n     * @param databaseName\r\n     * @return C8oFullSyncDatabase\r\n     * @throws C8oException Failed to create a new fullSync database.\r\n     */\r\n    public async getOrCreateFullSyncDatabase(databaseName: string, isLocalCache = false): Promise<C8oFullSyncDatabase> {\r\n        let mutex = window[\"C8oFullSyncCbl\"][databaseName] == undefined ? window[\"C8oFullSyncCbl\"][databaseName] = new Semaphore(1) : window[\"C8oFullSyncCbl\"][databaseName];\r\n        await mutex.acquire();\r\n        let localDatabaseName: string = databaseName + this.localSuffix;\r\n\r\n        localDatabaseName = this.c8o.database.localName(localDatabaseName, true);\r\n        let prefix = this.c8o.prefixBase == true && isLocalCache == false ? this.c8o.session.user.name + \"_\" : \"\";\r\n\r\n        if (this.fullSyncDatabases[localDatabaseName] == null) {\r\n            this.fullSyncDatabases[localDatabaseName] = new C8oFullSyncDatabase(this.c8o, databaseName, this.fullSyncDatabaseUrlBase, this.localSuffix, prefix);\r\n        }\r\n        mutex.release();\r\n        return this.fullSyncDatabases[localDatabaseName];\r\n    }\r\n\r\n    public override handleFullSyncResponse(response: any, listener: C8oResponseListener): any {\r\n        response = super.handleFullSyncResponse(response, listener);\r\n        if (listener instanceof C8oResponseJsonListener) {\r\n            if (response instanceof FullSyncDocumentOperationResponse) {\r\n                return C8oFullSyncTranslator.fullSyncDocumentOperationResponseToJson(response as FullSyncDocumentOperationResponse);\r\n            } else if (response instanceof FullSyncDefaultResponse) {\r\n                return C8oFullSyncTranslator.fullSyncDefaultResponseToJson(response as FullSyncDefaultResponse);\r\n            } else if (response instanceof Object) {\r\n                return response as JSON;\r\n            } else {\r\n                throw new C8oException(C8oExceptionMessage.illegalArgumentIncompatibleListener(listener.toString(), typeof response));\r\n            }\r\n        }\r\n    }\r\n\r\n    public async handleGetAttachmentUrlRequest(fullSyncDatabaseName: string, docid: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase: C8oFullSyncDatabase = null;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(fullSyncDatabaseName);\r\n        const attachmentName = C8oUtilsCore.getParameterStringValue(parameters, \"attachment_name\", false);\r\n        return new Promise((resolve) => {\r\n            fullSyncDatabase.getdatabase.getAttachment(docid, attachmentName).then((buffer) => {\r\n                resolve(buffer);\r\n            });\r\n        });\r\n    }\r\n\r\n    public async handleGetDocumentRequest(fullSyncDatabaseName: string, docid: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase: C8oFullSyncDatabase = null;\r\n        let param: Object;\r\n        param = parameters[\"attachments\"] ? { attachments: true } : {};\r\n        parameters[\"binary\"] ? param[\"binary\"] = true : {};\r\n\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(fullSyncDatabaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(docid, param).then((document) => {\r\n                if (document == null) {\r\n                    reject(new C8oRessourceNotFoundException((C8oExceptionMessage.ressourceNotFound(\"requested document \\\"\" + docid + \"\\\"\"))));\r\n                }\r\n                if (document === null) {\r\n                    document = {};\r\n                }\r\n                resolve(document);\r\n            })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                });\r\n\r\n        });\r\n    }\r\n\r\n    public async handleDeleteDocumentRequest(DatabaseName: string, docid: string, parameters: Object): Promise<any> {\r\n        return new Promise(async (resolve, reject) => {\r\n            let fullSyncDatabase: C8oFullSyncDatabase = null;\r\n\r\n            fullSyncDatabase = await this.getOrCreateFullSyncDatabase(DatabaseName);\r\n            const revParameterValue: string = C8oUtilsCore.getParameterStringValue(parameters, FullSyncDeleteDocumentParameter.REV.name, false);\r\n            let documentRevision: string;\r\n            if (revParameterValue === null) {\r\n                fullSyncDatabase.getdatabase.get(docid).then((doc) => {\r\n                    if (doc === null) {\r\n                        reject(new C8oRessourceNotFoundException(\"Cannot find document\"));\r\n                    }\r\n                    documentRevision = doc._rev;\r\n                    return fullSyncDatabase.getdatabase.remove(doc);\r\n                }).then((result) => {\r\n                    resolve(new FullSyncDocumentOperationResponse(docid, documentRevision, result.ok));\r\n                }).catch((err) => {\r\n                    reject(new C8oException(C8oExceptionMessage.couchRequestDeleteDocument(), err));\r\n                });\r\n            } else {\r\n\r\n                fullSyncDatabase.getdatabase.remove(docid, revParameterValue)\r\n                    .then((result) => {\r\n                        resolve(new FullSyncDocumentOperationResponse(docid, documentRevision, result.ok));\r\n                    }).catch((err) => {\r\n                        reject(new C8oException(C8oExceptionMessage.couchRequestDeleteDocument(), err));\r\n                    });\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public async handlePostDocumentRequest(databaseName: string, fullSyncPolicy: FullSyncPolicy, parameters: Object, fullsyncPolicySubMerge = null): Promise<any> {\r\n        let fullSyncDatabase: C8oFullSyncDatabase;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let subkeySeparatorParameterValue: string = C8oUtilsCore.getParameterStringValue(parameters, C8oCore.FS_SUBKEY_SEPARATOR, false);\r\n        if (subkeySeparatorParameterValue == null) {\r\n            subkeySeparatorParameterValue = \".\";\r\n        }\r\n        const newProperties = {};\r\n        for (let i = 0; i < Object.keys(parameters).length; i++) {\r\n            let parameterName: string = Object.keys(parameters)[i];\r\n            if (parameterName.indexOf(\"__\") !== 0 && parameterName.indexOf(\"_use_\") !== 0) {\r\n                let objectParameterValue: any = parameters[Object.keys(parameters)[i]];\r\n                const paths: string[] = parameterName.split(subkeySeparatorParameterValue);\r\n                if (paths.length > 1) {\r\n                    parameterName = paths[0];\r\n                    let count = paths.length - 1;\r\n                    while (count > 0) {\r\n                        const tmpObject: Object = {};\r\n                        tmpObject[paths[count]] = objectParameterValue;\r\n                        objectParameterValue = tmpObject;\r\n                        count--;\r\n                    }\r\n                    const existProperty = newProperties[parameterName];\r\n                    if (existProperty != null) {\r\n                        C8oFullSyncCbl.mergeProperties(objectParameterValue, existProperty);\r\n                    }\r\n                }\r\n                newProperties[parameterName] = objectParameterValue;\r\n            }\r\n\r\n\r\n        }\r\n        if (fullsyncPolicySubMerge != null) {\r\n\r\n        }\r\n        const db = fullSyncDatabase.getdatabase;\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncPolicy.action(db, newProperties, { fullsyncPolicySubMerge: fullsyncPolicySubMerge, subkeySeparatorParameterValue: subkeySeparatorParameterValue })\r\n                .then((createdDocument: any) => {\r\n                    const fsDocOpeResp: FullSyncDocumentOperationResponse = new FullSyncDocumentOperationResponse(createdDocument.id, createdDocument.rev, createdDocument.ok);\r\n                    resolve(fsDocOpeResp);\r\n                }).catch((error) => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n\r\n    public async handlePutAttachmentRequest(databaseName: string, docid: string, attachmentName: string, attachmentType: string, attachmentContent: any): Promise<any> {\r\n        let document: any = null;\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(docid).then((result) => {\r\n                document = result;\r\n\r\n                if (document !== null) {\r\n                    fullSyncDatabase.getdatabase.putAttachment(docid, attachmentName, result._rev, attachmentContent, attachmentType)\r\n                        .then((result) => {\r\n                            //  handle result\r\n                            resolve(new FullSyncDocumentOperationResponse(result._id, result._rev, result.ok));\r\n                        }).catch((err) => {\r\n                            reject(new C8oCouchBaseLiteException(\"Unable to put the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n                        });\r\n                } else {\r\n                    reject(new C8oRessourceNotFoundException(\"Cannot find document\"));\r\n                }\r\n\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    public async  handleGetAttachmentRequest(databaseName: string, docid: string, attachmentName: string, parameters: any): Promise<any> {\r\n        let document: any = null;\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.getAttachment(docid, attachmentName, parameters)\r\n                .then((buffer) => {\r\n                    resolve(buffer);\r\n                }).catch((err) => {\r\n                    reject(new C8oCouchBaseLiteException(\"Unable to put the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n                });\r\n        });\r\n\r\n    }\r\n\r\n    public async handleDeleteAttachmentRequest(databaseName: string, docid: string, attachmentName: string): Promise<any> {\r\n        let document: any = null;\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(docid).then((result) => {\r\n                document = result;\r\n            }).then(() => {\r\n                if (document !== null) {\r\n                    fullSyncDatabase.getdatabase.removeAttachment(docid, attachmentName, document._rev).catch((err) => {\r\n                        reject(new C8oCouchBaseLiteException(\"Unable to delete the attachment \" + attachmentName + \" to the document \" + docid + \".\", err));\r\n                    });\r\n                } else {\r\n                    reject(new C8oRessourceNotFoundException(\"Document do not exists\"));\r\n                }\r\n                resolve(new FullSyncDocumentOperationResponse(document._id, document._rev, true));\r\n            })\r\n                .catch((err) => {\r\n                    reject(new C8oException(err.message, err));\r\n                })\r\n        });\r\n    }\r\n\r\n    public async handleAllDocumentsRequest(databaseName: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = null;\r\n\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase\r\n                .allDocs(parameters)\r\n                .then((res) => {\r\n                    resolve(res);\r\n                })\r\n                .catch((err) => {\r\n                    reject(new C8oException(err.stack));\r\n                });\r\n        });\r\n    }\r\n    public async handleAllLocalDocumentsRequest(databaseName: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = null;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let c8oAlldocsLocal = new C8oAlldocsLocal(this.c8o);\r\n        return new Promise((resolve, reject) => {\r\n            c8oAlldocsLocal.alldocs(parameters, fullSyncDatabase.database)\r\n                .then((res) => {\r\n                    if (!res.err) {\r\n                        resolve(res.result);\r\n                    }\r\n                    else {\r\n                        if (res[\"err\"][\"stack\"] != undefined) {\r\n                            reject(new C8oException(res[\"err\"][\"stack\"]));\r\n                        }\r\n                        else {\r\n                            reject(new C8oException(JSON.stringify(res[\"err\"])))\r\n                        }\r\n                    }\r\n\r\n                })\r\n                .catch((err) => {\r\n                    if (err[\"err\"][\"stack\"] != undefined) {\r\n                        reject(new C8oException(err[\"err\"][\"stack\"]));\r\n                    }\r\n                    else {\r\n                        reject(new C8oException(JSON.stringify(err[\"err\"])))\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    public async handleGetViewRequest(databaseName: string, ddocName: string, viewName: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = null;\r\n        fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let attachments;\r\n        let binary;\r\n        let include_docs;\r\n        if (parameters[\"attachments\"] && window[\"cblite\"] !== undefined) {\r\n            attachments = C8oUtilsCore.getParameterStringValue(parameters, \"attachments\", false);\r\n            binary = C8oUtilsCore.getParameterStringValue(parameters, \"binary\", false);\r\n            include_docs = C8oUtilsCore.getParameterStringValue(parameters, \"include_docs\", false);\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.query(ddocName + \"/\" + viewName, parameters)\r\n                .then((result) => {\r\n                    if (attachments) {\r\n                        const array: Object[] = [];\r\n                        let len = 0;\r\n                        for (const resp of result.rows) {\r\n                            this.handleGetDocumentRequest(databaseName, resp.id, {\r\n                                attachments: true,\r\n                                binary: true,\r\n                                include_docs: true,\r\n                            }).then((getResult) => {\r\n                                array.push(getResult);\r\n                                len++;\r\n                                if (len === result.rows.length) {\r\n                                    result.rows = array;\r\n                                    resolve(result);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        resolve(result);\r\n                    }\r\n\r\n                }).catch((error) => {\r\n                    reject(new C8oException(C8oExceptionMessage.couchRequestGetView(), error));\r\n                });\r\n        });\r\n\r\n    }\r\n\r\n    public async handleCreateIndexRequest(databaseName: string, fields: any, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            parameters[\"fields\"] = fields;\r\n            var result = await fullSyncDatabase.getdatabase.createIndex({index: parameters});\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestCreateIndex(), err)\r\n        }\r\n    }\r\n\r\n    public async handleGetFindRequest(databaseName: string,selector:any, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            parameters[\"selector\"] = selector;\r\n            var result = await fullSyncDatabase.getdatabase.find(parameters);\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestFind(), err)\r\n        }\r\n    }\r\n\r\n    public async handleExplainRequest(databaseName: string,selector:any, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            parameters[\"selector\"] = selector;\r\n            var result = await fullSyncDatabase.getdatabase.explain(parameters);\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestExplain(), err)\r\n        }\r\n    }\r\n\r\n    public async handleGetIndexesRequest(databaseName: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            var result = await fullSyncDatabase.getdatabase.getIndexes();\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestGetIndexes(), err)\r\n        }\r\n    }\r\n\r\n    public async handleDeleteIndexRequest(databaseName: string, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        try {\r\n            var result = await fullSyncDatabase.getdatabase.deleteIndex(parameters);\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestDeleteIndex(), err)\r\n        }\r\n    }\r\n\r\n    public async handleSearchRequest(databaseName: string, query, fields, parameters: Object): Promise<any> {\r\n        let fullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        parameters[\"query\"] = query;\r\n        parameters[\"fields\"] = fields;\r\n        try {\r\n            var result = await fullSyncDatabase.getdatabase.search(parameters);\r\n            return result;\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.couchRequestSearch(), err)\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Check network status before starting a replication\r\n     */\r\n    private checkState(): boolean {\r\n        return this.c8o.reachable == undefined ? false : this.c8o.reachable;\r\n    }\r\n\r\n    public async handleSyncRequest(databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"sync\", fullSyncDatabase);\r\n        if (!resp[0]) {\r\n            this.c8o.session.mutexCheckSession.acquire();\r\n            return fullSyncDatabase.startAllReplications(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n        }\r\n        else {\r\n            this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n            return new Promise(() => { });\r\n        }\r\n    }\r\n\r\n    public async handleReplicatePullRequest(databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"pull\", fullSyncDatabase);\r\n        if (!resp[0]) {\r\n            this.c8o.session.mutexCheckSession.acquire();\r\n            return fullSyncDatabase.startPullReplication(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n        }\r\n        else {\r\n            this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n            return new Promise(() => { });\r\n        }\r\n    }\r\n\r\n    public async handleReplicatePushRequest(databaseName: string, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        let resp = this.c8o.database.registerRequest(c8oResponseListener, parameters, \"push\", fullSyncDatabase);\r\n        if (!resp[0]) {\r\n            this.c8o.session.mutexCheckSession.acquire();\r\n            return fullSyncDatabase.startPushReplication(parameters, c8oResponseListener, resp[1], resp[2], this.c8o.session.mutexCheckSession);\r\n        }\r\n        else {\r\n            this.c8o.log._trace(\"[c8ofullsync] waiting for network to start replication\");\r\n            return new Promise(() => { });\r\n        }\r\n    }\r\n\r\n    public handleResetDatabaseRequest(databaseName: string): Promise<FullSyncDefaultResponse> {\r\n        return new Promise((resolve, reject) => {\r\n            this.handleDestroyDatabaseRequest(databaseName)\r\n            .then(() => {\r\n                this.handleCreateDatabaseRequest(databaseName).\r\n                    then((res) => {\r\n                        resolve(res);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    })\r\n\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    public async handleCreateDatabaseRequest(databaseName: string): Promise<FullSyncDefaultResponse> {\r\n        await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new FullSyncDefaultResponse(true);\r\n    }\r\n\r\n    public async handleBulkRequest(databaseName: string, parameters: Object): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            const header = {\r\n                \"x-convertigo-sdk\": this.c8o.sdkVersion,\r\n            };\r\n            if(this.c8o.xsrfUsed){\r\n                const headerName = \"x-xsrf-token\";\r\n                const fetch = \"Fetch\";\r\n                header[headerName] = window.localStorage.getItem(headerName) != undefined ? window.localStorage.getItem(headerName) : fetch;\r\n            }\r\n            Object.assign(header, this.c8o.headers);\r\n            fullSyncDatabase.getdatabase.c8oload(parameters[\"data\"],\r\n\r\n                {\r\n                    proxy: this.c8o.endpointConvertigo + \"/fullsync/\" + (fullSyncDatabase.getdatabseName).replace(\"_device\", \"\"),\r\n                    fetch: (url, opts) => {\r\n                        opts.credentials = 'include';\r\n                        for (let key in header) {\r\n                            opts.headers.set(key, header[key]);\r\n                        }\r\n                        return PouchDB.fetch(url, opts);\r\n                    }\r\n                },\r\n                this.c8o\r\n            )\r\n                .then(() => {\r\n                    resolve(new FullSyncDefaultResponse(true));\r\n                }).catch((err) => {\r\n                    //this.c8o.log._error(\"Error loading the \" + parameters[\"data\"] + \" database resource\" + JSON.stringify(err, Object.getOwnPropertyNames(err)))\r\n                    reject(new C8oException(\"Bulk Load failed\", err));\r\n                })\r\n        })\r\n    }\r\n\r\n    public async handleInfoRequest(databaseName: string): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.info()\r\n                .then((response) => {\r\n                    resolve(response);\r\n                }).catch((err) => {\r\n                    //this.c8o.log._error(\"Error loading the \" + parameters[\"data\"] + \" database resource\" + JSON.stringify(err, Object.getOwnPropertyNames(err)))\r\n                    reject(new C8oException(\"Get info failed\", err));\r\n                })\r\n        })\r\n    }\r\n\r\n    public async handleDestroyDatabaseRequest(databaseName: string): Promise<any> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const localDatabaseName = databaseName + this.localSuffix;\r\n            (await this.getOrCreateFullSyncDatabase(databaseName)).deleteDB().then((response) => {\r\n                if (this.fullSyncDatabases[this.c8o.database.localName(localDatabaseName)] != null) {\r\n                    delete this.fullSyncDatabases[this.c8o.database.localName(localDatabaseName)];\r\n                    this.c8o.database.cancelAllForbase(this.fullSyncDatabases[\"databaseName\"]);\r\n                }\r\n                resolve(new FullSyncDefaultResponse(response.ok));\r\n            }).catch((err) => {\r\n                reject(new C8oException(err.name, err));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Allow to clone object whithout reference\r\n     * \r\n     * @param obj Object: object to be cloned \r\n     */\r\n    public static deepCloneObject(obj) {\r\n        if (obj === null || typeof obj !== 'object') {\r\n            return obj;\r\n        }\r\n        var temporarystorage = obj.constructor();\r\n        for (var key in obj) {\r\n            temporarystorage[key] = C8oFullSyncCbl.deepCloneObject(obj[key]);\r\n        }\r\n        return temporarystorage;\r\n    }\r\n\r\n    /**\r\n     * Recursive function that browse object to be modified and apply delete\r\n     * \r\n     * @param objToChange Object: the object to be modified\r\n     * @param path string: The path where to find object to be modified\r\n     * @param index number: index\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    public static applySubPolicyDelete (objToChange, path, index, subPolicy) {\r\n        let arrayPath = path.split(subPolicy.subkeySeparatorParameterValue);\r\n        let length = arrayPath.length;\r\n        if(index + 1 == length){\r\n            // delete key\r\n            delete objToChange[arrayPath[index]];\r\n        }\r\n        else{\r\n            //recursive call to navigate to property\r\n            C8oFullSyncCbl.applySubPolicyDelete(objToChange[arrayPath[index]],path, index + 1, subPolicy);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recursive function that browse object to be modified and apply override\r\n     * \r\n     * @param objToChange Object: the object to be modified\r\n     * @param path string: The path where to find object to be modified\r\n     * @param index number: index\r\n     * @param source Object: the object posted\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    public static applySubPolicyOverride(objToChange, path, index, source, subPolicy) {\r\n        let arrayPath = path.split(subPolicy.subkeySeparatorParameterValue);\r\n        let length = arrayPath.length;\r\n        if(index + 1 == length){\r\n            // change key\r\n            // user has not given object to override\r\n            if(source == undefined){\r\n               \r\n            }\r\n            else if(source[arrayPath[index]] != null){\r\n                objToChange[arrayPath[index]] = source[arrayPath[index]];\r\n            }\r\n        }\r\n        else{\r\n            //recursive call to navigate to property\r\n            if(source != undefined){\r\n                if(objToChange == undefined){\r\n                    objToChange = {};\r\n                }\r\n                C8oFullSyncCbl.applySubPolicyOverride(objToChange[arrayPath[index]],path, index + 1, source[arrayPath[index]], subPolicy);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Global function that will apply sub policy for merge\r\n     * \r\n     * @param override boolean: if we have to perform override sub policy or not\r\n     * @param source Object: the object posted\r\n     * @param objToChange Object: the object to be modified\r\n     * @param subPolicy Object: subPolicy to be applied\r\n     */\r\n    public static applySubPolicyForMerge(override, source, objToChange, subPolicy){\r\n        for(let elem of subPolicy.fullsyncPolicySubMerge){\r\n            switch(elem.value){\r\n                case \"override\":\r\n                    if(override){\r\n                        C8oFullSyncCbl.applySubPolicyOverride(objToChange, elem.key, 0, source, subPolicy);\r\n                    }\r\n                break;\r\n                case \"delete\":\r\n                    C8oFullSyncCbl.applySubPolicyDelete(objToChange,elem.key, 0,subPolicy);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static mergeProperties(newProperties: Object, oldProperties: Object, useMergePolicy = \"none\") {\r\n        for (let i = 0; i < Object.keys(oldProperties).length; i++) {\r\n            const oldPropertyKey = Object.keys(oldProperties)[i];\r\n            const oldPropertyValue = oldProperties[Object.keys(oldProperties)[i]];\r\n            // Checks if the new document contains the same key\r\n            if (newProperties[oldPropertyKey] !== null && newProperties[oldPropertyKey] !== undefined) {\r\n                const newDocumentValue = newProperties[oldPropertyKey];\r\n                if (Object.prototype.toString.call(newDocumentValue) === \"[object Array]\" && Object.prototype.toString.call(oldPropertyValue) === \"[object Array]\") {\r\n                    C8oFullSyncCbl.mergeArrayProperties(newDocumentValue, oldPropertyValue);\r\n                } else if (typeof (newDocumentValue) === \"object\" && typeof (oldPropertyValue) === \"object\") {\r\n                    C8oFullSyncCbl.mergeProperties(newDocumentValue, oldPropertyValue);\r\n                } else {\r\n                    // If the new document has the same key but its value is not the same type than the old one or if their type are \"simple\"\r\n                    // Does nothing cause the right value is the new one\r\n                }\r\n            } else {\r\n                // If the new document does not contain the key then adds it\r\n                newProperties[oldPropertyKey] = oldPropertyValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static mergeArrayProperties(newArray: any, oldArray: any) {\r\n        const newArraySize = newArray.length;\r\n        const oldArraySize = oldArray.length;\r\n        for (let i = 0; i < oldArraySize; i++) {\r\n            let newArrayValue: any = null;\r\n            if (i < newArraySize) {\r\n                newArrayValue = newArray[i];\r\n            }\r\n            const oldArrayValue = oldArray[i];\r\n\r\n            if (newArrayValue !== null) {\r\n                if (newArrayValue instanceof Array && oldArrayValue instanceof Array) {\r\n                    C8oFullSyncCbl.mergeArrayProperties(newArrayValue, oldArrayValue);\r\n                } else if (typeof (newArrayValue) === \"object\" && typeof (oldArrayValue) === \"object\") {\r\n                    C8oFullSyncCbl.mergeProperties(newArrayValue, oldArrayValue);\r\n                } else {\r\n                    // If the new array value is not the same type than the old one or if their type are \"simple\"\r\n                    // Does nothing cause the right value is the new one\r\n                }\r\n            } else {\r\n                // If the new array value is null then it means that it size is reach so we can add objects at its end\r\n                newArray.push(oldArrayValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public async getDocucmentFromDatabase(c8o: C8oCore, databaseName: string, documentId: string): Promise<any> {\r\n        return new Promise(async (resolve, reject) => {\r\n            let c8oFullSyncDatabase: C8oFullSyncDatabase;\r\n            try {\r\n                c8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n            } catch (err) {\r\n                reject(new C8oException(C8oExceptionMessage.fullSyncGetOrCreateDatabase(databaseName), err));\r\n            }\r\n            c8oFullSyncDatabase.getdatabase().get(documentId).then((result) => {\r\n                resolve(result);\r\n            });\r\n        });\r\n    }\r\n\r\n    public async overrideDocument(document: any, properties: Object, databaseName) {\r\n        properties[C8oFullSync.FULL_SYNC__REV] = document._rev;\r\n        let c8oFullSyncDatabase: C8oFullSyncDatabase;\r\n        try {\r\n            c8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(databaseName);\r\n        } catch (err) {\r\n            throw new C8oException(C8oExceptionMessage.fullSyncGetOrCreateDatabase(databaseName));\r\n        }\r\n\r\n        c8oFullSyncDatabase.getdatabase().put(properties)\r\n            .catch((err) => {\r\n                throw new C8oException(err.message, err);\r\n            });\r\n\r\n    }\r\n\r\n    public async getResponseFromLocalCache(c8oCallRequestIdentifier: string): Promise<any> {\r\n        const fullSyncDatabase = await this.getOrCreateFullSyncDatabase(C8oCore.LOCAL_CACHE_DATABASE_NAME, true);\r\n        let localCacheDocument = null;\r\n        return new Promise((resolve, reject) => {\r\n            fullSyncDatabase.getdatabase.get(c8oCallRequestIdentifier).then((result) => {\r\n                localCacheDocument = result;\r\n\r\n                const response = JSON.stringify(localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE]);\r\n                const responseType = localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE];\r\n                const expirationDate = localCacheDocument[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE];\r\n\r\n                let responseString: string = null;\r\n                let responseTypeString: string = null;\r\n                let expirationDateNumber: number = -1;\r\n\r\n                if (response != null) {\r\n                    if (typeof response === \"string\") {\r\n                        responseString = response;\r\n                    } else {\r\n                        reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                    }\r\n                }\r\n                if (responseType != null) {\r\n                    if (typeof responseType === \"string\") {\r\n                        responseTypeString = responseType;\r\n                    } else {\r\n                        reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                    }\r\n                }\r\n                if (expirationDate != null) {\r\n                    if (typeof expirationDate === \"number\") {\r\n                        expirationDateNumber = expirationDate;\r\n                        const currentTime = new Date().getTime();\r\n                        if (expirationDateNumber < currentTime) {\r\n                            reject(new C8oUnavailableLocalCacheException(C8oExceptionMessage.timeToLiveExpired()));\r\n                        }\r\n                    } else {\r\n                        reject(new C8oException(C8oExceptionMessage.InvalidLocalCacheResponseInformation()));\r\n                    }\r\n                }\r\n                resolve(new C8oLocalCacheResponse(responseString, responseTypeString, expirationDateNumber));\r\n            }).catch((err) => {\r\n                if (err.status === 404) {\r\n                    resolve(new C8oUnavailableLocalCacheException(C8oExceptionMessage.localCacheDocumentJustCreated(), err));\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    public async saveResponseToLocalCache(c8oCallRequestIdentifier: string, localCacheResponse: C8oLocalCacheResponse): Promise<any> {\r\n        const fullSyncDatabase: C8oFullSyncDatabase = await this.getOrCreateFullSyncDatabase(C8oCore.LOCAL_CACHE_DATABASE_NAME,true);\r\n        return new Promise((resolve) => {\r\n            fullSyncDatabase.getdatabase.get(c8oCallRequestIdentifier).then((localCacheDocument) => {\r\n                const properties = {};\r\n                properties[C8oFullSync.FULL_SYNC__ID] = c8oCallRequestIdentifier;\r\n                properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE] = localCacheResponse.getResponse();\r\n                properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE] = localCacheResponse.getResponseType();\r\n                if (localCacheResponse.getExpirationDate() > 0) {\r\n                    properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE] = localCacheResponse.getExpirationDate();\r\n                }\r\n                const currentRevision = localCacheDocument._rev;\r\n                if (currentRevision !== null) {\r\n                    properties[C8oFullSyncCbl.FULL_SYNC__REV] = currentRevision;\r\n                }\r\n                fullSyncDatabase.getdatabase.put(properties).then((result) => {\r\n                    resolve(result);\r\n                });\r\n            }).catch((error) => {\r\n                if (error.status === 404) {\r\n                    const properties = {};\r\n                    properties[C8oFullSync.FULL_SYNC__ID] = c8oCallRequestIdentifier;\r\n                    properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE] = localCacheResponse.getResponse();\r\n                    properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE] = localCacheResponse.getResponseType();\r\n                    if (localCacheResponse.getExpirationDate() > 0) {\r\n                        properties[C8oCore.LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE] = localCacheResponse.getExpirationDate();\r\n                    }\r\n                    fullSyncDatabase.getdatabase.put(properties).then((result) => {\r\n                        resolve(result);\r\n                    });\r\n                } else {\r\n                    resolve(error);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public async addFullSyncChangeListener(db: string, listener: C8oFullSyncChangeListener, parameters: Object = {}) {\r\n        if (db === null || db === \"\") {\r\n            db = this.c8o.defaultDatabaseName;\r\n        }\r\n\r\n        const listeners: C8oFullSyncChangeListener[][] = [];\r\n        if (this.fullSyncChangeListeners[db] != null) {\r\n            listeners[0] = this.fullSyncChangeListeners[db];\r\n        } else {\r\n            listeners[0] = [];\r\n            this.fullSyncChangeListeners[db] = listeners[0];\r\n            if(parameters[\"since\"] == undefined){\r\n                parameters[\"since\"] =  \"now\";\r\n            }\r\n            if(parameters[\"live\"] == undefined){\r\n                parameters[\"live\"] =  true;\r\n            }\r\n            if(parameters[\"include_docs\"] == undefined){\r\n                parameters[\"include_docs\"] =  true;\r\n            }\r\n            //noinspection UnnecessaryLocalVariableJS\r\n            const evtHandler = (await this.getOrCreateFullSyncDatabase(db)).getdatabase\r\n                .changes(parameters).on(\"change\", function (change) {\r\n                    const changes: Object = {};\r\n                    const docs: Object[] = [];\r\n                    // docs[\"isExternal\"] = false;\r\n                    const doc: Object = {};\r\n                    doc[\"id\"] = change.doc._id;\r\n                    doc[\"rev\"] = change.doc._rev;\r\n                    doc[\"isConflict\"] = change.doc._conflicts;\r\n                    if (change.source != null) {\r\n                        doc[\"sourceUrl\"] = change.source;\r\n                    }\r\n                    docs.push(doc);\r\n                    changes[\"changes\"] = docs;\r\n                    for (const handler of listeners[0]) {\r\n                        if (handler !== undefined) {\r\n                            handler.onChange(changes);\r\n                        }\r\n                    }\r\n\r\n                });\r\n            this.cblChangeListeners[db] = evtHandler;\r\n        }\r\n        listeners[0].push(listener);\r\n    }\r\n\r\n    public async removeFullSyncChangeListener(db: string, listener: C8oFullSyncChangeListener) {\r\n        if (db === null || db === \"\") {\r\n            db = this.c8o.defaultDatabaseName;\r\n        }\r\n        if (this.fullSyncChangeListeners[db] != null) {\r\n            const listeners: C8oFullSyncChangeListener[] = this.fullSyncChangeListeners[db];\r\n            for (const list in listeners) {\r\n                if (listeners[list] === listener) {\r\n                    delete listeners[list];\r\n                }\r\n            }\r\n            if (listeners.length === 0 || listeners == null) {\r\n                (await this.getOrCreateFullSyncDatabase(db)).getdatabase.cancel();\r\n                this.cblChangeListeners[db].cancel();\r\n                delete this.fullSyncChangeListeners[db];\r\n                delete this.cblChangeListeners[db];\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {C8oException} from \"./Exception/c8oException\";\r\nimport {Priority} from \"./priority.service\";\r\n\r\nexport class C8oLocalCache {\r\n    public static PARAM: string = \"__localCache\";\r\n    public priority: Priority;\r\n    public ttl: number;\r\n    public enabled: boolean;\r\n\r\n    constructor(priority: Priority, ttl: number = -1, enabled: boolean = true) {\r\n        if (priority == null) {\r\n            throw new C8oException(\"Local Cache priority cannot be null\");\r\n        }\r\n        this.priority = priority;\r\n        this.ttl = ttl;\r\n        this.enabled = enabled;\r\n    }\r\n\r\n}\r\n","export class C8oTranslator {\r\n    public static stringToJSON(jsonValueString): JSON {\r\n        return JSON.parse(jsonValueString);\r\n    }\r\n}\r\n","import {C8oException} from \"./c8oException\";\r\n\r\n/**\r\n * Thrown during an HTTP request.\r\n */\r\nexport class C8oHttpRequestException extends C8oException {\r\n    public originalException: any;\r\n\r\n    constructor(message: string);\r\n    constructor(message: string, cause: Error);\r\n    constructor(message: string, cause: any = null) {\r\n        super(message, cause);\r\n        this.originalException = cause;\r\n        // Since typescript 2.1.1 we have to set the prototype explicitly.\r\n        Object.setPrototypeOf(this, C8oHttpRequestException.prototype);\r\n\r\n    }\r\n}","import {C8oCore} from \"./c8oCore\";\r\nimport {C8oFullSync, C8oFullSyncCbl} from \"./c8oFullSync\";\r\nimport {C8oLocalCache} from \"./c8oLocalCache\";\r\nimport {C8oLocalCacheResponse} from \"./c8oLocalCacheResponse\";\r\nimport {C8oResponseJsonListener, C8oResponseListener} from \"./c8oResponse\";\r\nimport {C8oTranslator} from \"./c8oTranslator\";\r\nimport {C8oUtilsCore} from \"./c8oUtilsCore\";\r\nimport {C8oException} from \"./Exception/c8oException\";\r\nimport {C8oExceptionListener} from \"./Exception/c8oExceptionListener\";\r\nimport {C8oExceptionMessage} from \"./Exception/c8oExceptionMessage\";\r\nimport {C8oHttpRequestException} from \"./Exception/c8oHttpRequestException\";\r\nimport {C8oUnavailableLocalCacheException} from \"./Exception/c8oUnavailableLocalCacheException\";\r\n\r\nexport class C8oCallTask {\r\n    private c8o: C8oCore;\r\n    private _parameters: Object;\r\n    private c8oResponseListener: C8oResponseListener;\r\n    private c8oExceptionListener: C8oExceptionListener;\r\n    private c8oCallUrl: string;\r\n\r\n    public get parameters() {\r\n        return this._parameters;\r\n    }\r\n\r\n    public set parameters(value: any) {\r\n        this._parameters = value;\r\n    }\r\n\r\n    constructor(c8o: C8oCore, parameters: Object, c8oResponseListener: C8oResponseListener, c8oExceptionListener: C8oExceptionListener) {\r\n        this.c8o = c8o;\r\n        this.parameters = parameters;\r\n        this.c8oResponseListener = c8oResponseListener;\r\n        this.c8oExceptionListener = c8oExceptionListener;\r\n\r\n        c8o.log.logMethodCall(\"C8oCallTask\", parameters, c8oResponseListener, c8oExceptionListener);\r\n    }\r\n\r\n    // called execute() in others SDK...\r\n    public run() {\r\n        try {\r\n            this.handleRequest().then((response) => {\r\n                this.handleResponse(response);\r\n            }).catch((error) => {\r\n                this.c8oExceptionListener.onException(error, this.parameters);\r\n            });\r\n        } catch (error) {\r\n            this.c8oExceptionListener.onException(error, this.parameters);\r\n        }\r\n    }\r\n\r\n    public executeFromLive() {\r\n        delete this.parameters[C8oCore.FS_LIVE];\r\n        this.parameters[C8oCore.ENGINE_PARAMETER_FROM_LIVE] = true;\r\n        this.run();\r\n    }\r\n\r\n    public async handleRequest(): Promise<any> {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const isFullSyncRequest: boolean = C8oFullSync.isFullSyncRequest(this.parameters);\r\n                if (isFullSyncRequest) {\r\n                    this.c8o.log._trace(\"Is FullSync request\");\r\n\r\n                    // FS_LIVE\r\n                    const liveid = C8oUtilsCore.getParameterStringValue(this.parameters, C8oCore.FS_LIVE, false);\r\n                    if (liveid !== null) {\r\n                        const dbName: string = (C8oUtilsCore.getParameterStringValue(this.parameters, C8oCore.ENGINE_PARAMETER_PROJECT, true) as string).substring(C8oFullSync.FULL_SYNC_PROJECT.length);\r\n                        this.c8o.addLive(liveid, dbName, this);\r\n                    }\r\n                    await this.c8o.c8oFullSync.handleFullSyncRequest(this.parameters, this.c8oResponseListener)\r\n                        .then(\r\n                            (result) => {\r\n                                resolve(result);\r\n                            })\r\n                        .catch(\r\n                            (error) => {\r\n                                if (error instanceof C8oException) {\r\n                                    reject(error);\r\n                                } else {\r\n                                    reject(new C8oException(C8oExceptionMessage.handleFullSyncRequest(), error));\r\n                                }\r\n                            });\r\n                } else {\r\n                    let responseType: string = \"\";\r\n                    if (this.c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                        responseType = C8oCore.RESPONSE_TYPE_JSON;\r\n                    } else {\r\n                        // Return an Exception because the C8oListener used is unknown\r\n                        reject(new C8oException(C8oExceptionMessage.wrongListener(this.c8oResponseListener)));\r\n                    }\r\n                    let c8oCallRequestIdentifier: string = null;\r\n                    const localCache: C8oLocalCache = C8oUtilsCore.getParameterObjectValue(this.parameters, C8oLocalCache.PARAM, false);\r\n                    let localCacheEnabled: boolean = false;\r\n\r\n                    if (localCache != null) {\r\n                        if (localCacheEnabled !== undefined) {\r\n                            delete this.parameters[C8oLocalCache.PARAM];\r\n                            localCacheEnabled = localCache.enabled;\r\n                            if (localCacheEnabled) {\r\n                                try {\r\n                                    c8oCallRequestIdentifier = C8oUtilsCore.identifyC8oCallRequest(this.parameters, responseType);\r\n                                } catch (error) {\r\n                                    reject(new C8oException(C8oExceptionMessage.serializeC8oCallRequest(), error));\r\n                                }\r\n                                // here we are not testing if localcahe is available.\r\n                                // if connection is not available this will generates an exception that will be caught\r\n                                if (localCache.priority.isAvailable) {\r\n                                    try {\r\n                                        const result = await (this.c8o.c8oFullSync as C8oFullSyncCbl).getResponseFromLocalCache(c8oCallRequestIdentifier);\r\n                                        if (result instanceof C8oUnavailableLocalCacheException) {\r\n                                            // no entry\r\n                                        } else {\r\n                                            const localCacheResponse: C8oLocalCacheResponse = (result as C8oLocalCacheResponse);\r\n\r\n                                            if (!localCacheResponse.isExpired()) {\r\n                                                if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                                    resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                                    return;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    } catch (error) {\r\n                                        if (error instanceof C8oUnavailableLocalCacheException) {\r\n                                            // no entry\r\n                                        } else {\r\n                                            reject(error);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    // Get Response\r\n                    this.parameters[C8oCore.ENGINE_PARAMETER_DEVICE_UUID] = await this.c8o.deviceUUID;\r\n                    this.c8oCallUrl = this.c8o.endpoint + \"/.\" + responseType;\r\n                    let params: Object = new Object();\r\n                    params = Object.assign(params, this.parameters);\r\n                    await this.c8o.httpInterface.handleRequest(this.c8oCallUrl, params, this.c8oResponseListener,\r\n                    ).catch(\r\n                        async (error) => {\r\n                            if (localCacheEnabled) {\r\n                                await (this.c8o.c8oFullSync as C8oFullSyncCbl).getResponseFromLocalCache(c8oCallRequestIdentifier,\r\n                                ).then(\r\n                                    (localCacheResponse: C8oLocalCacheResponse) => {\r\n                                        try {\r\n                                            if (!localCacheResponse.isExpired()) {\r\n                                                if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                                    resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                                }\r\n                                            }\r\n                                        } catch (error) {\r\n                                            // no entry\r\n                                        }\r\n                                    });\r\n                            }\r\n                            if (error.status === 0) {\r\n                                reject(new C8oHttpRequestException(\"ERR_INTERNET_DISCONNECTED\", error));\r\n                            } else {\r\n                                reject(error);\r\n                            }\r\n                        }).then(\r\n                        async (result) => {\r\n                            if (result !== undefined) {\r\n                                let isErrorR = result[\"error\"] != undefined ? result[\"error\"][\"code\"] != undefined ? result[\"error\"][\"message\"] != undefined ? result[\"error\"][\"details\"] != undefined? true: false :false : false : false;\r\n                                let isErrorDoc = result[\"document\"] != undefined ? result[\"document\"][\"error\"] != undefined ? result[\"document\"][\"error\"][\"code\"] != undefined ? result[\"document\"][\"error\"][\"message\"] != undefined ? result[\"document\"][\"error\"][\"details\"] != undefined? true: false :false : false : false: false;\r\n                                let isError = (isErrorR || isErrorDoc);\r\n                                if(isError){\r\n                                    if (localCacheEnabled) {\r\n                                        await (this.c8o.c8oFullSync as C8oFullSyncCbl).getResponseFromLocalCache(c8oCallRequestIdentifier,\r\n                                        ).then(\r\n                                            (localCacheResponse: C8oLocalCacheResponse) => {\r\n                                                try {\r\n                                                    if (!localCacheResponse.isExpired()) {\r\n                                                        if (responseType === C8oCore.RESPONSE_TYPE_JSON) {\r\n                                                            resolve(C8oTranslator.stringToJSON(localCacheResponse.getResponse()));\r\n                                                        }\r\n                                                    }\r\n                                                } catch (error) {\r\n                                                    // no entry\r\n                                                }\r\n                                            });\r\n                                    }\r\n                                    if(this.c8o.errorConvertigoIntoFail){\r\n                                        reject(result);\r\n                                    }\r\n                                    else{\r\n                                        resolve(result);\r\n                                    }\r\n                                    \r\n                                }\r\n                                else{\r\n                                    let response: any;\r\n                                    let responseString: string;\r\n                                    if (this.c8oResponseListener instanceof C8oResponseJsonListener) {\r\n                                        try {\r\n                                            try {\r\n                                                responseString = result;\r\n                                            } catch (error) {\r\n                                                reject(new C8oException(C8oExceptionMessage.parseInputStreamToString(), error));\r\n                                            }\r\n                                            response = result;\r\n                                        } catch (error) {\r\n                                            reject(error);\r\n                                        }\r\n                                    } else {\r\n                                        reject(new C8oException(C8oExceptionMessage.wrongListener(this.c8oResponseListener)));\r\n                                    }\r\n                                    if (localCacheEnabled) {\r\n                                        try {\r\n                                            let expirationDate: number = -1;\r\n                                            if (localCache.ttl > 0) {\r\n                                                expirationDate = localCache.ttl + (new Date).getTime();\r\n                                            }\r\n                                            const localCacheResponse: C8oLocalCacheResponse = new C8oLocalCacheResponse(responseString, responseType, expirationDate);\r\n                                            const p1 = await (this.c8o.c8oFullSync as C8oFullSyncCbl).saveResponseToLocalCache(c8oCallRequestIdentifier, localCacheResponse);\r\n                                            Promise.all([p1])\r\n                                                .then(() => {\r\n                                                    resolve(response);\r\n                                                });\r\n                                            \r\n                                        } catch (error) {\r\n                                            reject(new C8oException(C8oExceptionMessage.saveResponseToLocalCache()));\r\n                                        }\r\n                                    }\r\n                                    resolve(response);\r\n                                }\r\n\r\n\r\n\r\n\r\n                                    \r\n                            }\r\n                        });\r\n                }\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private handleResponse(result: any) {\r\n        try {\r\n            if (this.c8oResponseListener === null) {\r\n                return;\r\n            } else if (result instanceof Error || result instanceof C8oException) {\r\n                this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, result);\r\n            } else if (result instanceof Object) {\r\n                this.c8o.log.logC8oCallJSONResponse(result, this.c8oCallUrl, this.parameters);\r\n                (this.c8oResponseListener as C8oResponseJsonListener).onJsonResponse(result, this.parameters);\r\n            } else {\r\n                this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, new C8oException(C8oExceptionMessage.wrongResult(result)));\r\n            }\r\n        } catch (error) {\r\n            this.c8o.handleCallException(this.c8oExceptionListener, this.parameters, error);\r\n        }\r\n    }\r\n}\r\n","export class C8oFullSyncChangeListener {\r\n    private _onchange: (changes: Object) => void;\r\n    constructor(change: (changes: Object) => void) {\r\n        this._onchange = change;\r\n    }\r\n     public onChange(changes) {\r\n         this._onchange(changes);\r\n     }\r\n }\r\n","import { Observable } from \"rxjs\";\r\nimport {C8oCore} from \"./c8oCore\";\r\nimport {C8oProgress} from \"./c8oProgress\";\r\n\r\nexport class C8oPromise<T> {\r\n    private c8o: C8oCore;\r\n    private c8oResponse: (response: T, parameters: Object) => C8oPromise<T>;\r\n    private c8oProgress: (C8oProgress) => C8oPromise<T>;\r\n    private c8oFail: (error: Error, parameters: Object) => C8oPromise<T>;\r\n    private nextPromise: C8oPromise<T>;\r\n\r\n    private lastResponse: T;\r\n    private lastFailure: Error;\r\n    private lastParameters: Object;\r\n\r\n    constructor(c8o: C8oCore) {\r\n        this.c8o = c8o;\r\n    }\r\n\r\n    public async(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.then((response, parameters) => {\r\n                resolve(response);\r\n                return null;\r\n            }).fail((error: Error, parameters: Object) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    public toObservable(): Observable<any> {\r\n        return new Observable(\r\n            (observer)=> {\r\n                this.then((response, parameters) => {\r\n                    if(parameters[\"__live\"] == true || parameters[\"continuous\"] == true){\r\n                        observer.next({response: response, parameters: parameters});\r\n                    }\r\n                    else{\r\n                        observer.next({response: response, parameters: parameters});\r\n                        observer.complete()\r\n                    }\r\n                    return null;\r\n                })\r\n                .progress((progress)=>{\r\n                    observer.next(progress);\r\n                })\r\n                .fail((error: Error, parameters: Object) => {\r\n                    observer.error(error);\r\n                });\r\n            });\r\n    }\r\n\r\n    public then(c8oOnResponse: (response: T, parameters: Object) => C8oPromise<T>) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.then(c8oOnResponse);\r\n        } else {\r\n            this.c8oResponse = c8oOnResponse;\r\n            this.nextPromise = new C8oPromise<T>(this.c8o);\r\n            if (this.lastFailure != null) {\r\n                this.nextPromise.lastFailure = this.lastFailure;\r\n                this.nextPromise.lastParameters = this.lastParameters;\r\n\r\n            }\r\n            if (this.lastResponse != null) {\r\n                this._onResponse();\r\n            }\r\n            return this.nextPromise;\r\n        }\r\n\r\n    }\r\n\r\n    public progress(c8oOnProgress: (C8oProgress: C8oProgress) => C8oPromise<T>) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.progress(c8oOnProgress);\r\n        } else {\r\n            this.c8oProgress = c8oOnProgress;\r\n            this.nextPromise = new C8oPromise<T>(this.c8o);\r\n            return this.nextPromise;\r\n        }\r\n    }\r\n\r\n    public fail(c8oOnFail: (error: Error, parameters: Object) => C8oPromise<T>) {\r\n        if (this.nextPromise != null) {\r\n            return this.nextPromise.fail(c8oOnFail);\r\n        } else {\r\n            this.c8oFail = c8oOnFail;\r\n            this.nextPromise = new C8oPromise<T>(this.c8o);\r\n            if (this.lastFailure != null) {\r\n                this.onFailure(this.lastFailure, this.lastParameters);\r\n            }\r\n            return this.nextPromise;\r\n        }\r\n    }\r\n\r\n    private _onResponse() {\r\n        try {\r\n            if (this.c8oResponse != null) {\r\n                const promise: Array<C8oPromise<T>> = new Array<C8oPromise<T>>(0);\r\n                promise.push(this.c8oResponse(this.lastResponse, this.lastParameters));\r\n                if (promise[0] != null) {\r\n                    if (this.nextPromise != null) {\r\n                        let lastPromise: C8oPromise<T> = promise[0];\r\n                        while (lastPromise.nextPromise != null) {\r\n                            lastPromise = lastPromise.nextPromise;\r\n                        }\r\n                        lastPromise.nextPromise = this.nextPromise;\r\n                    }\r\n                    this.nextPromise = promise[0];\r\n                } else if (this.nextPromise != null) {\r\n                    this.nextPromise.onResponse(this.lastResponse, this.lastParameters);\r\n                }\r\n            } else if (this.nextPromise != null) {\r\n                this.nextPromise.onResponse(this.lastResponse, this.lastParameters);\r\n            } else {\r\n                // Response received and no handler\r\n            }\r\n        } catch (error) {\r\n            this.onFailure(error, this.lastParameters);\r\n        }\r\n    }\r\n\r\n    public onResponse(response: T, parameters: Object) {\r\n        if ((this.lastResponse != null || this.lastResponse !== undefined) && parameters[C8oCore.ENGINE_PARAMETER_FROM_LIVE] === undefined) {\r\n            if (this.nextPromise != null || this.nextPromise !== undefined) {\r\n                this.nextPromise.onResponse(response, parameters);\r\n            }\r\n        } else {\r\n            this.lastResponse = response;\r\n            this.lastParameters = parameters;\r\n            this._onResponse();\r\n        }\r\n    }\r\n\r\n    public onProgress(progress: C8oProgress) {\r\n        if (this.c8oProgress != null) {\r\n            this.c8oProgress(progress);\r\n        } else if (this.nextPromise != null) {\r\n            this.nextPromise.onProgress(progress);\r\n        }\r\n    }\r\n\r\n    public onFailure(error: Error, parameters: Object) {\r\n\r\n        this.lastFailure = error;\r\n        this.lastParameters = parameters;\r\n\r\n        if (this.c8oFail != null) {\r\n            this.c8oFail(this.lastFailure, parameters);\r\n        }\r\n        if (this.nextPromise != null) {\r\n            this.nextPromise.onFailure(this.lastFailure, parameters);\r\n        }\r\n    }\r\n}\r\n","export class C8oExceptionListener {\r\n    /**\r\n     * Called on thrown exceptions.\r\n     *\r\n     * @param exception - The thrown exception\r\n     */\r\n    public onException: (C8oException, Object) => void;\r\n\r\n    constructor(onException: (C8oException, Object) => void) {\r\n        this.onException = onException;\r\n    }\r\n}","export class C8oNetworkStatus {\r\n    public static Reachable : C8oNetworkStatus = \"Reachable\";\r\n    public static NotReachable : C8oNetworkStatus = \"NotReachable\";\r\n    public static Offline: C8oNetworkStatus = \"Offline\";\r\n\r\n}","import { C8oCore } from \"./c8oCore\";\r\nimport { C8oNetworkStatus } from \"./c8oNetworkStatus\"\r\n\r\nexport class C8oManagerNetwork {\r\n    private c8o: C8oCore;\r\n    private _status: C8oNetworkStatus;\r\n    private _listen = false;\r\n\r\n    constructor(c8o: C8oCore) {\r\n        this.c8o = c8o;\r\n    }\r\n\r\n    /**\r\n     * init NetworkManager\r\n     */\r\n    public async init(){\r\n        this.listen();\r\n        let reachable = await this.checkReachable();\r\n        let online = window.navigator.onLine;\r\n        this.status = (reachable == true ? C8oNetworkStatus.Reachable : (online == true? C8oNetworkStatus.NotReachable : C8oNetworkStatus.Offline));\r\n    }\r\n\r\n    /**\r\n     * Set network status, and notify if its had change\r\n     * @params c8oNetworkStatus : C8oNetworkStatus\r\n     */\r\n    public set status(c8oNetworkStatus: C8oNetworkStatus){\r\n        // if the status has not changed do nothing\r\n        //this.c8o.log.warn(\"through set network status\")\r\n        if(this._status == c8oNetworkStatus){\r\n                return;    \r\n        }\r\n        this._status = c8oNetworkStatus;\r\n        this.c8o.subscriber_network.next(c8oNetworkStatus);\r\n        \r\n    }\r\n\r\n    /**\r\n     * get network status\r\n     * \r\n     * @returns C8oNetworkStatus\r\n     */\r\n    public get status(){\r\n        return this._status;\r\n    }\r\n\r\n\r\n    private async listen() {\r\n        if(this._listen == false){\r\n            this._listen = true;\r\n            window.addEventListener(\"online\", () => {\r\n                this.processOnline();\r\n    \r\n            }, false);\r\n            window.addEventListener(\"offline\", () => {\r\n                this.processOffline();\r\n            }, false);\r\n    \r\n            this.c8o.subscriber_network.subscribe(async (res)=>{\r\n                this.c8o.log._debug(\"[handleNetworkEvents] Handle a network event: \" + res);\r\n                switch(res){\r\n                    case C8oNetworkStatus.Reachable:\r\n                        // check session status              \r\n                        this.c8o.session.doAuthReachable();\r\n                        this.c8o.database.restartReplications(\"anonymous\");\r\n                    break;\r\n                    case C8oNetworkStatus.NotReachable:\r\n                        this.c8o.database.stopReplications(this.c8o.session.user.name);\r\n                        this.c8o.database.stopReplications(\"anonymous\");\r\n                    break;\r\n                    case C8oNetworkStatus.Offline:\r\n                        this.c8o.database.stopReplications(this.c8o.session.user.name);\r\n                        this.c8o.database.stopReplications(\"anonymous\");\r\n                    break;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    private async processOnline(){\r\n        let reachable = await this.checkReachable();\r\n        if(reachable){\r\n            this.status = C8oNetworkStatus.Reachable;\r\n        }\r\n        else{\r\n            this.status = C8oNetworkStatus.NotReachable;\r\n        }\r\n    }\r\n\r\n    private async processOffline(){\r\n        this.status = C8oNetworkStatus.Offline;\r\n    }\r\n\r\n    public async checkReachable(): Promise<boolean> {\r\n        try {\r\n            let r = await this.c8o.c8oLogger.logTest();\r\n            return true;\r\n        }\r\n        catch{\r\n            return false;\r\n        }\r\n    }\r\n}","\r\nexport class C8oSessionStatus {\r\n    public static Connected : C8oSessionStatus = 1;\r\n    public static HasBeenConnected : C8oSessionStatus = 2;\r\n    public static HasBeenDisconnected: C8oSessionStatus = 3;\r\n    public static Disconnected: C8oSessionStatus = 4;\r\n    public static Ignore: C8oSessionStatus = 5;\r\n    public static HasBeenConnectedToAnother: C8oSessionStatus = 5;\r\n}","import { C8oResponseListener } from \"./c8oResponse\";\r\nimport { C8oSessionUser } from \"./C8oSessionUser\";\r\n\r\nexport class C8oReplicationStatus{\r\n    public user: C8oSessionUser;\r\n    public listener: C8oResponseListener;\r\n    public parameters: Object;\r\n    public type: String;\r\n    public authenticated: boolean;\r\n    public canceled: boolean;\r\n    public finished:boolean;\r\n    public id: string;\r\n    database: any;\r\n    constructor(user: C8oSessionUser, listener: C8oResponseListener, parameters: Object, type: string, authenticated: boolean, canceled: boolean,finished:boolean, fullSyncDatabase: any, id: string){\r\n        this.user = user;\r\n        this.listener = listener;\r\n        this.parameters = parameters;\r\n        this.type = type;\r\n        this.authenticated = authenticated;\r\n        this.canceled = canceled;\r\n        this.database = fullSyncDatabase;\r\n        this.finished = finished;\r\n        this.id = id;\r\n    }\r\n}","import { C8oCore } from \"./c8oCore\";\r\nimport { C8oResponseListener, C8oResponseJsonListener } from \"./c8oResponse\";\r\nimport { C8oSessionStatus } from \"./c8oSessionStatus\";\r\nimport {C8oReplicationStatus} from \"./C8oReplicationStatus\";\r\nimport { C8oNetworkStatus } from \"./c8oNetworkStatus\";\r\nimport { Semaphore } from \"./c8oUtilsCore\";\r\n\r\ndeclare const require: any;\r\nexport class C8oManagerDatabase {\r\n    public c8o: C8oCore;\r\n    private replications: Object;\r\n    private mutexCreateReplication: Semaphore;\r\n\r\n    constructor(c8o: C8oCore) {\r\n        this.replications = new Object();\r\n        this.c8o = c8o;\r\n        this.mutexCreateReplication = new Semaphore(1);\r\n    }\r\n\r\n    public localName(baseName:string, log = false): string{\r\n        if(this.c8o.prefixBase){\r\n            if(log){\r\n                this.c8o.log._trace(\"Database will be seteed with prefix of user name\");\r\n            }\r\n            return this.c8o.session.user.name + \"_\"+ baseName;\r\n        }\r\n        else{\r\n            return baseName;\r\n        }\r\n    }\r\n\r\n    public get registeredReplications() {\r\n        return this.replications;\r\n    }\r\n\r\n    /**\r\n     * Register a request attaching it to the current user\r\n     * @param listener The listener for this request\r\n     * @param parameters The parameters of this request\r\n     * @param type The type of réplication (SYNC, PULL, PUSH)\r\n     */\r\n    registerRequest(listener: C8oResponseListener, parameters: Object, type: string, fullSyncDatabase, handler = null) {\r\n        let user = this.c8o.session.user;\r\n        if (this.replications[user.name] == null) {\r\n            this.replications[user.name] = new Array();\r\n        }\r\n\r\n        let authenticated: boolean = (this.c8o.session.status == (C8oSessionStatus.Connected || C8oSessionStatus.HasBeenConnected));\r\n        let canceled: boolean = (this.c8o.network.status != C8oNetworkStatus.Reachable);\r\n        let id = new Date().getTime()+\"_\"+(\"\"+Math.random()).substring(2);\r\n        let rep = new C8oReplicationStatus(user, listener, parameters, type, authenticated, canceled, false, fullSyncDatabase, id);\r\n        handler = () => {\r\n            rep.finished = true;\r\n        }\r\n        this.replications[user.name].push(rep);\r\n        return [canceled, handler, id];\r\n    }\r\n\r\n    public cancelAndPopRequest(id){\r\n        var user = this.c8o.session.user;\r\n        for (var i in this.replications[user.name]) {\r\n            if(this.replications[user.name][i].id == id){\r\n                this.c8o.log._debug(\"[c8oManagerDatabase] cancelAndPopRequest => canceling  and removing replication: \" +this.replications[user.name][i].database.getdatabase.name);\r\n                let repToCancel = this.replications[user.name][i].database.syncFullSyncReplication.replication;\r\n                repToCancel.cancel();\r\n                this.replications[user.name].splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        this.c8o.log._debug(\"[c8oManagerDatabase] cancelAndPopRequest => done, replication still actives: \" +JSON.stringify(this.replications[user.name].map(x=> x.database.getdatabase.name)));\r\n    }\r\n\r\n    public cancelAllForbase(baseName){\r\n        var user = this.c8o.session.user;\r\n        for (var i in this.replications[user.name]) {\r\n            if(this.replications[user.name][i].databaseName == baseName){\r\n                this.replications[user.name].splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restart all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    async restartReplications(user: string) {\r\n        if (this.replications[user] != undefined) {\r\n            var lastsDistinctsReps = {};\r\n            this.replications[user].forEach((rep)=>{lastsDistinctsReps[rep.database.databaseName] = rep});\r\n            this.replications[user] = Object.keys(lastsDistinctsReps).map(e => lastsDistinctsReps[e]);\r\n\r\n            for(let i in lastsDistinctsReps){\r\n                let rep =  lastsDistinctsReps[i];\r\n                if (rep.database != null) {\r\n                    if (rep.canceled == true) {\r\n                        if (rep.finished != true) {\r\n                            switch (rep.type) {\r\n                                case \"sync\":\r\n                                    this.mutexCreateReplication.acquire();\r\n                                    this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb sync \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                    let handler1 = () => {\r\n                                        rep.finished = true;\r\n                                    }\r\n                                    rep.finished = false;\r\n                                    rep.canceled = false;\r\n                                    rep.manual_canceled = false;\r\n                                    rep.database.startAllReplications(rep.parameters, rep.listener, handler1, rep.id, this.mutexCreateReplication);\r\n                                    break;\r\n                                case \"push\":\r\n                                    this.mutexCreateReplication.acquire();\r\n                                    this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb push \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                    let handler2 = () => {\r\n                                        rep.finished = true;\r\n                                    }\r\n                                    rep.finished = false;\r\n                                    rep.canceled = false;\r\n                                    rep.manual_canceled = false;\r\n                                    rep.database.startPushReplication(rep.parameters, rep.listener, handler2, rep.id, this.mutexCreateReplication);\r\n\r\n                                    break;\r\n                                case \"pull\":\r\n                                    this.mutexCreateReplication.acquire();\r\n                                    this.c8o.log._trace(\"[restartStoppedReplications] restarting replication for database \" + rep.database.getdatabseName + \" and verb pull \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                    let handler3 = () => {\r\n                                        rep.finished = true;\r\n                                    }\r\n                                    rep.canceled = false;\r\n                                    rep.finished = false;\r\n                                    rep.manual_canceled = false;\r\n                                    rep.database.startPullReplication(rep.parameters, rep.listener, handler3, rep.id, this.mutexCreateReplication);\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Stop all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    stopReplications(user: string) {\r\n        if (this.replications[user] != undefined) {\r\n            for (let rep of this.replications[user]) {\r\n                if (rep.database != null) {\r\n                    if (rep.finished != true) {\r\n                        switch (rep.type) {\r\n                            case \"sync\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb sync \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelSyncReplication();\r\n                                break;\r\n                            case \"push\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb push \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelPushReplication();\r\n                                break;\r\n                            case \"pull\":\r\n                                this.c8o.log._trace(\"[stopReplications] stopping replication for database \" + rep.database.getdatabseName + \" and verb pull \" + (rep.parameters[\"continuous\"] == true ? \"in continous mode\" : \"since replication was not finished\"));\r\n                                rep.canceled = true;\r\n                                rep.database.cancelPullReplication();\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove state an delte top all replications for a given user\r\n     * @param user The name of the user\r\n     */\r\n    removeReplications(user: string) {\r\n        this.stopReplications(user);\r\n        delete this.replications[user];\r\n        this.c8o.log._trace(\"[removeReplications] replications for user \" + user + \"has been removed and stopped\");\r\n    }\r\n\r\n}","import {C8oCore} from \"./c8oCore\";\r\nimport { C8oSessionStatus } from \"./c8oSessionStatus\";\r\nimport { Semaphore, C8oUtilsCore } from './c8oUtilsCore';\r\ndeclare const require: any;\r\ndeclare const Buffer;\r\nexport class C8oManagerLogin {\r\n    public c8o: C8oCore;\r\n    private requestLogin;\r\n    private mutexL : Semaphore;\r\n    \r\n    constructor(c8o: C8oCore) {\r\n        this.c8o = c8o;\r\n        this.mutexL = new Semaphore(1);\r\n    }\r\n    public async setRequestLogin(url: string, parameters: Object, headers: Object, id: string){\r\n        if(url != null && parameters != null && headers != null){\r\n            this.requestLogin = {url: url, parameters: parameters, headers: headers};\r\n        }\r\n        if(id != null && this.requestLogin != undefined){\r\n        /**  must encrypt and save requestLogin there **/\r\n\r\n        //define buffer to save\r\n        const data = Buffer.from(JSON.stringify(this.requestLogin), 'utf-8');\r\n        // generate random iv and store it\r\n        const iv: any = crypto.getRandomValues(new Uint8Array(16));\r\n        window[\"localStorage\"][\"setItem\"](\"_c8o_iv\", Buffer.from(iv).toString('utf-8'));\r\n        // get key and hash it 128 bits\r\n        const key = C8oUtilsCore.MD5ArrayBuffer(id);\r\n        // defined key\r\n        const key_encoded = await crypto.subtle.importKey(  \"raw\",    <any>key.buffer,   'AES-CTR' ,  false,   [\"encrypt\", \"decrypt\"]);\r\n        // encrypt data\r\n        const encrypted_content = await window.crypto.subtle.encrypt(\r\n            {\r\n              name: \"AES-CTR\",\r\n              counter: iv,\r\n              length: 128\r\n            },\r\n            key_encoded,\r\n            data\r\n        );\r\n        // store encrypted data\r\n        window.localStorage.setItem(\"_c8o_secret\", Buffer.from(encrypted_content).toString('utf-8'));\r\n        }    \r\n    }\r\n    public async defineRequestLogin(id){\r\n        //if requestLogin is'nt into this.requestLogin, get it and assign it to requestLogin from local encrypted data.\r\n        try{\r\n            if(this.requestLogin == undefined && window[\"localStorage\"][\"getItem\"](\"_c8o_secret\") != undefined){\r\n                const iv: any = Buffer.from(window[\"localStorage\"][\"getItem\"](\"_c8o_iv\"), 'utf-8');\r\n                const key = C8oUtilsCore.MD5ArrayBuffer(id);\r\n                const encrypted_content = Buffer.from(window.localStorage.getItem(\"_c8o_secret\"), 'utf-8');\r\n                const key_encoded = await crypto.subtle.importKey(  \"raw\",    <any>key.buffer,   'AES-CTR' ,  false,   [\"encrypt\", \"decrypt\"]);\r\n                const decrypted_content: any  = await window.crypto.subtle.decrypt(\r\n                    {\r\n                      name: \"AES-CTR\",\r\n                      counter: iv,\r\n                      length: 128\r\n                    },\r\n                    key_encoded,\r\n                    encrypted_content\r\n                );\r\n                this.requestLogin = JSON.parse(Buffer.from(decrypted_content).toString('utf-8'));\r\n            }\r\n        }\r\n        catch(e){\r\n            this.c8o.log.error(\"[C8oManagerLogin][defineRequestLogin], failed to define request login\", e);\r\n        }\r\n    }\r\n    \r\n\r\n    public doLogin(): Promise<any>{\r\n        return new Promise((res)=>{\r\n            this.mutexL.acquire();\r\n            if(!(this.c8o.session.status == C8oSessionStatus.Connected || this.c8o.session.status == C8oSessionStatus.HasBeenConnected)){\r\n                if(this.requestLogin !=  undefined){\r\n                    let resolve = (response)=>{\r\n                        if(response.headers.get(\"X-Convertigo-Authenticated\") != undefined){\r\n                            this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins works\");\r\n                            this.c8o.subscriber_login.next({status:true, response: response.body, error: null})\r\n                            res({status:true, urlReq:this.requestLogin.url, parameters:this.requestLogin.parameters, headers: this.requestLogin.headers, response: response.response});\r\n                        }\r\n                        else{\r\n                            this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins failed\");\r\n                            res({status:false});\r\n                            this.c8o.subscriber_login.next({status:false, response: response.body, error: \"error, we are not authenticated\"})\r\n                            //this.c8o.subscriber_session.next();\r\n                        }\r\n                        this.mutexL.release();\r\n                        \r\n                    }\r\n                    let reject = (err)=>{\r\n                        this.c8o.log._debug(\"[C8oManagerLogin] Auto Logins failed\");\r\n                        res({status:false});\r\n                        this.c8o.subscriber_login.next({status:false, response: null, error: err})\r\n                        this.c8o.subscriber_session.next(null);\r\n                        this.mutexL.release();\r\n                    }\r\n                    this.c8o.httpInterface.execHttpPosts(this.requestLogin.url, this.requestLogin.parameters, this.requestLogin.headers, resolve, reject, true);\r\n                } \r\n            }\r\n            else{\r\n                this.c8o.log.warn(\"Into else\");\r\n            }\r\n             \r\n        })\r\n         \r\n    }\r\n\r\n    \r\n\r\n    \r\n}","\r\nexport  class C8oSessionUser{\r\n    public authenticated: boolean = false;\r\n    public groups = [];\r\n    public maxInactive: number = 0;\r\n    public sessionId: string = \"\";\r\n    public name: string = \"anonymous\";\r\n    public hash: string = \"\";\r\n\r\n    constructor(user = null){\r\n        if(user != null){\r\n            this.authenticated = user[\"authenticated\"] == true;\r\n            this.groups = user[\"groups\"] != undefined ? user[\"groups\"] : [];\r\n            this.maxInactive = user[\"maxInactive\"] != undefined ? user[\"maxInactive\"] : 0;\r\n            this.sessionId = user[\"session\"] != undefined ? user[\"session\"] : \"\";\r\n            this.name = user[\"user\"] != undefined ? user[\"user\"] : \"\";\r\n        }\r\n        \r\n    }\r\n}\r\n","import { C8oCore } from \"./c8oCore\";\r\nimport { C8oSessionStatus } from './c8oSessionStatus';\r\nimport { C8oUtilsCore, Semaphore } from './c8oUtilsCore';\r\nimport { C8oManagerLogin } from './c8oManagerLogin';\r\nimport { C8oSessionUser } from './C8oSessionUser';\r\nimport { stat } from \"fs\";\r\n\r\ndeclare const require: any;\r\nexport class C8oManagerSession {\r\n    public c8o: C8oCore;\r\n    private _status: C8oSessionStatus;\r\n    private id: string;\r\n    private loginManager: C8oManagerLogin;\r\n    private checker: any;\r\n    private _user: C8oSessionUser;\r\n    private _olduser: C8oSessionUser;\r\n    private ignored;\r\n    private resumeListener = undefined;\r\n    public mutex : Semaphore;\r\n    public mutexNetwork : Semaphore;\r\n    public mutexCheckSession : Semaphore;\r\n    private sessId : string;\r\n\r\n    constructor(c8o: C8oCore) {\r\n        // When the app begins, session is not connected*\r\n        this.c8o = c8o;\r\n        this._status = C8oSessionStatus.Disconnected;\r\n        this.loginManager = new C8oManagerLogin(c8o);\r\n        this.ignored = 0;\r\n        this._user = new C8oSessionUser();\r\n        this.mutex = new Semaphore(1);\r\n        this.mutexNetwork = new Semaphore(10000000000);\r\n        this.mutexCheckSession = new Semaphore(1);\r\n    }\r\n\r\n    /**\r\n     * Get status of the session\r\n     * \r\n     * @returns: C8oSessionStatus\r\n     * \r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    public get status(): C8oSessionStatus {\r\n        return this._status;\r\n    }\r\n\r\n    public set status(status:C8oSessionStatus) {\r\n        this._status = status;\r\n    }\r\n\r\n    /**\r\n     * Get status of the session\r\n     * \r\n     * @returns: C8oSessionStatus\r\n     * \r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    public get user(): C8oSessionUser {\r\n        return this._user;\r\n    }\r\n    /**\r\n     * Get previous status of the session\r\n     * \r\n     * @returns: C8oSessionStatus\r\n     * \r\n     * Can be:\r\n     * C8oSessionStatus.Connected\r\n     * C8oSessionStatus.HasBeenConnected\r\n     * C8oSessionStatus.HasBeenDisconnected\r\n     * C8oSessionStatus.Disconnected\r\n     * C8oSessionStatus.Ignore\r\n     */\r\n    public get olduser(): C8oSessionUser {\r\n        return this._olduser;\r\n    }\r\n\r\n    public set user(user: C8oSessionUser){\r\n        this._olduser = user;\r\n        this._user = user;\r\n    }\r\n    \r\n    public async setInitalState(){\r\n        try{\r\n            const status = await this.c8o.httpInterface.getUserServiceStatus(true);\r\n            await this.sort(null, null, null, null, null, null, status);\r\n        }\r\n        catch(e){\r\n            console.error(\"error getiing setInitalState\", e);\r\n        }\r\n        \r\n    }\r\n\r\n    public async getInitalState(){\r\n        try{\r\n            const resp: any = await this.c8o.httpInterface.getUserServiceStatus(true);\r\n            if(resp.body.authenticated){\r\n                this.sessId = resp.body.session;\r\n                await this.loginManager.defineRequestLogin(resp.body.session);\r\n                this.user = new C8oSessionUser(resp.body);\r\n                this.status = C8oSessionStatus.HasBeenConnected;\r\n            }\r\n        }\r\n        catch(e){\r\n            this.c8o.log.error(\"[C8oManagerSession][getInitalState] Impossible to define user service status\", e)\r\n        }\r\n        \r\n    }\r\n\r\n    public async sort(response: any, headers: any, urlReq, parametersReq, headersReq, resolve?, status?) {\r\n        // update _status if this is a sequence\r\n        return new Promise<boolean>(async (resolve, reject)=>{\r\n            let _status: C8oSessionStatus;\r\n                if(!status){\r\n                    _status = await this.defineSessionStatus(response, headers, urlReq, parametersReq, headersReq);\r\n                }\r\n                else{\r\n                    _status = await this.defineSessionStatus(status, headers, urlReq, parametersReq, headersReq, status);\r\n                }\r\n                switch (_status) {\r\n                    case C8oSessionStatus.Connected:\r\n                        this.ignored = 0;\r\n                        resolve(false);\r\n                        break;\r\n                    case C8oSessionStatus.HasBeenConnectedToAnother:\r\n                        // if we called this function from setInitalState\r\n                        if(response == null && headers == null){\r\n                            this.checkSession(headers, 0, resolve, status);\r\n                        }\r\n                        else{\r\n                            this.checkSession(headers, 0, resolve);\r\n                        }\r\n                        this.c8o.subscriber_session_changed.next(null);\r\n                        break;\r\n                    case C8oSessionStatus.HasBeenConnected:\r\n                        // if we called this function from setInitalState\r\n                        if(response == null && headers == null){\r\n                            this.checkSession(headers, 0, resolve, status);\r\n                        }\r\n                        else{\r\n                            this.checkSession(headers, 0, resolve);\r\n                        }\r\n                        break;\r\n                    case C8oSessionStatus.HasBeenDisconnected:\r\n                        // if we called this function from setInitalState\r\n                        if(response == null && headers == null){\r\n                            // do nothing\r\n                            resolve(false);\r\n                        }\r\n                        else{\r\n                            if(this.c8o.keepSessionAlive){\r\n                                let objParams;\r\n                                try{\r\n                                    objParams = parametersReq.split('&')\r\n                                    .reduce((a, c) => {\r\n                                        let [key, value] = c.split('=');\r\n                                        a[key] = value;\r\n                                        return a;\r\n                                    }, {});\r\n                                }\r\n                                catch(e){\r\n                                    objParams = {};\r\n                                }\r\n                                if(!(objParams[C8oCore.SEQ_AUTO_LOGIN_OFF] === \"true\")){\r\n                                    this.loginManager.doLogin()\r\n                                    .then((res)=>{\r\n                                        resolve(true);\r\n                                    })\r\n                                }\r\n                                else{\r\n                                    this.c8o.database.stopReplications(this.user.name);\r\n                                    this._user = new C8oSessionUser();\r\n                                    this.c8o.subscriber_session.next(null);\r\n                                    resolve(false);\r\n                                }\r\n                            }\r\n                            else{\r\n                                this.c8o.database.stopReplications(this.user.name);\r\n                                this._user = new C8oSessionUser();\r\n                                this.c8o.subscriber_session.next(null);\r\n                                resolve(false);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case C8oSessionStatus.Disconnected:\r\n                        resolve(false);\r\n                        break;\r\n                    case C8oSessionStatus.Ignore:\r\n                        this.ignored = this.ignored + 1;\r\n                        if (this.ignored >= 20) {\r\n                            this._status = C8oSessionStatus.Connected;\r\n                            this.c8o.log._trace(\"[C8oManagerSession] We ingored 20, no setting _status Connected\");\r\n                        }\r\n                        else {\r\n                            this.c8o.log._trace(\"[C8oManagerSession] Ignore this request to analyze loss of session, we ignored \" + this.ignored + \" at total\");\r\n                        }\r\n                        resolve(false);\r\n                        break;\r\n                }\r\n            \r\n        })\r\n    }\r\n\r\n\r\n    public async doAuthReachable(){\r\n        if(this.c8o.session.user.authenticated == true){\r\n            await this.mutex.acquire();\r\n            let err;\r\n            try {\r\n                let user = await this.c8o.httpInterface.getUserServiceStatus()\r\n                if(user.authenticated == false || err != undefined){\r\n                    if(this.c8o.keepSessionAlive){\r\n                        let success = await this.loginManager.doLogin();\r\n                        if (success.status == false) {\r\n                            \r\n                            this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                            this.c8o.subscriber_session.next(null);\r\n                            this.mutex.release();\r\n                        }\r\n                        else {\r\n                            this.c8o.database.restartReplications(this.user.name)\r\n                            this.checkSession(null, 0);\r\n                            this.mutex.release();\r\n                        }\r\n                    }\r\n                    else{\r\n                        this.sessId = user.session;\r\n                        this.c8o.subscriber_session.next(null);\r\n                        this.mutex.release();\r\n                    }\r\n                }\r\n                else{\r\n                    this.sessId = user.session;\r\n                    this._status = C8oSessionStatus.Connected;\r\n                    this.c8o.database.restartReplications(this.user.name)\r\n                    this.checkSession(null, 0);\r\n                    await this.mutex.release();\r\n                }\r\n            }\r\n            catch(e){\r\n                this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                this.mutex.release();\r\n            }\r\n            \r\n            \r\n        }\r\n    }\r\n    /**\r\n     * defineSessionStatus\r\n     * \r\n     * if haderStatus is not null => we are connected\r\n     * else if headerStatus is not null and this.id is not null, we has lost session\r\n     * else we were never connected \r\n     * \r\n     * @param response the http header response\r\n     */\r\n    public async defineSessionStatus(response, headers, urlReq, parametersReq, headersReq, fromSetInitalState?) {\r\n        // get session id sent by header\r\n        let headerStatus = C8oUtilsCore.checkHeaderArgument(response, \"x-convertigo-authenticated\");\r\n        if (headerStatus != null) {\r\n            if(this.id != null && this.id != \"\" && this.id != headerStatus){\r\n                this.c8o.database.stopReplications(this.user.name);\r\n                this._user = new C8oSessionUser();\r\n                if(!fromSetInitalState){\r\n                    this.loginManager.setRequestLogin(urlReq, parametersReq, headersReq, this.sessId);\r\n                }\r\n                this._status = C8oSessionStatus.HasBeenConnectedToAnother;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.HasBeenConnectedToAnother;\r\n            }\r\n            if (this.id != null || this._status == C8oSessionStatus.HasBeenConnected) {\r\n                this._status = C8oSessionStatus.Connected;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.Connected;\r\n            }\r\n            else {\r\n                if(!fromSetInitalState){\r\n                    this.loginManager.setRequestLogin(urlReq, parametersReq, headersReq, this.sessId);\r\n                }\r\n                this._status = C8oSessionStatus.HasBeenConnected;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.HasBeenConnected;\r\n            }\r\n        }\r\n        else {\r\n            if (this.id != null) {\r\n                let cancel = false;\r\n                if (this._status == C8oSessionStatus.HasBeenConnected) {\r\n                    let user;\r\n                    try {\r\n                        user = await this.c8o.httpInterface.getUserServiceStatus();\r\n                        cancel = user != undefined ? user.authenticated : false;\r\n                        this.sessId = user.session;\r\n                    }\r\n                    catch(e){\r\n                        cancel = false;\r\n                    }\r\n                    \r\n                }\r\n                if (!cancel) {\r\n                    this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                    this.id = headerStatus;\r\n                    return C8oSessionStatus.HasBeenDisconnected;\r\n                }\r\n                else {\r\n                    return C8oSessionStatus.Ignore;\r\n                }\r\n\r\n\r\n            }\r\n            else {\r\n                this._status = C8oSessionStatus.Disconnected;\r\n                this.id = headerStatus;\r\n                return C8oSessionStatus.Disconnected;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async checkUser(fromSetInitalState?) {\r\n        let user : any = this._user;\r\n        try {\r\n             if(fromSetInitalState){\r\n                user = fromSetInitalState.body;\r\n             }\r\n             else{\r\n                user = await this.c8o.httpInterface.getUserServiceStatus()\r\n             }\r\n             \r\n            if (this._user.name != user.user && this._user.name != \"anonymous\") {\r\n                // remove & stop all replications for older user\r\n                this.c8o.database.removeReplications(this._user.name);\r\n                \r\n            }\r\n            this._user = new C8oSessionUser(user);\r\n        }\r\n        catch(e){\r\n            if(fromSetInitalState){\r\n                this._status = C8oSessionStatus.Disconnected;\r\n            }\r\n            else{\r\n                this._status = C8oSessionStatus.HasBeenDisconnected;\r\n            }\r\n            \r\n        }\r\n        finally{\r\n            return user;\r\n        }\r\n    }\r\n\r\n    public async checkSession(headers: any, time: number, resolve = null, fromSetInitalState?) {\r\n        if(resolve == null){\r\n            resolve = (()=>{});\r\n        }\r\n        clearTimeout(this.checker);\r\n        this.checker = setTimeout(async () => {\r\n            let user;\r\n            user = await this.checkUser(fromSetInitalState);\r\n            let _status = user != undefined ? user.authenticated : false;\r\n            // if we are not anymore loggedin\r\n            if (!_status) {\r\n                this.c8o.log._debug(\"[C8oSessionManager] Session is not authenticated\");\r\n                // if we want to keepAlive session and we are not called from setInitalState\r\n                if (this.c8o.keepSessionAlive && fromSetInitalState) {\r\n                    // try to login\r\n                    await this.mutex.acquire();\r\n                    await this.mutex.release();\r\n                    if(this._status == C8oSessionStatus.Connected || this._status == C8oSessionStatus.HasBeenConnected){\r\n                        resolve(true);\r\n                    }\r\n                    else {\r\n                        let success = await this.loginManager.doLogin();\r\n                        if (success.status == false) {\r\n                            this.c8o.database.stopReplications(this.user.name);\r\n                            this._user = new C8oSessionUser();\r\n                            this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                            this.c8o.subscriber_session.next(null);\r\n                            resolve();\r\n                        }\r\n                        else {\r\n                            this.checkSession(headers, 0, resolve);\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n                else {\r\n                    this.c8o.database.stopReplications(this.user.name);\r\n                    this._user = new C8oSessionUser();\r\n\r\n                    // if we called this function from setInitalState\r\n                    if(fromSetInitalState){\r\n                        this._status = C8oSessionStatus.Disconnected;\r\n                    }\r\n                    else{\r\n                        this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                        this.c8o.subscriber_session.next(null);\r\n                    }\r\n                    resolve();\r\n                }\r\n\r\n            }\r\n            else {\r\n                // if we are still connected\r\n                this._status = C8oSessionStatus.Connected;\r\n                this.loginManager.setRequestLogin(null,null,null,user.session);\r\n                var funclistener = ()=> {\r\n                    this.c8o.httpInterface.p1 = new Promise((resolve)=>{});\r\n                    this.c8o.httpInterface.firstCall = true;\r\n                    // safe delete previous Checker\r\n                    try{\r\n                        clearTimeout(this.checker);\r\n                    }\r\n                    catch(e){\r\n                        \r\n                    }\r\n                    setTimeout(async ()=> {\r\n                        this.mutex.acquire();\r\n                        this.c8o.log.debug(\"[C8oSessionManager]: onResume checking user status\");\r\n                        let user = await this.checkUser();\r\n                        let _status = user != undefined ? user.authenticated : false;\r\n                        // if we are not anymore loggedin\r\n                        if (!_status) {\r\n                            this.c8o.log.debug(\"[C8oSessionManager]: onResume user is no longer logged\");\r\n                            if (this.c8o.keepSessionAlive) {\r\n                                this.c8o.log.debug(\"[C8oSessionManager]: onResume keepAlive session activated, we will try to autologin\");\r\n                                this.c8o.session.status = C8oSessionStatus.HasBeenDisconnected;\r\n                                // try to login\r\n                                let success = await this.loginManager.doLogin();\r\n                                if (success.status == false) {\r\n                                    this.c8o.log.debug(\"[C8oSessionManager]: onResume autologin failed\");\r\n                                    this.c8o.database.stopReplications(this.user.name);\r\n                                    this._user = new C8oSessionUser();\r\n                                    this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                                    this.c8o.subscriber_session.next(null);\r\n                                    this.mutex.release();\r\n                                    this.c8o.httpInterface.p1 = Promise.resolve(true);\r\n                                    resolve();\r\n                                }\r\n                                else {\r\n                                    this.c8o.log.debug(\"[C8oSessionManager]: onResume autologin worked\");\r\n                                    this.mutex.release();\r\n                                    this.checkSession(headers, 0, resolve);\r\n                                    this.c8o.httpInterface.p1 = Promise.resolve(true);\r\n                                }\r\n                            }\r\n                            else {\r\n                                this.c8o.log.debug(\"[C8oSessionManager]: onResume stopping replications\");\r\n                                this.c8o.database.stopReplications(this.user.name);\r\n                                this._user = new C8oSessionUser();\r\n                                this._status = C8oSessionStatus.HasBeenDisconnected;\r\n                                this.c8o.subscriber_session.next(null);\r\n                                this.mutex.release();\r\n                                resolve();\r\n                            }\r\n                        }\r\n                        else{\r\n                            this._status = C8oSessionStatus.Connected;\r\n                            this.mutex.release();\r\n                        }\r\n                    }, 0);\r\n                };\r\n\r\n                try {\r\n                    if(this.resumeListener != undefined){\r\n                        document.removeEventListener(\"resume\", this.resumeListener, false);\r\n                    }\r\n                }\r\n                catch(e){   \r\n                    console.log(e);\r\n                }\r\n                \r\n                this.resumeListener = funclistener;\r\n                document.addEventListener(\"resume\",funclistener , false);\r\n                \r\n                \r\n                this.c8o.database.restartReplications(this.user.name);\r\n                let timeR = +user['maxInactive'] * 0.95 * 1000;\r\n                if (this.c8o.keepSessionAlive) {\r\n                    this.c8o.log._debug(\"[C8oSessionManager] Pooling for session, next check will be in \" + timeR + \"ms\");\r\n                    this.checkSession(headers, timeR);\r\n                    resolve();\r\n                }\r\n                else {\r\n                    if (this.checker != undefined) {\r\n                        try{\r\n                            clearTimeout(this.checker);\r\n                        }\r\n                        catch(e){\r\n                            \r\n                        }\r\n                    }\r\n                    this.checker =\r\n                        setTimeout(async () => {\r\n                            this.c8o.database.stopReplications(this.user.name);\r\n                            this._status = C8oSessionStatus.Disconnected;\r\n                            this.c8o.subscriber_session.next(null);\r\n                        }, timeR)\r\n                        resolve();\r\n                }\r\n            }\r\n        }, time)\r\n    }\r\n\r\n\r\n}","import { C8oBase } from \"./c8oBase\";\r\nimport { C8oHttpInterfaceCore } from \"./c8oHttpInterfaceCore\";\r\nimport { C8oLogger } from \"./c8oLogger\";\r\nimport { C8oLogLevel } from \"./c8oLogLevel\";\r\nimport { C8oSettings } from \"./c8oSettings\";\r\nimport { C8oUtilsCore } from \"./c8oUtilsCore\";\r\n\r\nimport { C8oFullSync, C8oFullSyncCbl } from \"./c8oFullSync\";\r\nimport { C8oResponseJsonListener, C8oResponseListener } from \"./c8oResponse\";\r\nimport { C8oExceptionMessage } from \"./Exception/c8oExceptionMessage\";\r\n\r\nimport { C8oCallTask } from \"./c8oCallTask\";\r\nimport { C8oFullSyncChangeListener } from \"./c8oFullSyncChangeListener\";\r\nimport { C8oPromise } from \"./c8oPromise\";\r\nimport { C8oCouchBaseLiteException } from \"./Exception/c8oCouchBaseLiteException\";\r\nimport { C8oException } from \"./Exception/c8oException\";\r\nimport { C8oExceptionListener } from \"./Exception/c8oExceptionListener\";\r\nimport { Observable, Subject, timer } from 'rxjs';\r\n\r\nimport {C8oManagerNetwork} from \"./c8oManagerNetwork\";\r\nimport {C8oManagerDatabase} from \"./c8oManagerDatabase\";\r\nimport {C8oManagerSession} from \"./c8oManagerSession\";\r\n\r\nimport * as _ from \"lodash\";\r\nimport { debounce } from \"rxjs/operators\";\r\n//@ts-ignore\r\nimport { throwError } from 'rxjs';\r\ndeclare var require: any;\r\n/**\r\n * Allows to send requests to a Convertigo Server (or Studio), these requests are called c8o calls.<br/>\r\n * C8o calls are done thanks to a HTTP request or a CouchbaseLite usage.<br/>\r\n * An instance of C8o is connected to only one Convertigo and can't change it.<br/>\r\n * To use it, you have to first initialize the C8o instance with the Convertigo endpoint, then use call methods with Convertigo variables as parameter.\r\n */\r\n\r\n// @dynamic\r\nexport abstract class C8oCore extends C8oBase {\r\n    // Log:\r\n    // - VERBOSE (v): methods parameters,\r\n    // - DEBUG (d): methods calls,\r\n    // - INFO (i):\r\n    // - WARN (w):\r\n    // - ERROR (e):\r\n\r\n    /*** Regular expression ***/\r\n\r\n    /**\r\n     * The regex used to handle the c8o requestable syntax (\"&lt;project&gt;.&lt;sequence&gt;\" or \"&lt;project&gt;.&lt;connector&gt;.&lt;transaction&gt;\")\r\n     */\r\n    protected static RE_REQUESTABLE = /^([^.]*)\\.(?:([^.]+)|(?:([^.]+)\\.([^.]+)))$/;\r\n\r\n    /**\r\n     * The regex used to get the part of the endpoint before '/projects/...'\r\n     */\r\n    protected static RE_ENDPOINT = /^(https?:\\/\\/([^:/]+)(:[0-9]+)?\\/?.*?)\\/projects\\/([^\\/]+)$/;\r\n\r\n    /**\r\n     *  Engine reserved parameters\r\n     */\r\n    public static ENGINE_PARAMETER_PROJECT: string = \"__project\";\r\n    public static ENGINE_PARAMETER_SEQUENCE: string = \"__sequence\";\r\n    public static ENGINE_PARAMETER_CONNECTOR: string = \"__connector\";\r\n    public static ENGINE_PARAMETER_TRANSACTION: string = \"__transaction\";\r\n    public static ENGINE_PARAMETER_ENCODED: string = \"__encoded\";\r\n    public static ENGINE_PARAMETER_DEVICE_UUID: string = \"__uuid\";\r\n    public static ENGINE_PARAMETER_PROGRESS: string = \"__progress\";\r\n    public static ENGINE_PARAMETER_FROM_LIVE: string = \"__fromLive\";\r\n    public lastChangeTimeStamp: number = 0; \r\n    public lastChangeSetTimeout = null;\r\n    public threshold = 50;\r\n    public observanleHandleFullSyncLive : Subject<any> = new Subject();\r\n    /**\r\n     * FULLSYNC parameters\r\n     */\r\n\r\n    public static use_merge_prefix: string = \"_use_merge\";\r\n    /**\r\n     * Constant to use as a parameter for a Call of \"fs://.post\" and must be followed by a FS_POLICY_* constant.\r\n     * <pre>{@code\r\n     * c8o.callJson(\"fs://.post\",\r\n     *   C8o.FS_POLICY, C8o.FS_POLICY_MERGE,\r\n     *   \"docid\", myid,\r\n     *   \"mykey\", myvalue\r\n     * ).sync();\r\n     * }</pre>\r\n     */\r\n    public static FS_POLICY: string = \"_use_policy\";\r\n    /**\r\n     Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n     This is the default post policy that don't alter the document before the CouchbaseLite's insertion.\r\n     */\r\n    public static FS_POLICY_NONE: string = \"none\";\r\n    /**\r\n     Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n     This post policy remove the \"_id\" and \"_rev\" of the document before the CouchbaseLite's insertion.\r\n     */\r\n    public static FS_POLICY_CREATE: string = \"create\";\r\n    /**\r\n     Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n     This post policy inserts the document in CouchbaseLite even if a document with the same \"_id\" already exists.\r\n     */\r\n    public static FS_POLICY_OVERRIDE: string = \"override\";\r\n    /**\r\n     Use it with \"fs://.post\" and C8o.FS_POLICY.\r\n\r\n     This post policy merge the document with an existing document with the same \"_id\" before the CouchbaseLite's insertion.\r\n     */\r\n    public static FS_POLICY_MERGE: string = \"merge\";\r\n    /**\r\n     Use it with \"fs://.post\". Default value is \".\".\r\n\r\n     This key allow to override the sub key separator in case of document depth modification.\r\n     */\r\n    public static FS_SUBKEY_SEPARATOR: string = \"_use_subkey_separator\";\r\n    /**\r\n     Use it with \"project.sequence\". Default value is \".\".\r\n\r\n     This key allow to disable autologin feature for a given callJson\r\n     */\r\n    public static SEQ_AUTO_LOGIN_OFF: string = \"__disableAutologin\";\r\n\r\n    /**\r\n     * Use it with \"fs://\" request as parameter to enable the live request feature.<br/>\r\n     * Must be followed by a string parameter, the 'liveid' that can be use to cancel the live\r\n     * request using c8o.cancelLive(liveid) method.<br/>\r\n     * A live request automatically recall the then or thenUI handler when the database changed.\r\n     */\r\n    public static FS_LIVE: string = \"__live\";\r\n\r\n    /** Local cache keys **/\r\n    public static LOCAL_CACHE_DOCUMENT_KEY_RESPONSE: string = \"response\";\r\n    public static LOCAL_CACHE_DOCUMENT_KEY_RESPONSE_TYPE: string = \"responseType\";\r\n    public static LOCAL_CACHE_DOCUMENT_KEY_EXPIRATION_DATE: string = \"expirationDate\";\r\n\r\n    public static LOCAL_CACHE_DATABASE_NAME: string = \"c8olocalcache\";\r\n\r\n    /** Response type **/\r\n    public static RESPONSE_TYPE_XML: string = \"pxml\";\r\n    public static RESPONSE_TYPE_JSON: string = \"json\";\r\n\r\n    /* Static configuration */\r\n    private static deviceUUID: string;\r\n\r\n    /** Network **/\r\n\r\n    /**\r\n     * The Convertigo endpoint, syntax: &lt;protocol&gt;://&lt;host&gt;:&lt;port&gt;/&lt;Convertigo web app path&gt;/projects/&lt;project name&gt; (Example: http://127.0.0.1:18080/convertigo/projects/MyProject)\r\n     */\r\n    protected _endpoint: string;\r\n    protected _endpointConvertigo: string;\r\n    protected _endpointIsSecure: boolean;\r\n    protected _endpointHost: string;\r\n    protected _endpointPort: string;\r\n    protected _endpointProject: string;\r\n    protected _automaticRemoveSplashsCreen: boolean = true;\r\n\r\n    /**\r\n     * Used to run HTTP requests.\r\n     */\r\n    public httpInterface: C8oHttpInterfaceCore;\r\n\r\n    /**\r\n     * Allows to log locally and remotely to the Convertigo server.\r\n     */\r\n    public c8oLogger: C8oLogger;\r\n\r\n    /**\r\n     * Used to run fullSync requests.\r\n     */\r\n    public c8oFullSync: C8oFullSync;\r\n\r\n    public lives: C8oCallTask[] = [];\r\n    public livesDb: string[] = [];\r\n\r\n    public subscriber_session: Subject<any>;\r\n    public subscriber_session_changed: Subject<any>;\r\n    public subscriber_network: Subject<any>;\r\n    public subscriber_login: Subject<any>;\r\n    public subscriber_database_reset: Subject<any>;\r\n\r\n    private _reply = new Subject<any>();\r\n\r\n    protected data: any;\r\n    protected _http: any;\r\n    protected _couchUrl: string = null;\r\n    protected promiseConstructor: Promise<any>;\r\n    protected promiseInit: Promise<any>;\r\n    public promiseFinInit: Promise<any>;\r\n    protected promiseReachable: Promise<any>;\r\n    private promiseManagerNetwork: Promise<any>;\r\n    protected replicationsToRestart : Array<any>;\r\n    private _waitingForInit;\r\n    public reachable;\r\n\r\n    public network: C8oManagerNetwork;\r\n    public database: C8oManagerDatabase;\r\n    public session: C8oManagerSession;\r\n\r\n    public get couchUrl(): string {\r\n        return this._couchUrl;\r\n    }\r\n\r\n    public set couchUrl(value: string) {\r\n        this._couchUrl = value;\r\n    }\r\n\r\n    public override get logC8o(): boolean {\r\n        return this._logC8o;\r\n    }\r\n\r\n    public override set logC8o(value: boolean) {\r\n        this._logC8o = value;\r\n    }\r\n\r\n    public override get logRemote(): boolean {\r\n        return this._logRemote;\r\n    }\r\n\r\n    public override set logRemote(value: boolean) {\r\n        this._initalLogLevel = value;\r\n        this._logRemote = value;\r\n    }\r\n\r\n    public override get logLevelLocal(): C8oLogLevel {\r\n        return this._logLevelLocal;\r\n    }\r\n\r\n    public override set logLevelLocal(value: C8oLogLevel) {\r\n        this._logLevelLocal = value;\r\n    }\r\n\r\n    public get log(): C8oLogger {\r\n        return this.c8oLogger;\r\n    }\r\n\r\n    public override toString(): string {\r\n        return \"C8o[\" + this._endpoint + \"]\";\r\n    }\r\n\r\n    public override get endpoint(): string {\r\n        return this._endpoint;\r\n    }\r\n\r\n    public override set endpoint(value: string) {\r\n        this._endpoint = value;\r\n    }\r\n\r\n    public get endpointConvertigo(): string {\r\n        return this._endpointConvertigo;\r\n    }\r\n\r\n    public set endpointConvertigo(value: string) {\r\n        this._endpointConvertigo = value;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get endpointIsSecure(): boolean {\r\n        return this._endpointIsSecure;\r\n    }\r\n\r\n    public set endpointIsSecure(value: boolean) {\r\n        this._endpointIsSecure = value;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get endpointHost(): string {\r\n        return this._endpointHost;\r\n    }\r\n\r\n    public set endpointHost(value: string) {\r\n        this._endpointHost = value;\r\n    }\r\n\r\n    //noinspection JSUnusedGlobalSymbols\r\n    public get endpointPort(): string {\r\n        return this._endpointPort;\r\n    }\r\n\r\n    public set endpointPort(value: string) {\r\n        this._endpointPort = value;\r\n    }\r\n\r\n    public get endpointProject(): string {\r\n        return this._endpointProject;\r\n    }\r\n\r\n    public set endpointProject(value: string) {\r\n        this._endpointProject = value;\r\n    }\r\n\r\n    public get deviceUUID(): Promise<string> {\r\n        \r\n            return new Promise((resolve)=>{\r\n                if(window[\"cordova\"]!=undefined){\r\n                    document.addEventListener(\"deviceready\", ()=>{\r\n                        if(C8oCore.deviceUUID == undefined){\r\n                            C8oCore.deviceUUID = C8oUtilsCore.getNewGUIDString();\r\n                        }\r\n                        resolve(C8oCore.deviceUUID);\r\n                    }, false);\r\n                }\r\n                else{\r\n                    if(C8oCore.deviceUUID == undefined){\r\n                        C8oCore.deviceUUID = C8oUtilsCore.getNewGUIDString();\r\n                    }\r\n                    resolve(C8oCore.deviceUUID);\r\n                }\r\n        \r\n        \r\n        \r\n            \r\n        })\r\n        \r\n    }\r\n\r\n    public get httpPublic(): any {\r\n        return this._http;\r\n    }\r\n\r\n    public override get resetBase(): boolean {\r\n        return this._resetBase;\r\n    }\r\n\r\n    public override set resetBase(resetBase: boolean) {\r\n        this._resetBase = resetBase;\r\n    }\r\n\r\n    public override get prefixBase(): boolean {\r\n        return this._prefixBase;\r\n    }\r\n\r\n    public override set prefixBase(resetBase: boolean) {\r\n        this._prefixBase = resetBase;\r\n    }\r\n\r\n    \r\n\r\n    public abstract get sdkVersion(): string;\r\n\r\n    public get coreVersion(): string {\r\n        return \"1.0.7\";//require(\"../../package.json\").version;\r\n    }\r\n\r\n    public xsrfUsed = false;\r\n\r\n    /**\r\n     * This is the base object representing a Convertigo Server end point. This object should be instantiated\r\n     * when the apps starts and be accessible from any class of the app. Although this is not common , you may have\r\n     * several C8o objects instantiated in your app.\r\n     *\r\n     * @param http\r\n     *\r\n     * @throws C8oException In case of invalid parameter or initialization failure.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.data = null;\r\n        this.c8oLogger = new C8oLogger(this, true);\r\n        this.subscriber_session = new Subject<any>();\r\n        this.subscriber_session_changed = new Subject<any>();\r\n        this.subscriber_network = new Subject<any>();\r\n        this.subscriber_login = new Subject<any>();\r\n        this.subscriber_database_reset = new Subject<any>();\r\n        this.network = new C8oManagerNetwork(this);\r\n        this.database= new C8oManagerDatabase(this);\r\n        this.session = new C8oManagerSession(this);\r\n        this.promiseManagerNetwork = this.network.init();\r\n        this.observanleHandleFullSyncLive\r\n        .pipe(debounce(() => timer(100)))\r\n        .subscribe((val) => {\r\n            this.executeHandleFullSyncLive();\r\n        });  \r\n\r\n    }\r\n\r\n    public importLoginState(c8o: C8oCore){\r\n        let session = c8o.session;\r\n        this.session = session;\r\n    }\r\n\r\n    protected extractendpoint() {\r\n        if (!C8oUtilsCore.isValidUrl(this.endpoint)) {\r\n            throw new C8oException(C8oExceptionMessage.illegalArgumentInvalidURL(this.endpoint).toString());\r\n        }\r\n        const matches = C8oCore.RE_ENDPOINT.exec(this.endpoint.toString());\r\n        if (matches === null) {\r\n            throw new C8oException(C8oExceptionMessage.illegalArgumentInvalidEndpoint(this.endpoint.toString()));\r\n        }\r\n        this.endpointConvertigo = matches[0].substring(0, (matches[0].indexOf(\"/projects\")));\r\n        this.endpointIsSecure = matches[1] != null;\r\n        this.endpointHost = matches[2];\r\n        this.endpointPort = matches[3];\r\n        this.endpointProject = matches[4];\r\n    }\r\n\r\n\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters.<br/>\r\n     * To not use a C8oExceptionListener you can set the parameter to null\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters - Contains c8o variables\r\n     * @param c8oResponseListener - Define the behavior with the c8o call response\r\n     * @param c8oExceptionListener - Define the behavior when there is an exception during execution\r\n     */\r\n    public call(requestable: string, parameters: Object = null, c8oResponseListener: C8oResponseListener = null, c8oExceptionListener: C8oExceptionListener = null) {\r\n        try {\r\n            if (requestable === null || requestable === undefined) {\r\n                //noinspection ExceptionCaughtLocallyJS\r\n                throw new C8oException(C8oExceptionMessage.illegalArgumentNullParameter(\"resquestable\"));\r\n            }\r\n            if (parameters === null || parameters === undefined) {\r\n                parameters = {};\r\n            } else {\r\n                if (this._normalizeParameters == true) {\r\n                    try {\r\n                        parameters = (JSON.parse(JSON.stringify(parameters)));\r\n                    }\r\n                    catch (error) {\r\n                        this.log.debug(\"[C8o] can't normalize parameters due to cyclic error. We will use parameters non normalized\");\r\n                    }\r\n\r\n                }\r\n            }\r\n            const regex = C8oCore.RE_REQUESTABLE.exec(requestable);\r\n            if (regex === null || regex === undefined) {\r\n                //noinspection ExceptionCaughtLocallyJS\r\n                throw new C8oException(C8oExceptionMessage.InvalidArgumentInvalidEndpoint(this._endpoint));\r\n            }\r\n            if (regex[1] !== \"\") {\r\n                parameters[C8oCore.ENGINE_PARAMETER_PROJECT.toString()] = regex[1];\r\n            }\r\n            if (regex[2] != null) {\r\n                parameters[C8oCore.ENGINE_PARAMETER_SEQUENCE.toString()] = regex[2];\r\n            } else {\r\n                parameters[C8oCore.ENGINE_PARAMETER_CONNECTOR.toString()] = regex[3];\r\n                parameters[C8oCore.ENGINE_PARAMETER_TRANSACTION.toString()] = regex[4];\r\n            }\r\n            return this._call(parameters, c8oResponseListener, c8oExceptionListener);\r\n        } catch (error) {\r\n            this.handleCallException(c8oExceptionListener, parameters, error);\r\n        } finally {\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes a c8o call with c8o requestable in parameters ('__project' and ('__sequence' or ('__connector' and '__transaction'))).<br/>\r\n     * To not use a C8oExceptionListener you can set the parameter to null.\r\n     *\r\n     * @param parameters - Contains c8o variables\r\n     * @param c8oResponseListener - Define the behavior with the c8o call response\r\n     * @param c8oExceptionListener - Define the behavior when there is an exception during execution\r\n     */\r\n    public _call(parameters: Object = null, c8oResponseListener: C8oResponseListener = null, c8oExceptionListener: C8oExceptionListener = null) {\r\n        // IMPORTANT: all c8o calls have to end here !\r\n        Promise.all([this.promiseFinInit, this.promiseManagerNetwork]).then(() => {\r\n            try {\r\n                this.c8oLogger.logMethodCall(\"call\", parameters, c8oResponseListener, c8oExceptionListener);\r\n                if (parameters == null) {\r\n                    parameters = {};\r\n                } else {\r\n                    if (this._normalizeParameters == true) {\r\n                        try {\r\n                            parameters = (JSON.parse(JSON.stringify(parameters)));\r\n                        }\r\n                        catch (error) {\r\n                            this.log.debug(\"[C8o] can't normalize parameters due to cyclic error. We will use parameters non normalized\");\r\n                        }\r\n                    }\r\n                }\r\n                const task: C8oCallTask = new C8oCallTask(this, parameters, c8oResponseListener, c8oExceptionListener);\r\n                task.run();\r\n            } catch (error) {\r\n                this.handleCallException(c8oExceptionListener, parameters, error);\r\n            } finally {\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters, expecting a JSON response through a C8oPromise.<br/>\r\n     * The C8oPromise allow to register response handler with .then and .thenUI,\r\n     * error handler with .fail and failUI,\r\n     * replication handler with .progress\r\n     * and synchronous response with .sync().\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters: Object - Contains c8o variables as key/value pair in the Map\r\n     * @return A C8oPromise that can deliver the JSON response\r\n     */\r\n    public callJsonObject(requestable: string, parameters: Object): C8oPromise<JSON> {\r\n        this.removeNull(parameters)\r\n        const promise: C8oPromise<JSON> = new C8oPromise<JSON>(this);\r\n        this.call(requestable, parameters, new C8oResponseJsonListener((response: any, requestParameters: Object) => {\r\n            if (requestParameters == null) {\r\n                requestParameters = {};\r\n            }\r\n            if (response == null && requestParameters[C8oCore.ENGINE_PARAMETER_PROGRESS]) {\r\n                promise.onProgress(requestParameters[C8oCore.ENGINE_PARAMETER_PROGRESS]);\r\n            } else {\r\n                promise.onResponse(response, requestParameters);\r\n            }\r\n        }),\r\n            new C8oExceptionListener((exception: C8oException, data: Object) => {\r\n                promise.onFailure(exception, data);\r\n            }));\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Makes a c8o call with c8o requestable out of parameters, expecting a JSON response through a C8oPromise.<br/>\r\n     * The C8oPromise allow to register response handler with .then and .thenUI,\r\n     * error handler with .fail and failUI,\r\n     * replication handler with .progress\r\n     * and synchronous response with .sync().\r\n     *\r\n     * @param requestable - Contains the Convertigo Sequence or Transaction targeted  (Syntax: \"<project>.<sequence>\" or \"<project>.<connector>.<transaction>\")\r\n     * @param parameters - Contains c8o variables as key/value\r\n     * @return A C8oPromise that can deliver the JSON response\r\n     */\r\n    public callJson(requestable: string, ...parameters: any[]): C8oPromise<JSON> {\r\n        return this.callJsonObject(requestable, C8oCore.toParameters(parameters));\r\n    }\r\n\r\n    /**\r\n     * Transforms siblings values as key/value of a Map.\r\n     *\r\n     * @param parameters pair of values to transform a object\r\n     * @return a Map that contains all parameters\r\n     */\r\n    public static toParameters(parameters: any): Object {\r\n        const newParameters: Object = {};\r\n        if (0 !== parameters.length % 2) {\r\n            throw new C8oException(\"Incorrect number of parameters\");\r\n        }\r\n        for (let i = 0; i < parameters.length; i += 2) {\r\n            newParameters[parameters[i]] = parameters[i + 1];\r\n        }\r\n        return newParameters;\r\n    }\r\n    /**\r\n     * Remove null value from parameters\r\n     *\r\n     * @param parameters an object\r\n     * @return a Map that contains all parameters\r\n     */\r\n    public removeNull(parameters: any){\r\n        for(let val in parameters){\r\n            if(parameters[val]== null){\r\n                delete parameters[val];\r\n                this.log._trace(\"remove parameters \"+ val+ \" since its value is null or undefined\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls the exception listener callback if it is not null, else prints the exception stack trace.\r\n     *\r\n     * @param c8oExceptionListener\r\n     * @param requestParameters\r\n     * @param exception\r\n     */\r\n    public handleCallException(c8oExceptionListener: C8oExceptionListener, requestParameters: Object, exception: Error) {\r\n        this.c8oLogger.warn(\"Handle a call exception\", exception);\r\n        if (c8oExceptionListener != null) {\r\n            c8oExceptionListener.onException(exception, requestParameters);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return an subject that call next if session has been lost\r\n     */\r\n    public handleSessionLost(): Subject<any> {\r\n        this.subscriber_session.subscribe((res)=>{\r\n            this.c8oLogger.debug(\"[C8o][handleSessionLost] Handle a session lost\");\r\n\r\n/*            (this.c8oFullSync as C8oFullSyncCbl).canceled = false;\r\n            (this.c8oFullSync as C8oFullSyncCbl).cancelActiveReplications();\r\n  */\r\n           \r\n        });\r\n        return this.subscriber_session;\r\n    }\r\n\r\n    /**\r\n     * Return an subject that call next if session authenticated user change\r\n     */\r\n     public handleSessionAuthenticatedUserChanged(): Subject<any> {\r\n        this.subscriber_session_changed.subscribe((res)=>{\r\n            this.c8oLogger.debug(\"[C8o][handleSessionLost] Handle a session change of authenticated user\");           \r\n        });\r\n        return this.subscriber_session_changed;\r\n    }\r\n\r\n    /**\r\n     * Return an subject that call next if network has change\r\n     */\r\n    public handleNetworkEvents(): Subject<any> {\r\n        return this.subscriber_network;\r\n    }\r\n\r\n    /**\r\n     * Return an subject that call next if autologin is triggered with its result\r\n     */\r\n    public handleAutoLoginResponse(): Subject<any> {\r\n        return this.subscriber_login;\r\n    }\r\n\r\n    /**\r\n     * Return an subject that call next if database has been reset\r\n     */\r\n     public handleResetDatabase(): Subject<any> {\r\n        return this.subscriber_database_reset;\r\n    };\r\n    \r\n    /**\r\n     * get an attachment for a given object\r\n     *\r\n     * @param id: string\r\n     * @param attachment_name: string\r\n     *\r\n     * @returns a promise containing a buffer\r\n     */\r\n    public async get_attachment(id: string, attachment_name: string, database_name?: string): Promise<any> {\r\n        return new Promise(async (resolve, reject) => {\r\n            if (database_name == null) {\r\n                database_name = this.defaultDatabaseName;\r\n            }\r\n            if ((this.c8oFullSync as C8oFullSyncCbl) != undefined) {\r\n                const fullsyncdb = await (this.c8oFullSync as C8oFullSyncCbl).getOrCreateFullSyncDatabase(database_name);\r\n                fullsyncdb.getdatabase.getAttachment(id, attachment_name).then((buffer) => {\r\n                    resolve(buffer);\r\n                }).catch((err) => {\r\n                    reject(err);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add a listener to monitor all changes of the 'db'.\r\n     *\r\n     * @param db the name of the fullsync database to monitor. Use the default database for a blank or a null value.\r\n     * @param listener the listener to trigger on change.\r\n     */\r\n    public addFullSyncChangeListener(db: string, listener: C8oFullSyncChangeListener, parameters: Object = {}) {\r\n        (this.c8oFullSync as C8oFullSyncCbl).addFullSyncChangeListener(db, listener, parameters);\r\n    }\r\n\r\n    /**\r\n     * Remove a listener for changes of the 'db'.\r\n     *\r\n     * @param db the name of the fullsync database to monitor. Use the default database for a blank or a null value.\r\n     * @param listener the listener instance to remove.\r\n     */\r\n    public removeFullSyncChangeListener(db: string, listener: C8oFullSyncChangeListener) {\r\n        (this.c8oFullSync as C8oFullSyncCbl).removeFullSyncChangeListener(db, listener);\r\n    }\r\n\r\n    public addLive(liveid: string, db: string, task: C8oCallTask) {\r\n        this.cancelLive(liveid);\r\n        this.lives[liveid] = task;\r\n        this.livesDb[liveid] = db;\r\n        this.addFullSyncChangeListener(db, this.handleFullSyncLive);\r\n    }\r\n\r\n    public cancelLive(liveid: string) {\r\n        if (this.livesDb[liveid] !== undefined) {\r\n            let db: string = this.livesDb[liveid];\r\n            delete this.livesDb[liveid];\r\n            if (this.livesDb[db] !== undefined) {\r\n                db = null;\r\n            }\r\n            if (db !== null) {\r\n                this.removeFullSyncChangeListener(db, this.handleFullSyncLive);\r\n            }\r\n        }\r\n        delete this.lives[liveid];\r\n    }\r\n\r\n    private executeHandleFullSyncLive(){\r\n        console.log(\"Executing from handleFullSyncLive into debounce\");   \r\n        for (const task in this.lives) {\r\n            (this.lives[task] as C8oCallTask).executeFromLive();\r\n        }\r\n    }\r\n\r\n    private doAlog(){\r\n        console.log(\"Executing from handleFullSyncLive into debounce\");\r\n    }\r\n\r\n    private debounce(func, timeout = 300){\r\n        let timer;\r\n        return (...args) => {\r\n          clearTimeout(timer);\r\n          timer = setTimeout(() => { func.apply(this, args); }, timeout);\r\n       };\r\n    }\r\n\r\n    public truc(){\r\n        for(var i =0; i< 10; i++){\r\n            console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.debounce(()=>this.doAlog());\r\n        }\r\n    }\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    protected handleFullSyncLive: C8oFullSyncChangeListener = new C8oFullSyncChangeListener(\r\n        (changes: Object) => {\r\n            console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.observanleHandleFullSyncLive.next(changes);\r\n            /*console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            this.debounce(()=>this.executeHandleFullSyncLive());\r\n            /*console.log(\"Executing from handleFullSyncLive before debounce\");\r\n            _.debounce(\r\n                this.executeHandleFullSyncLive,\r\n                window[\"threshold\"] != undefined ? window[\"threshold\"] : this.threshold,\r\n                window[\"options\"] != undefined ? window[\"options\"] : {}\r\n            )();*/\r\n            /*let localLastChangeTimeStamp = new Date().getTime();\r\n            if(22)\r\n            this.lastChangeTimeStamp = localLastChangeTimeStamp;\r\n            console.log(\"Executing from handleFullSyncLive. \\nthis.lastChangeTimeStamp=\"+ this.lastChangeTimeStamp)\r\n            this.lastChangeSetTimeout = setTimeout(()=>{\r\n                let execution_time = new Date().getTime();\r\n                let sub = execution_time - this.lastChangeTimeStamp;\r\n                console.log(\"Executing from handleFullSyncLive into setTimeout. \\nthis.lastChangeTimeStamp=\"+ this.lastChangeTimeStamp+\"\\nexecution_time=\"+execution_time+\"\\nsub=\"+sub+\"\\nthreshold=\"+this.threshold);\r\n                if( sub >= this.threshold){\r\n                    console.log(\"Executing from handleFullSyncLive into setTimeout reloading lives\");\r\n                    for (const task in this.lives) {\r\n                        (this.lives[task] as C8oCallTask).executeFromLive();\r\n                    }\r\n                }\r\n                else{\r\n                    console.log(\"Executing from handleFullSyncLive into setTimeout donot reloading lives\");\r\n                }\r\n            }, this.threshold);*/\r\n            \r\n    });\r\n    \r\n    /**\r\n     * Method to bastract http get\r\n     * @param uri the uri for given request\r\n     */\r\n    public abstract httpGetObservable(uri): Observable<any>;\r\n\r\n     /**\r\n     * Init http interface in client sdk\r\n     */\r\n    abstract initC8oHttInterface(): void;\r\n\r\n    /**\r\n     * This is the base object representing a Convertigo Server end point. This object should be instantiated\r\n     * when the apps starts and be accessible from any class of the app. Although this is not common , you may have\r\n     * several C8o objects instantiated in your app.\r\n     *\r\n     * @param c8oSettings Initialization options.<br/>\r\n     *                    Example: new C8oSettings().setLogRemote(false).setDefaultDatabaseName(\"sample\")\r\n     *\r\n     * @throws C8oException In case of invalid parameter or initialization failure.\r\n     */\r\n    public init(c8oSettings?: C8oSettings): Promise<any> {\r\n        let nullableEndpoint = true;\r\n        if (c8oSettings !== undefined) {\r\n            if (c8oSettings.endpoint != null) {\r\n                nullableEndpoint = false;\r\n            }\r\n        }\r\n        if (nullableEndpoint) {\r\n            this.promiseConstructor = new Promise<void>((resolve) => {\r\n                // if project is running into web browser served by convertigo\r\n                // get the url from window.location\r\n                if (window.location.href.startsWith(\"http\") && window.location.href.indexOf(\"/DisplayObjects\") != -1) {\r\n                    let n = window.location.href.indexOf(\"/DisplayObjects\");\r\n                    this.endpoint = window.location.href.substring(0, n);\r\n                    resolve();\r\n                }\r\n                // else if project is running on device or serve by ionic serve\r\n                // get the uri from env.json\r\n                else {\r\n                    let uri =\"\";\r\n                    if(window.location.href.startsWith(\"file://\")){\r\n                        uri = (window.location.href.substring(0, window.location.href.indexOf(\"/index.html\"))) + \"/env.json\"\r\n                    }\r\n                    else{\r\n                        uri = window.location.origin + \"/env.json\";\r\n                    }\r\n                    this.httpGetObservable(uri)\r\n                        .subscribe(\r\n                            data => {\r\n                                this.data = data;\r\n                                //noinspection TypeScriptUnresolvedVariable\r\n                                let remoteBase = data[\"remoteBase\"].toString();\r\n                                let n = remoteBase.indexOf(\"/_private\");\r\n                                this.endpoint = remoteBase.substring(0, n);\r\n                                this._automaticRemoveSplashsCreen = data[\"splashScreenRemoveMode\"] !== \"manual\";\r\n                                resolve();\r\n                            },\r\n                            error=>{\r\n                                alert(\"Missing env.json file\");\r\n                                let errMsg: string;\r\n                                if (error instanceof Error) {\r\n                                    errMsg = error.message;\r\n                                } else {\r\n                                    errMsg = `${error.status} - ${error.statusText || \"\"} ${error}`;\r\n                                }\r\n                                //@ts-ignore\r\n                                if(throwError != undefined){\r\n                                    //@ts-ignore\r\n                                    return throwError(errMsg);\r\n                                }\r\n                                else{\r\n                                    //@ts-ignore\r\n                                    return Observable.throw(errMsg);\r\n                                }\r\n                                \r\n                            }\r\n                        );\r\n                }\r\n            }).then(() => {\r\n                this.extractendpoint();\r\n            });\r\n        }\r\n        else {\r\n            this.promiseConstructor = new Promise<void>((resolve) => {\r\n                this.endpoint = c8oSettings.endpoint;\r\n                this.extractendpoint();\r\n                resolve();\r\n            });\r\n        }\r\n\r\n        this.promiseInit = Promise.all([this.promiseConstructor]).then(() => {\r\n            return new Promise<void>(async (resolve) => {\r\n                this.copy(c8oSettings);\r\n                this.initC8oHttInterface();\r\n                try{\r\n                    await this.session.setInitalState();\r\n                }\r\n                catch(e){\r\n                    console.error(\"Error calling setInitalState\", e);\r\n                }\r\n                this.c8oLogger.affect_val(this, false);\r\n                try{\r\n                    await this.c8oLogger.logRemoteInit()\r\n                }\r\n                catch(e){\r\n                    console.error(\"Error calling logRemoteInit\", e);\r\n                }\r\n                this.c8oLogger.logMethodCall(\"C8o Constructor\");\r\n                this.c8oFullSync = new C8oFullSyncCbl(this);\r\n                resolve();\r\n                \r\n            });\r\n        });\r\n        return this.promiseInit;\r\n    }\r\n\r\n    /**\r\n     * This should be called OnPlatform Ready to remove splashscreen if necessary\r\n     *\r\n     */\r\n    public finalizeInit(): Promise<any>{\r\n        if(this.promiseFinInit != null){\r\n            return this.promiseFinInit;\r\n        }\r\n        else{\r\n            this.promiseFinInit = new Promise<void>((resolve)=>{\r\n                Promise.all([this.promiseInit]).then(() => {\r\n                    /**\r\n                     * Looking for splashScreen timeOut\r\n                     */\r\n                    if (this._automaticRemoveSplashsCreen) {\r\n                        if (navigator[\"splashscreen\"] !== undefined) {\r\n                            navigator[\"splashscreen\"].hide();\r\n                        }\r\n                    }\r\n                    /**\r\n                     * Looking for wkWebView\r\n                     */\r\n                    if (window[\"wkWebView\"] != undefined) {\r\n                        window[\"wkWebView\"].injectCookie(this.endpointConvertigo)\r\n                        this.log.debug(\"[C8O] wkWebView detected: We will inject Cookie for endpoint: \"+ this.endpointConvertigo);\r\n                    }\r\n                    /**\r\n                     * Looking for cblite\r\n                     */\r\n                    if (window[\"cblite\"] != undefined) {\r\n                        window[\"cblite\"].getURL((err, url) => {\r\n                            if (err) {\r\n                                //this.checkReachable()\r\n                                resolve();\r\n                            }\r\n                            else{\r\n                                url = url.replace(new RegExp(\"/$\"), \"\");\r\n                                this.couchUrl = url;\r\n                                //this.checkReachable()\r\n                                resolve();\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        //this.checkReachable()\r\n                        resolve();\r\n                    }\r\n                });\r\n            });\r\n            return this.promiseFinInit;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n// @dynamic\r\nexport class FullSyncPolicy {\r\n\r\n    public static NONE: FullSyncPolicy = new FullSyncPolicy(C8oCore.FS_POLICY_NONE, (database: any, newProperties: Object) => {\r\n        let documentId = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n        if (documentId === \"\") {\r\n            documentId = null;\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            database.post(newProperties).then((createdDocument) => {\r\n                resolve(createdDocument);\r\n            }).catch((error) => {\r\n                reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n            });\r\n        });\r\n    });\r\n\r\n    public static CREATE: FullSyncPolicy = new FullSyncPolicy(C8oCore.FS_POLICY_CREATE, (database: any, newProperties: Object) => {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n                delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n                database.post(newProperties).then((createdDocument) => {\r\n                    resolve(createdDocument);\r\n                });\r\n            } catch (error) {\r\n                reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n            }\r\n        });\r\n    });\r\n\r\n    public static OVERRIDE: FullSyncPolicy = new FullSyncPolicy(C8oCore.FS_POLICY_OVERRIDE, (database: any, newProperties: Object) => {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                const documentId: string = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n                delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n                delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n                if (documentId == null) {\r\n                    database.post(newProperties).then((createdDocument) => {\r\n                        resolve(createdDocument);\r\n                    });\r\n                } else {\r\n                    database.get(documentId).then((doc) => {\r\n                        newProperties[\"_id\"] = documentId;\r\n                        newProperties[\"_rev\"] = doc._rev;\r\n                        return database.put(newProperties);\r\n                    }).then((createdDocument) => {\r\n                        resolve(createdDocument);\r\n                    }).catch((error) => {\r\n                        if (error.status === \"404\" || error.status === 404) {\r\n                            newProperties[\"_id\"] = documentId;\r\n                            return database.post(newProperties);\r\n                        } else {\r\n                            reject(error);\r\n                        }\r\n                    },\r\n                    ).then((createdDocument) => {\r\n                        resolve(createdDocument);\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n            }\r\n        });\r\n    });\r\n\r\n    public static MERGE: FullSyncPolicy = new FullSyncPolicy(C8oCore.FS_POLICY_MERGE, (database: any, newProperties: Object, subPolicy = null) => {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                const documentId: string = C8oUtilsCore.getParameterStringValue(newProperties, C8oFullSync.FULL_SYNC__ID, false);\r\n                // delete newProperties[C8oFullSync.FULL_SYNC__ID];\r\n                delete newProperties[C8oFullSync.FULL_SYNC__REV];\r\n                // copy newProperties object to be able to apply subPolicy merge\r\n                let copyNewProperties = C8oFullSyncCbl.deepCloneObject(newProperties);\r\n                if (documentId == null) {\r\n                    // Apply subPolicy for merge (here can only be delete since, there is no previous doc)\r\n                    C8oFullSyncCbl.applySubPolicyForMerge(false, copyNewProperties, newProperties , subPolicy);\r\n                    // Put document\r\n                    database.put(newProperties)\r\n                        .then((createdDocument) => {\r\n                            resolve(createdDocument);\r\n                        }).catch((error) => {\r\n                            reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                        });\r\n\r\n                } else {\r\n                    database.get(documentId)\r\n                        .then((doc) => {\r\n                            // Apply Policy merge\r\n                            C8oFullSyncCbl.mergeProperties(newProperties, doc);\r\n                            // Apply subPolicy for merge\r\n                            C8oFullSyncCbl.applySubPolicyForMerge(true, copyNewProperties, newProperties , subPolicy);\r\n                            // Put document\r\n                            database.put(newProperties)\r\n                                .then((createdDocument) => {\r\n                                    resolve(createdDocument);\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                                });\r\n\r\n                        }).catch((error) => {\r\n                            if (error.status === 404) {\r\n                                // Apply subPolicy for merge (here can only be delete since, there is no previous doc)\r\n                                C8oFullSyncCbl.applySubPolicyForMerge(false, copyNewProperties, newProperties , subPolicy);\r\n                                // Put document\r\n                                database.put(newProperties)\r\n                                    .then((createdDocument) => {\r\n                                        resolve(createdDocument);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                                    });\r\n                            } else {\r\n                                reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n                            }\r\n                        });\r\n                }\r\n            } catch (error) {\r\n                reject(new C8oCouchBaseLiteException(C8oExceptionMessage.fullSyncPutProperties(newProperties), error));\r\n            }\r\n        });\r\n    });\r\n\r\n    public value: string;\r\n    public action: (PouchDB, Object, subPolicy?) => any;\r\n\r\n    constructor(value: string, action: (_Object, Object) => any) {\r\n        this.value = value;\r\n        this.action = action;\r\n        \r\n    }\r\n\r\n    public static values(): FullSyncPolicy[] {\r\n        return [this.NONE, this.CREATE, this.OVERRIDE, this.MERGE];\r\n    }\r\n\r\n    public static getFullSyncPolicy(value: string): FullSyncPolicy {\r\n        if (value != null) {\r\n            const fullSyncPolicyValues: FullSyncPolicy[] = FullSyncPolicy.values();\r\n            for (const fullSyncPolicy of fullSyncPolicyValues) {\r\n                if (fullSyncPolicy.value === value) {\r\n                    return fullSyncPolicy as FullSyncPolicy;\r\n                }\r\n            }\r\n        }\r\n        return this.NONE;\r\n    }\r\n}\r\n\r\nexport class FullSyncPostDocumentParameter {\r\n    public static POLICY: FullSyncPostDocumentParameter = new FullSyncPostDocumentParameter(C8oCore.FS_POLICY);\r\n    public static SUBKEY_SEPARATOR: FullSyncPostDocumentParameter = new FullSyncPostDocumentParameter(C8oCore.FS_SUBKEY_SEPARATOR);\r\n\r\n    public name: string;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    public static values(): FullSyncPostDocumentParameter[] {\r\n        const array: FullSyncPostDocumentParameter[] = [];\r\n        array.push(this.POLICY, this.SUBKEY_SEPARATOR);\r\n        return array;\r\n    }\r\n\r\n}\r\n","import { C8oCore } from \"./c8oCore\";\r\nimport { C8oProgress } from \"./c8oProgress\";\r\nimport { C8oResponseListener, C8oResponseJsonListener } from \"./c8oResponse\";\r\nimport { retry, timeout } from 'rxjs/operators';\r\nimport { C8oHttpRequestException } from \"./Exception/c8oHttpRequestException\";\r\n\r\nimport { C8oExceptionMessage } from \"./Exception/c8oExceptionMessage\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n// @ts-ignore\r\nimport * as rxjs0 from \"rxjs\";\r\n// @ts-ignore\r\nimport * as rxjs1 from \"rxjs/observable/fromPromise\";\r\n\r\ndeclare const require: any;\r\nexport abstract class C8oHttpInterfaceCore {\r\n    public c8o: C8oCore;\r\n    public timeout: number;\r\n    public firstCall: boolean = true;\r\n    public p1: Promise<Object>;\r\n    protected _isCordova = null;\r\n    public firstcheckSessionR: boolean;\r\n    private js = true;\r\n    private session = \"\";\r\n    private _timeout: any;\r\n    private from: any;\r\n    private requestLogin: any;\r\n    private _loggedinSession: boolean;\r\n    private _notifySessionLost: boolean;\r\n\r\n    constructor(c8o: C8oCore, js: boolean = true) {\r\n        /**\r\n         * As we must support Angular 5.x, 6.x and 7.x, they need as peerDependencies diffrent versions of Rxjs.\r\n         * We alson need rxjs, but switch version of rxjs methods and paths to import are diffrents.\r\n         * So we test presence or not of module in some paths into rxjs to define in which version we are and execute the good import.\r\n        */\r\n         let rxjs = rxjs0;//require('rxjs');\r\n        if (rxjs != undefined) {\r\n            if (rxjs.from != undefined) {\r\n                this.from = rxjs.from;\r\n                c8o.log._trace(\"[C8oHttpInterfaceCore] Detect rxjs 6.x\")\r\n            }\r\n            else {\r\n                rxjs = rxjs1;//require('rxjs/observable/fromPromise');\r\n                c8o.log._trace(\"[C8oHttpInterfaceCore] Detect rxjs 5.x\")\r\n                if (rxjs != undefined) {\r\n                    // @ts-ignore\r\n                    this.from = rxjs.fromPromise;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.c8o = c8o;\r\n        this.timeout = this.c8o.timeout;\r\n        this.firstcheckSessionR = false;\r\n        this._notifySessionLost = false;\r\n\r\n        /**\r\n         *  As this package will be used in two diffrent library, wee need to test in which platform we are,\r\n         *  to perform diffrent platform specific actions.\r\n         */\r\n        this.js = js;\r\n    }\r\n\r\n    public forceInit() {\r\n        this.firstcheckSessionR = false;\r\n        this._notifySessionLost = false;\r\n    }\r\n\r\n    /**\r\n     * Method to bastract http get\r\n     * @param uri the uri for given request\r\n     */\r\n    public httpGetObservable(uri, param1 = null, param2 = null) {\r\n        if (this.js) {\r\n            if (param1 == null) {\r\n                return this.from(this.c8o.httpPublic.get(uri));\r\n            }\r\n            else if (param2 == null) {\r\n                return this.from(this.c8o.httpPublic.get(uri, param1));\r\n            }\r\n            else {\r\n                return this.from(this.c8o.httpPublic.get(uri, param1, param2));\r\n            }\r\n        }\r\n        else {\r\n            if (param1 == null) {\r\n                return this.c8o.httpPublic.get(uri);\r\n            }\r\n            else if (param2 == null) {\r\n                return this.c8o.httpPublic.get(uri, param1);\r\n            }\r\n            else {\r\n                return this.c8o.httpPublic.get(uri, param1, param2);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method to bastract http post\r\n     * @param uri the uri for given request\r\n     */\r\n    public httpPostObservable(uri, param1, param2) {\r\n        if (this.js) {\r\n            return this.from(this.c8o.httpPublic.post(uri, param1, param2));\r\n        }\r\n        else {\r\n            return this.c8o.httpPublic.post(uri, param1, param2);\r\n        }\r\n    }\r\n    /**\r\n     * Call user service\r\n     * @param headers headers for request\r\n     */\r\n    public getUserServiceStatus(observe?): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n            Object.assign(headersObject, this.c8o.headers);\r\n            let params = {\r\n                headers: this.getHeaders(headersObject),\r\n                withCredentials: true,\r\n            }\r\n            if (observe) {\r\n                params[\"observe\"] = \"response\";\r\n            }\r\n            this.httpPostObservable(this.c8o.endpointConvertigo + \"/services/user.Get\", {}, params)\r\n                .pipe(\r\n                    retry(1)\r\n                )\r\n                .subscribe(\r\n                    response => {\r\n                        resolve(response);\r\n                    },\r\n                    error => {\r\n                        reject(error);\r\n                    })\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n    * Make an http post\r\n    * @param {string} url\r\n    * @param {Object} parameters\r\n    * @return {Promise<any>}\r\n    */\r\n    public httpPost(url: string, parameters: Object): Promise<any> {\r\n        parameters = this.transformRequest(parameters);\r\n        let headersObject = { \"Content-Type\": \"application/x-www-form-urlencoded\", \"x-convertigo-sdk\": this.c8o.sdkVersion, headers: { 'Accept-Encoding': 'gzip' } };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        let headers = this.getHeaders(headersObject);\r\n        if (this.firstCall) {\r\n            this.p1 = new Promise((resolve, reject) => {\r\n                this.firstCall = false;\r\n                this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n            });\r\n            return this.p1;\r\n        }\r\n        else {\r\n            return new Promise((resolve, reject) => {\r\n                Promise.all([this.p1]).then(() => {\r\n                    this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n                }).catch((error) => {\r\n                    this.execHttpPosts(url, parameters, headers, resolve, reject);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute http Posts \r\n     * @param url \r\n     * @param parameters \r\n     * @param headers \r\n     * @param resolve \r\n     * @param reject \r\n     */\r\n    public execHttpPosts(url: string, parameters: any, headers: any, resolve, reject, headers_return = false, doLogin = false) {\r\n        let _timeout = this.c8o.timeout;\r\n        if (parameters[\"_c8oTimeout\"] != undefined) {\r\n            _timeout = +parameters[\"_c8oTimeout\"];\r\n        }\r\n        this.httpPostObservable(url, parameters, {\r\n            headers: headers,\r\n            withCredentials: true,\r\n            observe: 'response'\r\n        })\r\n            .pipe(timeout(_timeout))\r\n            .pipe(\r\n                retry(1)\r\n            )\r\n            .subscribe(\r\n                response => {\r\n                    this.handleResponseHttpPost(response, headers, resolve, url, parameters, headers, headers_return, reject, doLogin);\r\n                },\r\n                error => {\r\n                    this.handleErrorHttpPost(error, reject, url);\r\n                }\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Handle response of http Posts\r\n     * @param response \r\n     * @param headers \r\n     * @param resolve \r\n     */\r\n    private handleResponseHttpPost(response: any, headers: any, resolve: any, urlReq: string, parametersReq: any, headersReq: any, returns_header = false, reject = null, doLogin = false) {\r\n        //this.checkReachable();\r\n        //this.triggerSessionCheck(response, headers, urlReq, parametersReq, headersReq);\r\n        if (urlReq.indexOf(\".json\") != -1) {\r\n            if (doLogin == true) {\r\n                resolve({ body: response[\"body\"], headers: response[\"headers\"] });\r\n            }\r\n            else {\r\n                this.c8o.session.sort(response, headers, urlReq, parametersReq, headersReq)\r\n                    .then((res) => {\r\n                        if (res != true || parametersReq[C8oCore.SEQ_AUTO_LOGIN_OFF] === true) {\r\n                            if (returns_header) {\r\n                                resolve({ body: response[\"body\"], headers: response[\"headers\"] });\r\n                            }\r\n                            else {\r\n                                resolve(response.body);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.execHttpPosts(urlReq, parametersReq, headersReq, resolve, reject, returns_header)\r\n                        }\r\n                    })\r\n            }\r\n\r\n        }\r\n        else {\r\n            resolve(response.body);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Handle errors of http Posts\r\n     * @param error \r\n     * @param reject \r\n     */\r\n    private handleErrorHttpPost(error: any, reject: any, url = undefined) {\r\n        if (url != undefined) {\r\n            if (url.indexOf(\".Add\") == -1) {\r\n                this.c8o.network.init();\r\n            }\r\n        }\r\n        reject((new C8oHttpRequestException(C8oExceptionMessage.runHttpRequest(), error)));\r\n    }\r\n\r\n    /**\r\n     * Check type of file given in parameters\r\n     * 0 : No file to upload\r\n     * 1 : FileList Or File\r\n     * 2 : url when running in cordova\r\n     * @param {Object} parameters\r\n     * @return {number}\r\n     */\r\n    public checkFile(parameters: Object): number {\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    //noinspection JSUnfilteredForInLoop\r\n                    if (parameters[p][p1] instanceof FileList || parameters[p][p1] instanceof File || parameters[p][p1] instanceof Blob) {\r\n                        return 1;\r\n                    }\r\n                    else if (this.isCordova()) {\r\n                        if (parameters[p][p1] instanceof URL) {\r\n                            return 2;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof FileList || parameters[p] instanceof File || parameters[p] instanceof Blob) {\r\n                    return 1;\r\n                }\r\n                else if (this.isCordova()) {\r\n                    if (parameters[p] instanceof URL) {\r\n                        return 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Check if we are in cordova environment\r\n     * @return {boolean}\r\n     */\r\n    protected isCordova(): boolean {\r\n        if (this._isCordova == null) {\r\n            if (window[\"cordova\"] != undefined) {\r\n                this._isCordova = true;\r\n            }\r\n            else {\r\n                this._isCordova = false;\r\n            }\r\n        }\r\n        return this._isCordova;\r\n    }\r\n\r\n    /**\r\n     * Url encode parameters\r\n     * @param {Object} parameters\r\n     * @return {string}\r\n     */\r\n    public transformRequest(parameters: Object): string {\r\n        let str = [];\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    //noinspection JSUnfilteredForInLoop\r\n                    str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(parameters[p][p1]));\r\n                }\r\n            }\r\n            else {\r\n                str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(parameters[p]));\r\n            }\r\n        }\r\n        let query = str.join(\"&\");\r\n        // Add this to instruct Convertigo server to remove any name space in the jSON keys\r\n        // to prevent keys like this:  'namespace:key'\r\n        return (query + \"&__removeNamespaces=true\");\r\n    }\r\n\r\n    /**\r\n     * Transform FormData parameters\r\n     * @param {Object} parameters\r\n     * @return {FormData}\r\n     */\r\n    public transformRequestformdata(parameters: Object): FormData {\r\n        let formdata: FormData = new FormData();\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    if (parameters[p][p1] instanceof FileList) {\r\n                        for (var i = 0; i < parameters[p][p1].length; i++) {\r\n                            formdata.append(p, parameters[p][p1][i], parameters[p][p1][i].name);\r\n                        }\r\n                    }\r\n                    else if (parameters[p][p1] instanceof File || parameters[p][p1] instanceof Blob) {\r\n                        formdata.append(p, parameters[p][p1], parameters[p][p1].name);\r\n                    }\r\n                    else {\r\n                        formdata.append(p, parameters[p][p1])\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof FileList) {\r\n                    for (var j = 0; j < parameters[p].length; j++) {\r\n                        formdata.append(p, parameters[p][j], parameters[p][j].name);\r\n                    }\r\n                }\r\n                else if (parameters[p] instanceof File || parameters[p] instanceof Blob) {\r\n                    formdata.append(p, parameters[p], parameters[p].name);\r\n                }\r\n                else {\r\n                    formdata.append(p, parameters[p]);\r\n                }\r\n            }\r\n        }\r\n        return formdata;\r\n    }\r\n\r\n    /**\r\n     * Extract file from parameters and return and array containing a file and params\r\n     * @param {Object} parameters\r\n     * @return {any}\r\n     */\r\n    public transformRequestfileNative(parameters: Object): any {\r\n        let file: Array<any> = new Array();\r\n        let params: Object = new Object();\r\n        for (let p in parameters) {\r\n            if (parameters[p] instanceof Array) {\r\n                for (let p1 in parameters[p]) {\r\n                    if (parameters[p][p1] instanceof URL) {\r\n                        file.push([p1, parameters[p][p1]]);\r\n                    }\r\n                    else {\r\n                        params[p1] = parameters[p][p1][\"href\"];\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (parameters[p] instanceof URL) {\r\n                    file.push([p, parameters[p][\"href\"]]);\r\n                }\r\n                else {\r\n                    params[p] = parameters[p];\r\n                }\r\n            }\r\n        }\r\n        return [file, params];\r\n    }\r\n\r\n    /**\r\n     * Handle the request\r\n     * @param {string} url\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    async handleRequest(url: string, parameters: Object, c8oResponseListener?: C8oResponseListener): Promise<any> {\r\n        if (parameters[\"__sequence\"] !== undefined) {\r\n            if (parameters[\"__sequence\"].indexOf(\"#\") !== -1) {\r\n                parameters[\"__sequence\"] = parameters[\"__sequence\"].substring(0, parameters[\"__sequence\"].indexOf(\"#\"));\r\n            }\r\n        }\r\n        switch (this.checkFile(parameters)) {\r\n            case 0: {\r\n                return this.httpPost(url, parameters);\r\n            }\r\n            case 1: {\r\n                let form = this.transformRequestformdata(parameters);\r\n                return this.uploadFileHttp(url, form, parameters, c8oResponseListener);\r\n            }\r\n            case 2: {\r\n                return this.uploadFilePluginNative(url, parameters, c8oResponseListener);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Upload file with native plugin\r\n     * @param {string} url\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    public uploadFilePluginNative(url: string, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        let progress: C8oProgress = new C8oProgress();\r\n        progress.pull = false;\r\n        let varNull: JSON = null;\r\n        let data = this.transformRequestfileNative(parameters);\r\n        let files = data[0];\r\n        let options = new window[\"FileUploadOptions\"]();\r\n        options.fileKey = files[0][0];\r\n        options.fileName = files[0][1].substr(files[0][1].lastIndexOf('/') + 1);\r\n        options.params = data[1];\r\n        let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        options.headers = headersObject;\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all([this.p1]).then(() => {\r\n                var ft = new window[\"FileTransfer\"]();\r\n                ft.onprogress = (progressEvent) => {\r\n                    if (progressEvent.lengthComputable) {\r\n                        this.handleProgress(progressEvent, progress, parameters, c8oResponseListener, varNull);\r\n                    }\r\n                };\r\n                ft.upload(files[0][1], encodeURI(url), ((resp => {\r\n                    resolve(resp);\r\n                })), ((err) => {\r\n                    reject(err);\r\n                }), options);\r\n            })\r\n                .catch(() => {\r\n                    var ft = new window[\"FileTransfer\"]();\r\n                    ft.onprogress = (progressEvent) => {\r\n                        if (progressEvent.lengthComputable) {\r\n                            this.handleProgress(progressEvent, progress, parameters, c8oResponseListener, varNull);\r\n                        }\r\n                    };\r\n                    ft.upload(files[0][1], encodeURI(url), ((resp => {\r\n                        resolve(resp);\r\n                    })), ((err) => {\r\n                        reject(err);\r\n                    }), options);\r\n                })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Upload File using an Http client\r\n     * @param {string} url\r\n     * @param {FormData} form\r\n     * @param {Object} parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @return {Promise<any>}\r\n     */\r\n    uploadFileHttp(url: string, form: FormData, parameters: Object, c8oResponseListener: C8oResponseListener): Promise<any> {\r\n        let headersObject = { 'Accept': 'application/json', 'x-convertigo-sdk': this.c8o.sdkVersion };\r\n        Object.assign(headersObject, this.c8o.headers);\r\n        let progress: C8oProgress = new C8oProgress();\r\n        progress.pull = false;\r\n        let varNull: JSON = null;\r\n\r\n        if (this.firstCall) {\r\n            this.p1 = new Promise((resolve) => {\r\n                this.firstCall = false;\r\n                this.getuploadRequester(url, form, headersObject)\r\n                    .subscribe(\r\n                        event => {\r\n                            this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                        },\r\n                        error => {\r\n                            this.handleErrorFileUpload(error, resolve);\r\n                        });\r\n            });\r\n            return this.p1;\r\n        }\r\n        else {\r\n            return new Promise((resolve, reject) => {\r\n                Promise.all([this.p1]).then(() => {\r\n                    this.getuploadRequester(url, form, headersObject)\r\n                        .subscribe(\r\n                            event => {\r\n                                this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                            },\r\n                            error => {\r\n                                this.handleErrorFileUpload(error, resolve);\r\n                            });\r\n                })\r\n                    .catch(() => {\r\n                        this.getuploadRequester(url, form, headersObject)\r\n                            .subscribe(\r\n                                event => {\r\n                                    this.handleResponseFileUpload(event, progress, parameters, c8oResponseListener, varNull, resolve);\r\n                                },\r\n                                error => {\r\n                                    this.handleErrorFileUpload(error, resolve);\r\n                                });\r\n                    });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handle FileuploadResponses\r\n     * @param event \r\n     * @param progress \r\n     * @param parameters \r\n     * @param c8oResponseListener \r\n     * @param varNull \r\n     * @param resolve \r\n     */\r\n    public handleResponseFileUpload(event: any, progress: C8oProgress, parameters: Object, c8oResponseListener: C8oResponseListener, varNull: any, resolve): void {\r\n        if (!this.js) {\r\n            if (event.type === 1) {\r\n                this.handleProgress(event, progress, parameters, c8oResponseListener, varNull);\r\n            } else if (this.isHttpResponse(event)) {\r\n                resolve(event.body);\r\n            }\r\n        }\r\n        else {\r\n            if (event.type == \"progress\") {\r\n                this.handleProgress(event.response, progress, parameters, c8oResponseListener, varNull);\r\n            }\r\n            else {\r\n                resolve(event.response);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle errors for file upload\r\n     * @param error \r\n     * @param resolve \r\n     */\r\n    private handleErrorFileUpload(error: any, resolve: any): void {\r\n        resolve({ \"error\": (new C8oHttpRequestException(C8oExceptionMessage.runHttpRequest(), error)) });\r\n    }\r\n\r\n    /**\r\n     * Handle progress\r\n     * @param event\r\n     * @param {C8oProgress} progress\r\n     * @param parameters\r\n     * @param {C8oResponseListener} c8oResponseListener\r\n     * @param {JSON} varNull\r\n     */\r\n    handleProgress(event: any, progress: C8oProgress, parameters: any, c8oResponseListener: C8oResponseListener, varNull: JSON): void {\r\n        progress.current = event.loaded;\r\n        progress.total = event.total;\r\n        if (event.loaded != event.total) {\r\n            progress.finished = false;\r\n        }\r\n        else {\r\n            progress.finished = true;\r\n        }\r\n        parameters[C8oCore.ENGINE_PARAMETER_PROGRESS] = progress;\r\n        (c8oResponseListener as C8oResponseJsonListener).onJsonResponse(varNull, parameters);\r\n\r\n    }\r\n\r\n    /**\r\n    * get headers;\r\n    * @param object headers object\r\n    */\r\n    public abstract getHeaders(object): any;\r\n\r\n    /**\r\n     * Post with progress\r\n     * @param url the url to post\r\n     * @param form the form data to post\r\n     * @param headersObject Headers to use\r\n     */\r\n    public abstract getuploadRequester(url: string, form: FormData, headersObject: any): Observable<any>;\r\n\r\n    /**\r\n     * test type of response\r\n     * @param event any\r\n     */\r\n    public abstract isHttpResponse(event: any): boolean;\r\n}\r\n","import {C8oBase} from \"./c8oBase\";\r\nimport {C8oLogLevel} from \"./c8oLogLevel\";\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * Contains optional parameters of a C8o class instantiation.<br/>\r\n * Note that setters return the setting instance thereby C8oSettings can be instantiate like that:<br/>\r\n * new C8oSettings().setTimeout(5000).setTrustAllCertificates(true).setUseEncryption(true);\r\n *\r\n */\r\nexport class C8oSettings extends C8oBase {\r\n\r\n    constructor(c8oSettings: C8oSettings = null) {\r\n        super();\r\n        if (c8oSettings != null) {\r\n            if (c8oSettings != null) {\r\n                this.copy(c8oSettings);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone C8osettings object\r\n     * @return {C8oSettings}\r\n     */\r\n    public clone(): C8oSettings {\r\n        return new C8oSettings(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the normalizeParameters. define if we normalize parameters of every calls using JSON.parse(JSON.stringify(parameters))<br/>\r\n     * @param normalize boolean.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n     public setUseWorker(worker: boolean): C8oSettings {\r\n        this._useworker = worker;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the normalizeParameters. define if we normalize parameters of every calls using JSON.parse(JSON.stringify(parameters))<br/>\r\n     * @param normalize boolean.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setNormalizeParameters(normalize: boolean): C8oSettings {\r\n        this._normalizeParameters = normalize;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the if session has to be maintain alive<br/>\r\n     * @param keepAlive if session has to be keep Alive\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setKeepSessionAlive(keepAlive: boolean): C8oSettings {\r\n        this._keepSessionAlive = keepAlive;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets if the error convertigo is throw in fail or not<br/>\r\n     * @param errorConvertigoIntoFail boolean\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setErrorConvertigoIntoFail(errorConvertigoIntoFail: boolean): C8oSettings {\r\n        this._errorConvertigoIntoFail = errorConvertigoIntoFail;\r\n        return this;\r\n    }\r\n\r\n\r\n    \r\n\r\n    /**\r\n     * Sets the if base has to be reseted on dectecting diffrent versions<br/>\r\n     * @param resetBase if you to able reset base\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setDisableResetBase(resetBase: boolean): C8oSettings {\r\n        this._resetBase = resetBase;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the if base has to be prefixed by user name<br/>\r\n     * @param prefixBase if you to able prefix base\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setEnablePrefixBase(prefixBase: boolean): C8oSettings {\r\n        this._prefixBase = prefixBase;\r\n        return this;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Sets the endpoint (override env.json).<br/>\r\n     * @param endpoint The endpoint.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setEndPoint(endpoint: string): C8oSettings {\r\n        this._endpointSettings = endpoint;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the connection timeout to Convertigo in milliseconds. A value of zero means the timeout is not used.<br/>\r\n     * Default is <b>0</b>.\r\n     * @param timeout The timeout.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setTimeout(timeout: number): C8oSettings {\r\n        if (timeout <= 0) {\r\n            timeout = -1;\r\n        }\r\n        this._timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Add a header\r\n     * @param name The name of header.\r\n     * @param value The value of header.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public addHeader(name: string, value: string) {\r\n        this._headers[name] = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * addClientCertificate\r\n     * @param {string} anyCertificate\r\n     * @param {string} password\r\n     * @return {C8oSettings}\r\n     */\r\n    public addClientCertificate(anyCertificate: string, password: string): C8oSettings;\r\n\r\n    /**\r\n     * addClientCertificate\r\n     * @param {number} anyCertificate\r\n     * @param {string} password\r\n     * @return {C8oSettings}\r\n     */\r\n    public addClientCertificate(anyCertificate: number, password: string): C8oSettings;\r\n\r\n    /**\r\n     * addClientCertificate\r\n     * @param anyCertificate\r\n     * @param {string} password\r\n     * @return {C8oSettings}\r\n     */\r\n    public addClientCertificate(anyCertificate: any, password: string): C8oSettings {\r\n        if (typeof anyCertificate === \"string\") {\r\n            if (this._clientCertificateFiles == null) {\r\n                this._clientCertificateFiles = {};\r\n            }\r\n            this._clientCertificateFiles[anyCertificate] = password;\r\n        } else if (typeof anyCertificate === \"number\") {\r\n            if (this._clientCertificateBinaries == null) {\r\n                this._clientCertificateBinaries = {};\r\n            }\r\n            this._clientCertificateBinaries[anyCertificate] = password;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a new cookie to the initial cookies send to the Convertigo server.\r\n     * @param name The name of the new cookie.\r\n     * @param value The value of the new cookie.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public addCookie(name: string, value: string): C8oSettings {\r\n        if (this._cookies == null) {\r\n            this._cookies = {};\r\n        }\r\n        this._cookies[name] = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a value indicating if logs are sent to the Convertigo server.<br/>\r\n     * Default is <b>true</b>.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setLogRemote(logRemote: boolean): C8oSettings {\r\n        this._logRemote = logRemote;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a value indicating the log level you want in the device console\r\n     * 0: ALL, 1: NONE, 2: TRACE, 3: DEBUG, 4: INFO, 5: WARN, 6: ERROR, 7: FATAL\r\n     * or use the android.util.Log constants\r\n     * Default is <b>0</b>.\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public  setLogLevelLocal(logLevelLocal: C8oLogLevel): C8oSettings {\r\n        this._logLevelLocal = logLevelLocal;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setLogC8o\r\n     * @param {boolean} logC8o\r\n     * @return {C8oSettings}\r\n     */\r\n    public setLogC8o(logC8o: boolean): C8oSettings {\r\n        this._logC8o = logC8o;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setLogOnFail\r\n     * @param {(exception: Error, parameters: Object) => void} logOnFail\r\n     * @return {C8oSettings}\r\n     */\r\n    public setLogOnFail(logOnFail: (exception: Error, parameters: Object) => void): C8oSettings {\r\n        this._logOnFail = logOnFail;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specify the default FullSync database name. Must match a Convertigo Server\r\n     * FullSync connector name\r\n     *\r\n     * @param defaultDatabaseName: string\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setDefaultDatabaseName(defaultDatabaseName: string): C8oSettings {\r\n        this._defaultDatabaseName = defaultDatabaseName;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setAuthenticationCookieValue\r\n     * @param {string} authenticationCookieValue\r\n     * @return {C8oSettings}\r\n     */\r\n    public setAuthenticationCookieValue(authenticationCookieValue: string): C8oSettings {\r\n        this._authenticationCookieValue = authenticationCookieValue;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setFullSyncServerUrl\r\n     * @param {string} fullSyncServerUrl\r\n     * @return {C8oSettings}\r\n     */\r\n    public setFullSyncServerUrl(fullSyncServerUrl: string): C8oSettings {\r\n        this._fullSyncServerUrl = fullSyncServerUrl;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setFullSyncUsername\r\n     * @param {string} fullSyncUsername\r\n     * @return {C8oSettings}\r\n     */\r\n    public setFullSyncUsername(fullSyncUsername: string): C8oSettings {\r\n        this._fullSyncUsername = fullSyncUsername;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setFullSyncPassword\r\n     * @param {string} fullSyncPassword\r\n     * @return {C8oSettings}\r\n     */\r\n    public setFullSyncPassword(fullSyncPassword: string): C8oSettings {\r\n        this._fullSyncPassword = fullSyncPassword;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * setFullSyncLocalSuffix\r\n     * @param {string} fullSyncLocalSuffix\r\n     * @return {C8oSettings}\r\n     */\r\n    public setFullSyncLocalSuffix(fullSyncLocalSuffix: string): C8oSettings {\r\n        this._fullSyncLocalSuffix = fullSyncLocalSuffix;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set if c8o calls variables are encrypted or not\r\n     *\r\n     * @param useEncryption\r\n     * @returns The current <b>C8oSettings</b>, for chaining.\r\n     */\r\n    public setUseEncryption(useEncryption: boolean): C8oSettings {\r\n        this._useEncryption = useEncryption;\r\n        return this;\r\n    }\r\n}\r\n","/**\r\n * Defines whether the response should be retrieved from local cache or from Convertigo server when the device can access the network.<br/>\r\n * When the device has no network access, the local cache response is used, if existing.\r\n */\r\nexport class Priority {\r\n    public isAvailable: boolean;\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static SERVER: Priority = new Priority(false);\r\n\r\n    //noinspection JSUnusedLocalSymbols\r\n    public static LOCAL: Priority = new Priority(true);\r\n\r\n    constructor(isAvailable: boolean) {\r\n        this.isAvailable = isAvailable;\r\n\r\n    }\r\n}\r\n","import {C8o} from \"./c8o.service\";\r\nimport {C8oFullSyncCbl, C8oHttpInterfaceCore, C8oResponseJsonListener, C8oResponseListener, C8oProgress,C8oHttpRequestException,C8oExceptionMessage} from \"../c8osdk-js-core/src/index\";\r\nimport {HttpEventType, HttpHeaders, HttpRequest, HttpResponse} from \"@angular/common/http\";\r\nimport { Observable } from 'rxjs';\r\nexport class C8oHttpInterface extends C8oHttpInterfaceCore{\r\n    \r\n    constructor(c8o: C8o) {\r\n        super(c8o, false);\r\n    }\r\n\r\n    /**\r\n     * get headers;\r\n     * @param object headers object\r\n     */\r\n    public getHeaders(object):any{\r\n        return new HttpHeaders(object);\r\n    }\r\n\r\n    /**\r\n     * Angular implementation to post with progress\r\n     * @param url the url to post\r\n     * @param form the form data to post\r\n     * @param headersObject Headers to use\r\n     */\r\n    public getuploadRequester(url:string, form: FormData, headersObject:any):Observable<any>{//, progress: C8oProgress, parameters: Object, c8oResponseListener: C8oResponseListener, varNull:any, resolve:any) {\r\n        let headers = new HttpHeaders(headersObject);\r\n        const httpRequest = new HttpRequest('POST', url, form, {reportProgress: true, withCredentials: true, headers: headers});\r\n        return this.c8o.httpPublic.request(httpRequest);\r\n    }\r\n    \r\n    /**\r\n     * test type of request\r\n     * @param event any\r\n     */\r\n    public isHttpResponse(event:any):boolean{\r\n        return (event instanceof HttpResponse)\r\n    }\r\n\r\n    \r\n\r\n    \r\n}","import {C8oCore} from \"../c8osdk-js-core/src/index\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {C8oHttpInterface} from \"./c8oHttpInterface.service\";\r\n\r\n@Injectable()\r\nexport class C8o extends C8oCore {\r\n\r\n    constructor(private http: HttpClient) {\r\n        super();\r\n        this._http = http;\r\n    }\r\n\r\n    /**\r\n     * get current sdk version\r\n     */\r\n    public get sdkVersion(): string {\r\n        return \"3.0.16-beta49\";\r\n    }\r\n    /**\r\n     * Method to bastract http get\r\n     * @param uri the uri for given request\r\n     */\r\n    public httpGetObservable(uri){\r\n        return this.httpPublic.get(uri);\r\n    }\r\n\r\n    /**\r\n     * Init http interface in client sdk\r\n     */\r\n    public initC8oHttInterface(){\r\n        this.httpInterface = new C8oHttpInterface(this);\r\n    }\r\n}","import {C8oUtilsCore} from \"../c8osdk-js-core/src/index\";\r\n//import {C8oUtilsCore} from \"c8osdkjscore\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\n\r\n\r\n@Injectable()\r\nexport class C8oUtils extends C8oUtilsCore{\r\n\r\n    public constructor(private http: HttpClient) {\r\n        super();\r\n        this.http = http;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpXsrfTokenExtractor, HttpHandler, HttpRequest, HttpEvent, HttpResponse, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, tap } from 'rxjs/operators';\r\nimport {C8o} from \"./c8o.service\";\r\n\r\n@Injectable()\r\nexport class HttpXsrfInterceptor implements HttpInterceptor {\r\n  private headerName: string = \"x-xsrf-token\";\r\n  private fetch: string = \"Fetch\";\r\n  constructor(private tokenExtractor: HttpXsrfTokenExtractor, private c8o: C8o) {\r\n    this.c8o.xsrfUsed = true;\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // get stored headerValue or fetch if the is no stored headerValue\r\n    const headerValue = window.localStorage.getItem(this.headerName) != undefined ? window.localStorage.getItem(this.headerName) : this.fetch;\r\n    // clone request adding xsrf header\r\n    req = req.clone({ headers: req.headers.set(this.headerName, headerValue)});\r\n    // re-execute request, and get HttResponses or HttpErrorResponses\r\n    return next.handle(req)\r\n    .pipe(\r\n      filter(event => event instanceof HttpResponse || event instanceof HttpErrorResponse),\r\n      tap((event: HttpResponse<any>) => {\r\n        // get and store new xsrf value\r\n        const xsrfResponseHeader = event[\"headers\"][\"get\"](this.headerName);\r\n        xsrfResponseHeader != undefined ? window.localStorage.setItem(this.headerName, xsrfResponseHeader) : null;\r\n      })\r\n    );\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of c8osdkangular\r\n */\r\nexport * from \"./lib/c8o.service\";\r\nexport * from \"./lib/c8oUtils.service\";\r\nexport * from \"./lib/c8oHttpInterface.service\";\r\nexport * from \"./lib/c8oHttpxsrfInterceptor.service\";\r\n//export * from \"c8osdkjscore\";\r\nexport * from \"./c8osdk-js-core/src/index\";\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["PouchDB"],"mappings":"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"}}}